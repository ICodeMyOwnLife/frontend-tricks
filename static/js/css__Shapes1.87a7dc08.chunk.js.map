{"version":3,"sources":["components/References/index.tsx","components/Todos/index.tsx","components/QuestionItem/styles.ts","components/QuestionItem/index.tsx","components/QuestionPage/styles.ts","components/QuestionPage/index.tsx","components/PageLayout/styles.ts","components/PageLayout/index.tsx","components/CodeViewer/styles.ts","components/CodeViewer/index.tsx","pages/css/Shapes1/styles.module.scss","pages/css/Shapes1/Shape.tsx","pages/css/Shapes1/ShapeContainer.tsx","pages/css/Shapes1/questions.tsx","pages/css/Shapes1/index.tsx"],"names":["References","memo","className","references","variant","map","name","url","key","href","target","rel","displayName","Todos","todos","Box","Typography","todo","useStyles","makeStyles","theme","Question","fontWeight","HiddenContent","marginBottom","spacing","Answer","marginTop","padding","fontSize","backgroundColor","grey","border","borderRadius","margin","maxWidth","BottomBox","paddingBottom","borderBottom","BottomBoxTitle","QuestionItem","index","question","answer","classes","useToggle","open","toggleOpen","hasReferences","length","hasTodos","showBottomBox","ListItem","button","onClick","ListItemText","primary","Collapse","in","timeout","createStyles","root","questions","fontFamily","color","classNamePrefix","QuestionPage","children","props","PageLayout","List","questionInfo","content","title","clsx","CodeViewer","style","okaidia","language","module","exports","Shape","type","ShapeContainer","Title","Shapes1Component","Shapes1"],"mappings":"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","file":"static/js/css__Shapes1.87a7dc08.chunk.js","sourcesContent":["import React, { FC, memo } from 'react';\nimport { Box, Typography } from '@material-ui/core';\n\nexport const ReferencesComponent: FC<ReferencesProps> = ({\n  className,\n  references,\n}) => (\n  <Box className={className}>\n    <Typography variant=\"h5\">References</Typography>\n    <ol>\n      {references!.map(({ name, url }) => (\n        <li key={url}>\n          <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">\n            {name}\n          </a>\n        </li>\n      ))}\n    </ol>\n  </Box>\n);\n\nconst References = memo(ReferencesComponent);\nReferences.displayName = 'References';\nexport default References;\n\nexport interface ReferencesProps {\n  className?: string;\n  references: ReferenceInfo[];\n}\n\nexport interface ReferenceInfo {\n  name: string;\n  url?: string;\n}\n","import React, { FC, memo } from 'react';\nimport { Box, Typography } from '@material-ui/core';\n\nexport const TodosComponent: FC<TodosProps> = ({ className, todos }) => (\n  <Box>\n    <Typography className={className} variant=\"h5\">\n      Todos\n    </Typography>\n    <ol>\n      {todos!.map(todo => (\n        <li key={todo}>{todo}</li>\n      ))}\n    </ol>\n  </Box>\n);\n\nconst Todos = memo(TodosComponent);\nTodos.displayName = 'Todos';\nexport default Todos;\n\nexport interface TodosProps {\n  className?: string;\n  todos: string[];\n}\n","import { makeStyles, Theme } from '@material-ui/core';\nimport { grey } from '@material-ui/core/colors';\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  Question: {\n    fontWeight: 500,\n  },\n  HiddenContent: {\n    marginBottom: theme.spacing(2),\n  },\n  Answer: {\n    marginTop: theme.spacing(1.5),\n    padding: 0,\n    fontSize: 14,\n    backgroundColor: grey[50],\n    border: `1px solid ${grey[400]}`,\n    borderRadius: 6,\n\n    '& p': {\n      padding: theme.spacing(0, 2.5),\n    },\n\n    '& ol,ul': {\n      margin: theme.spacing(1.5, 0),\n    },\n\n    '& img': {\n      maxWidth: '100%',\n    },\n  },\n  BottomBox: {\n    paddingBottom: theme.spacing(2),\n    borderBottom: `1px solid ${grey[400]}`,\n\n    '& ol,ul': {\n      marginTop: theme.spacing(1),\n    },\n\n    '& li': {\n      fontSize: 14,\n      fontWeight: 500,\n      marginBottom: theme.spacing(1),\n    },\n  },\n  BottomBoxTitle: {\n    margin: theme.spacing(3, 0, 0),\n  },\n}));\n\nexport default useStyles;\n","import React, { FC, memo } from 'react';\nimport { ListItem, ListItemText, Collapse, Box } from '@material-ui/core';\nimport { useToggle } from 'cb-hooks';\nimport References from 'components/References';\nimport Todos from 'components/Todos';\nimport { QuestionInfo } from 'types/app-common';\nimport useStyles from './styles';\n\nexport const QuestionItemComponent: FC<QuestionItemProps> = ({\n  index,\n  question,\n  answer,\n  references,\n  todos,\n}) => {\n  const classes = useStyles();\n  const [open, toggleOpen] = useToggle(false);\n  const hasReferences = !!(references && references.length);\n  const hasTodos = !!(todos && todos.length);\n  const showBottomBox = hasReferences || hasTodos;\n\n  return (\n    <>\n      <ListItem button onClick={toggleOpen}>\n        <ListItemText classes={{ primary: classes.Question }}>\n          {index}. {question}\n        </ListItemText>\n      </ListItem>\n      <Collapse in={open} timeout=\"auto\">\n        <Box className={classes.HiddenContent}>\n          <Box className={classes.Answer}>{answer}</Box>\n\n          {showBottomBox && (\n            <Box className={classes.BottomBox}>\n              {hasReferences && (\n                <References\n                  className={classes.BottomBoxTitle}\n                  references={references!}\n                />\n              )}\n\n              {hasTodos && (\n                <Todos className={classes.BottomBoxTitle} todos={todos!} />\n              )}\n            </Box>\n          )}\n        </Box>\n      </Collapse>\n    </>\n  );\n};\n\nconst QuestionItem = memo(QuestionItemComponent);\nQuestionItem.displayName = 'QuestionItem';\nexport default QuestionItem;\n\nexport interface QuestionItemProps extends QuestionInfo {\n  index: number;\n}\n","import { Theme, makeStyles, createStyles } from '@material-ui/core';\n\nconst styles = ({ spacing }: Theme) =>\n  createStyles({\n    root: {},\n    questions: {\n      marginTop: spacing(4),\n      '& code': {\n        fontFamily: `'Courier New', Courier, monospace`,\n        fontSize: 14,\n        fontWeight: 600,\n        color: `rgb(219, 104, 27)`,\n      },\n    },\n  });\n\nconst useStyles = makeStyles(styles, { classNamePrefix: 'QuestionPage' });\n\nexport default useStyles;\n","/* eslint-disable react/no-array-index-key */\nimport React, { FC, memo, ReactNode } from 'react';\nimport { Box, Typography, List } from '@material-ui/core';\nimport QuestionItem from 'components/QuestionItem';\nimport { QuestionInfo } from 'types/app-common';\nimport PageLayout from 'components/PageLayout';\nimport useStyles from './styles';\n\nexport const QuestionPageComponent: FC<QuestionPageProps> = ({\n  questions,\n  children,\n  ...props\n}) => {\n  const classes = useStyles();\n\n  return (\n    <PageLayout {...props}>\n      {children}\n      <Box className={classes.questions}>\n        <Typography variant=\"h4\">Questions</Typography>\n        <Box>\n          <List>\n            {questions.map((questionInfo, index) => (\n              <QuestionItem key={index} index={index + 1} {...questionInfo} />\n            ))}\n          </List>\n        </Box>\n      </Box>\n    </PageLayout>\n  );\n};\n\nconst QuestionPage = memo(QuestionPageComponent);\nQuestionPage.displayName = 'QuestionPage';\nexport default QuestionPage;\n\nexport interface QuestionPageProps {\n  className?: string;\n  title: string;\n  questions: QuestionInfo[];\n  children?: ReactNode;\n}\n","import { makeStyles, createStyles, Theme } from '@material-ui/core';\n\nconst styles = ({ spacing }: Theme) =>\n  createStyles({\n    root: {\n      marginTop: spacing(4),\n    },\n    content: {\n      marginTop: spacing(2.5),\n    },\n  });\n\nconst useStyles = makeStyles(styles, { classNamePrefix: 'PageLayout' });\n\nexport default useStyles;\n","import React, { FC, memo, ReactNode } from 'react';\nimport { Box, Typography } from '@material-ui/core';\nimport clsx from 'clsx';\nimport useStyles from './styles';\n\nexport const PageLayoutComponent: FC<PageLayoutProps> = ({\n  className,\n  title,\n  children,\n}) => {\n  const classes = useStyles();\n\n  return (\n    <Box className={clsx(classes.root, className)}>\n      <Typography variant=\"h3\">{title}</Typography>\n      <Box className={classes.content}>{children}</Box>\n    </Box>\n  );\n};\n\nconst PageLayout = memo(PageLayoutComponent);\nPageLayout.displayName = 'PageLayout';\nexport default PageLayout;\n\nexport interface PageLayoutProps {\n  className?: string;\n  title: string;\n  children: ReactNode;\n}\n","import { makeStyles, Theme } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  CodeViewer: {\n    '& pre': {\n      margin: '0 !important',\n      borderRadius: 6,\n    },\n\n    '&~$CodeViewer': {\n      marginTop: theme.spacing(2),\n    },\n  },\n}));\n\nexport default useStyles;\n","import React, { FC, memo } from 'react';\nimport clsx from 'clsx';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { okaidia } from 'react-syntax-highlighter/dist/esm/styles/prism';\nimport useStyles from './styles';\n\nexport const CodeViewerComponent: FC<CodeViewerProps> = ({\n  className,\n  children,\n  style = okaidia,\n  language,\n}) => {\n  const classes = useStyles();\n\n  return (\n    <div className={clsx(classes.CodeViewer, className)}>\n      <SyntaxHighlighter language={language} style={style}>\n        {children}\n      </SyntaxHighlighter>\n    </div>\n  );\n};\n\nconst CodeViewer = memo(CodeViewerComponent);\nCodeViewer.displayName = 'CodeViewer';\nexport default CodeViewer;\n\nexport interface CodeViewerProps {\n  className?: string;\n  style?: object;\n  children: string;\n  language: CodeViewerLanguage;\n}\n\nexport type CodeViewerLanguage =\n  | 'abap'\n  | 'actionscript'\n  | 'ada'\n  | 'apacheconf'\n  | 'apl'\n  | 'applescript'\n  | 'arduino'\n  | 'arff'\n  | 'asciidoc'\n  | 'asm6502'\n  | 'aspnet'\n  | 'autohotkey'\n  | 'autoit'\n  | 'bash'\n  | 'basic'\n  | 'batch'\n  | 'bison'\n  | 'brainfuck'\n  | 'bro'\n  | 'c'\n  | 'clike'\n  | 'clojure'\n  | 'coffeescript'\n  | 'cpp'\n  | 'crystal'\n  | 'csharp'\n  | 'csp'\n  | 'cssExtras'\n  | 'css-extras'\n  | 'css'\n  | 'd'\n  | 'dart'\n  | 'diff'\n  | 'django'\n  | 'docker'\n  | 'eiffel'\n  | 'elixir'\n  | 'elm'\n  | 'erb'\n  | 'erlang'\n  | 'flow'\n  | 'fortran'\n  | 'fsharp'\n  | 'gedcom'\n  | 'gherkin'\n  | 'git'\n  | 'glsl'\n  | 'go'\n  | 'graphql'\n  | 'groovy'\n  | 'haml'\n  | 'handlebars'\n  | 'haskell'\n  | 'haxe'\n  | 'hpkp'\n  | 'hsts'\n  | 'http'\n  | 'ichigojam'\n  | 'icon'\n  | 'inform7'\n  | 'ini'\n  | 'io'\n  | 'j'\n  | 'java'\n  | 'javascript'\n  | 'jolie'\n  | 'json'\n  | 'jsx'\n  | 'julia'\n  | 'keyman'\n  | 'kotlin'\n  | 'latex'\n  | 'less'\n  | 'liquid'\n  | 'lisp'\n  | 'livescript'\n  | 'lolcode'\n  | 'lua'\n  | 'makefile'\n  | 'markdown'\n  | 'markupTemplating'\n  | 'markup-templating'\n  | 'markup'\n  | 'matlab'\n  | 'mel'\n  | 'mizar'\n  | 'monkey'\n  | 'n4js'\n  | 'nasm'\n  | 'nginx'\n  | 'nim'\n  | 'nix'\n  | 'nsis'\n  | 'objectivec'\n  | 'ocaml'\n  | 'opencl'\n  | 'oz'\n  | 'parigp'\n  | 'parser'\n  | 'pascal'\n  | 'perl'\n  | 'phpExtras'\n  | 'php-extras'\n  | 'php'\n  | 'plsql'\n  | 'powershell'\n  | 'processing'\n  | 'prolog'\n  | 'properties'\n  | 'protobuf'\n  | 'pug'\n  | 'puppet'\n  | 'pure'\n  | 'python'\n  | 'q'\n  | 'qore'\n  | 'r'\n  | 'reason'\n  | 'renpy'\n  | 'rest'\n  | 'rip'\n  | 'roboconf'\n  | 'ruby'\n  | 'rust'\n  | 'sas'\n  | 'sass'\n  | 'scala'\n  | 'scheme'\n  | 'scss'\n  | 'smalltalk'\n  | 'smarty'\n  | 'soy'\n  | 'sql'\n  | 'stylus'\n  | 'swift'\n  | 'tap'\n  | 'tcl'\n  | 'textile'\n  | 'tsx'\n  | 'tt2'\n  | 'twig'\n  | 'typescript'\n  | 'vbnet'\n  | 'velocity'\n  | 'verilog'\n  | 'vhdl'\n  | 'vim'\n  | 'visualBasic'\n  | 'visual-basic'\n  | 'wasm'\n  | 'wiki'\n  | 'xeora'\n  | 'xojo'\n  | 'xquery'\n  | 'yaml';\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"StyleEditor\":\"styles_StyleEditor__1p4m3\",\"ShapeContainer\":\"styles_ShapeContainer__e_w8c\",\"Title\":\"styles_Title__33LO7\",\"rectangle\":\"styles_rectangle__2YNKa\",\"rotateY\":\"styles_rotateY__FSs1E\",\"square\":\"styles_square__310dA\",\"rotateZ\":\"styles_rotateZ__1st_J\",\"oval\":\"styles_oval__1MqEw\",\"circle\":\"styles_circle__RoNuX\",\"triangleUp\":\"styles_triangleUp__1VQFf\",\"triangleDown\":\"styles_triangleDown__1aRnO\",\"triangleLeft\":\"styles_triangleLeft__2oFjR\",\"triangleRight\":\"styles_triangleRight__2VW-N\",\"triangleTopLeft\":\"styles_triangleTopLeft__384__\",\"triangleTopRight\":\"styles_triangleTopRight__m9t1J\",\"triangleBottomLeft\":\"styles_triangleBottomLeft__36vtP\",\"triangleBottomRight\":\"styles_triangleBottomRight__3zBoL\",\"curvedTailArrow\":\"styles_curvedTailArrow__1Ljek\",\"trapezoid\":\"styles_trapezoid__3NeRE\",\"parallelogram\":\"styles_parallelogram__1fAts\",\"sixPointsStar\":\"styles_sixPointsStar__1SuSt\",\"fivePointsStar\":\"styles_fivePointsStar__1hFtc\",\"pentagon\":\"styles_pentagon__1xkzZ\",\"hexagon\":\"styles_hexagon__Eyn7g\",\"octagon\":\"styles_octagon__du3Oi\",\"heart\":\"styles_heart__EHEIn\",\"infinity\":\"styles_infinity__2kolN\",\"diamondSquare\":\"styles_diamondSquare__3YvKU\",\"diamondShield\":\"styles_diamondShield__HqsoV\",\"diamondNarrow\":\"styles_diamondNarrow__3IRaf\",\"cutDiamond\":\"styles_cutDiamond__2VgMt\",\"egg\":\"styles_egg__1PRs_\",\"pacman\":\"styles_pacman__OOTzN\",\"talkBubble\":\"styles_talkBubble__18seY\",\"twelvePointsBurst\":\"styles_twelvePointsBurst__2kkO9\",\"eightPointsBurst\":\"styles_eightPointsBurst__3ETPr\",\"yinYang\":\"styles_yinYang__1nojN\",\"badgeRibbon\":\"styles_badgeRibbon__3_VbR\",\"spaceInvader\":\"styles_spaceInvader__o1zq0\",\"tvScreen\":\"styles_tvScreen__2orzp\",\"chevron\":\"styles_chevron__2pavH\",\"magnifyingGlass\":\"styles_magnifyingGlass__34GzB\",\"moon\":\"styles_moon__YllS3\",\"flag\":\"styles_flag__omu2G\",\"cone\":\"styles_cone__1d14Q\",\"cross\":\"styles_cross__S8_OL\",\"base\":\"styles_base__1K2YC\",\"pointer\":\"styles_pointer__2A-ju\",\"lock\":\"styles_lock__2m1NB\",\"rotateX\":\"styles_rotateX__3PF-_\"};","import React, { FC, memo } from 'react';\nimport classes from './styles.module.scss';\n\nexport const ShapeComponent: FC<ShapeProps> = ({ type }) => (\n  <div className={classes[type]} />\n);\n\nconst Shape = memo(ShapeComponent);\nShape.displayName = 'Shape';\nexport default Shape;\n\nexport interface ShapeProps {\n  type: ShapeType;\n}\n\nexport type ShapeType =\n  | 'rectangle'\n  | 'square'\n  | 'oval'\n  | 'circle'\n  | 'triangleUp'\n  | 'triangleDown'\n  | 'triangleLeft'\n  | 'triangleRight'\n  | 'triangleTopLeft'\n  | 'triangleTopRight'\n  | 'triangleBottomLeft'\n  | 'triangleBottomRight'\n  | 'curvedTailArrow'\n  | 'trapezoid'\n  | 'parallelogram'\n  | 'sixPointsStar'\n  | 'fivePointsStar'\n  | 'pentagon'\n  | 'hexagon'\n  | 'octagon'\n  | 'heart'\n  | 'infinity'\n  | 'diamondSquare'\n  | 'diamondShield'\n  | 'diamondNarrow'\n  | 'cutDiamond'\n  | 'egg'\n  | 'pacman'\n  | 'talkBubble'\n  | 'twelvePointsBurst'\n  | 'eightPointsBurst'\n  | 'yinYang'\n  | 'badgeRibbon'\n  | 'spaceInvader'\n  | 'tvScreen'\n  | 'chevron'\n  | 'magnifyingGlass'\n  | 'moon'\n  | 'flag'\n  | 'cone'\n  | 'cross'\n  | 'base'\n  | 'pointer'\n  | 'lock';\n","import React, { FC, memo } from 'react';\nimport Shape, { ShapeType } from './Shape';\nimport classes from './styles.module.scss';\n\nexport const ShapeContainerComponent: FC<ShapeContainerProps> = ({\n  name,\n  type,\n}) => (\n  <div className={classes.ShapeContainer}>\n    <h4 className={classes.Title}>{name}</h4>\n    <Shape type={type} />\n  </div>\n);\n\nconst ShapeContainer = memo(ShapeContainerComponent);\nShapeContainer.displayName = 'ShapeContainer';\nexport default ShapeContainer;\n\nexport interface ShapeContainerProps {\n  name: string;\n  type: ShapeType;\n}\n","import { QuestionInfo } from 'types/app-common';\nimport React from 'react';\nimport CodeViewer from 'components/CodeViewer';\n\nconst questions: QuestionInfo[] = [\n  {\n    question: (\n      <p>\n        How to create shapes using only one <code>div</code>?\n      </p>\n    ),\n    answer: (\n      <CodeViewer language=\"scss\">\n        {`@mixin shape($color) {\n  display: inline-block;\n  background-color: $color;\n}\n\n@mixin emptyShape {\n  display: inline-block;\n  width: 0;\n  height: 0;\n  background-color: transparent;\n}\n\n@mixin rectangle($width, $height, $color) {\n  @include shape($color);\n  width: $width;\n  height: $height;\n}\n\n@mixin square($sideDimension, $color) {\n  @include rectangle($sideDimension, $sideDimension, $color);\n}\n\n@mixin oval($width, $height, $color) {\n  @include rectangle($width, $height, $color);\n  border-radius: 100%;\n}\n\n@mixin circle($diameter, $color) {\n  @include oval($diameter, $diameter, $color);\n}\n\n@mixin isoscelesTriangle($height, $width, $apex, $color) {\n  $adjacentSides: (\n    top: left right,\n    bottom: left right,\n    left: top bottom,\n    right: top bottom,\n  );\n  @include emptyShape();\n  border-#{$apex}: $height solid $color;\n  @each $side in map-get($map: $adjacentSides, $key: $apex) {\n    border-#{$side}: $width/2 solid transparent;\n  }\n}\n\n@mixin equilateralTriangle($height, $apex, $color) {\n  $width: $height / $cos30deg;\n  $radius: $height / (2 * $cos30deg * $cos30deg);\n  @include isoscelesTriangle($height, $width, $apex, $color);\n  @if $apex == top {\n    transform-origin: $width / 2 $height - $radius;\n  } @else if $apex == bottom {\n    transform-origin: $width / 2 $radius;\n  } @else if $apex == right {\n    transform-origin: $radius $width / 2;\n  } @else if $apex == left {\n    transform-origin: $height - $radius $width / 2;\n  }\n}\n\n@mixin rightAngledTriangle($height, $shownSide, $hiddenSide, $color) {\n  @include emptyShape();\n  border-#{$shownSide}: $height solid $color;\n  border-#{$hiddenSide}: $height solid transparent;\n}\n\n@mixin curvedTailArrow($length, $color) {\n  $dimension: $length / 2;\n  @include emptyShape();\n  margin-left: $dimension;\n  border-right: $dimension solid $color;\n  border-top: $dimension solid transparent;\n  transform: rotate(12deg);\n\n  &::after {\n    content: '';\n    position: absolute;\n    width: $dimension;\n    height: $dimension;\n    left: -$dimension * 0.7;\n    top: -$dimension * 1.2;\n    background: transparent;\n    border: 0 solid transparent;\n    border-top: $dimension * 0.4 solid $color;\n    border-radius: 100% 0 0 0;\n    transform: rotate(45deg);\n  }\n}\n\n@mixin trapezoid($upperWidth, $lowerWidth, $height, $color) {\n  $borderWidth: abs(\n      $number: $upperWidth - $lowerWidth,\n    ) / 2;\n  @include shape($color);\n  @if $upperWidth < $lowerWidth {\n    width: $upperWidth;\n    border-bottom: $height solid $color;\n  } @else {\n    width: $lowerWidth;\n    border-top: $height solid $color;\n  }\n  background-color: transparent;\n  border-left: $borderWidth solid transparent;\n  border-right: $borderWidth solid transparent;\n}\n\n@mixin parallelogram($width, $height, $color) {\n  $skewWidth: ($height * $tan20deg) / 2;\n  @include emptyShape();\n  position: relative;\n  margin: 0 $width + $skewWidth $height $skewWidth;\n  transform-origin: $width / 2 $height / 2;\n\n  &::after {\n    content: '';\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: $width;\n    height: $height;\n    background-color: $color;\n    transform: skew(-20deg);\n  }\n}\n\n@mixin sixPointsStar($sideDimension, $color) {\n  $height: $sideDimension * $cos30deg;\n  $radius: $sideDimension / $cos30deg / 2;\n  @include equilateralTriangle($height, bottom, $color);\n  position: relative;\n  margin-bottom: $height / 3;\n  transform-origin: 50% $radius;\n\n  &::after {\n    content: '';\n    position: absolute;\n    top: $height / 3;\n    left: -$sideDimension / 2;\n    @include equilateralTriangle($height, top, $color);\n  }\n}\n\n@mixin fivePointsStar($sideDimension, $color) {\n  $upperThird: $sideDimension * $tan36deg / 2;\n  $middleThird: $upperThird;\n  $lowerThird: $sideDimension * $cos18deg - $middleThird - $upperThird;\n  $radius: $sideDimension / $sin36deg / 2;\n  @include isoscelesTriangle($middleThird, $sideDimension, top, $color);\n  position: relative;\n  margin: $upperThird 0 $lowerThird;\n  transform-origin: 50% $radius - ($upperThird + $middleThird);\n\n  &::before,\n  &::after {\n    top: -$middleThird - $upperThird;\n    content: '';\n    position: absolute;\n  }\n\n  &::before {\n    left: 0;\n    @include isoscelesTriangle($middleThird, $sideDimension, left, $color);\n    transform: rotate(18deg);\n    transform-origin: 0 0;\n  }\n\n  &::after {\n    left: -$middleThird;\n    @include isoscelesTriangle($middleThird, $sideDimension, right, $color);\n    transform: rotate(-18deg);\n    transform-origin: 100% 0;\n  }\n}\n\n@mixin pentagon($sideDimension, $color) {\n  $width: $sideDimension + 2 * $sideDimension * $sin18deg;\n  $height: $sideDimension * $cos18deg;\n  $top: $sideDimension * $sin36deg;\n  $radius: $sideDimension / 2 / $sin36deg;\n  @include isoscelesTriangle($top, $width, bottom, $color);\n  position: relative;\n  margin-bottom: $height;\n  transform-origin: 50% $radius;\n\n  &::after {\n    content: '';\n    position: absolute;\n    top: $top;\n    left: -$width / 2;\n    @include trapezoid($width, $sideDimension, $height, $color);\n  }\n}\n\n@mixin hexagon($sideDimension, $color) {\n  $width: $sideDimension * $cos30deg * 2;\n  @include rectangle($width, $sideDimension, $color);\n  position: relative;\n  margin: $sideDimension / 2 0;\n\n  &::before,\n  &::after {\n    content: '';\n    position: absolute;\n  }\n\n  &::before {\n    top: -$sideDimension/2;\n    @include isoscelesTriangle($sideDimension / 2, $width, bottom, $color);\n  }\n\n  &::after {\n    top: $sideDimension;\n    @include isoscelesTriangle($sideDimension / 2, $width, top, $color);\n  }\n}\n\n@mixin octagon($sideDimension, $color) {\n  $sideBorder: $sideDimension * $cos45deg;\n  $width: $sideDimension + 2 * $sideBorder;\n  @include rectangle($width, $sideDimension, $color);\n  position: relative;\n  margin: $sideBorder 0;\n\n  &::before,\n  &::after {\n    content: '';\n    position: absolute;\n  }\n\n  &::before {\n    top: -$sideBorder;\n    @include trapezoid($sideDimension, $width, $sideBorder, $color);\n  }\n\n  &::after {\n    top: $sideDimension;\n    @include trapezoid($width, $sideDimension, $sideBorder, $color);\n  }\n}\n\n@mixin heart($height, $color) {\n  $halfWidth: $height * 5/8;\n  @include emptyShape();\n  position: relative;\n  display: inline-block;\n  margin: $height * 0.0375 $height * 1.25 $height * 1.0375 0;\n  transform-origin: $halfWidth;\n\n  &::before,\n  &::after {\n    content: '';\n    position: absolute;\n    width: $halfWidth;\n    height: $height;\n    top: 0;\n    background-color: $color;\n    border-radius: $halfWidth $halfWidth 0 0;\n  }\n\n  &::before {\n    left: $halfWidth;\n    transform-origin: 0 100%;\n    transform: rotate(-45deg);\n  }\n\n  &::after {\n    left: 0;\n    transform-origin: 100% 100%;\n    transform: rotate(45deg);\n  }\n}\n\n@mixin infinity($diameter, $color) {\n  @include emptyShape();\n  position: relative;\n  margin: 0 $diameter * 3.6 $diameter * 5/3 0;\n\n  &::before,\n  &::after {\n    content: '';\n    position: absolute;\n    width: $diameter;\n    height: $diameter;\n    border: $diameter/3 solid $colorPrimary;\n    transform: rotate(-45deg);\n  }\n\n  &::before {\n    left: 0;\n    border-radius: 100% 100% 0;\n  }\n\n  &::after {\n    left: $diameter * 1.9;\n    border-radius: 0 100% 100%;\n  }\n}\n\n@mixin diamondSquare($sideDimension, $color) {\n  $width: $sideDimension / $cos45deg;\n  @include emptyShape();\n  position: relative;\n  margin: ($width - $sideDimension) / 2 ($width + $sideDimension) / 2\n    ($width + $sideDimension) / 2 ($width - $sideDimension) / 2;\n  transform-origin: $sideDimension / 2 $sideDimension / 2;\n\n  &::after {\n    content: '';\n    position: absolute;\n    @include square($sideDimension, $color);\n    transform: rotate(45deg);\n  }\n}\n\n@mixin diamondShield($height, $color) {\n  $width: $height * 4/5 / $cos30deg;\n  @include isoscelesTriangle($height/5, $width, bottom, $color);\n  position: relative;\n  margin-bottom: $height * 4/5;\n  transform-origin: 50% $height / 2;\n\n  &::after {\n    content: '';\n    position: absolute;\n    left: -$width / 2;\n    top: $height/5;\n    @include isoscelesTriangle($height * 4/5, $width, top, $color);\n  }\n}\n\n@mixin diamondNarrow($sideDimension, $color) {\n  $height: $sideDimension * $cos30deg;\n  @include equilateralTriangle($height, bottom, $color);\n  position: relative;\n  margin-bottom: $height;\n  transform-origin: 50% $height;\n\n  &::after {\n    content: '';\n    position: absolute;\n    top: $height;\n    left: -$sideDimension / 2;\n    @include equilateralTriangle($height, top, $color);\n  }\n}\n\n@mixin cutDiamond($sideDimension, $color) {\n  $lowerHeight: $sideDimension * $cos30deg;\n  $upperHeight: $lowerHeight / 3.2;\n  $upperWidth: $sideDimension * 2 / 3;\n  @include trapezoid($upperWidth, $sideDimension, $upperHeight, $color);\n  position: relative;\n  margin-bottom: $lowerHeight;\n  transform-origin: 50% ($upperHeight + $lowerHeight) / 2;\n\n  &::after {\n    content: '';\n    position: absolute;\n    top: $upperHeight;\n    left: ($upperWidth - $sideDimension) / 2;\n    @include equilateralTriangle($lowerHeight, top, $color);\n  }\n}\n\n@mixin egg($height, $isUpward, $color) {\n  $width: $height * 0.8;\n  @include shape($color);\n  width: $width;\n  height: $height;\n  @if $isUpward {\n    border-radius: 50% 50% 50% 50% / 60% 60% 40% 40%;\n  } @else {\n    border-radius: 50% 50% 50% 50% / 40% 40% 60% 60%;\n  }\n}\n\n@mixin pacman($diameter, $direction, $color) {\n  @include emptyShape();\n  border: $diameter / 2 solid $color;\n  border-#{$direction}-color: transparent;\n  border-radius: 50%;\n}\n\n@mixin talkBubble($width, $height, $color) {\n  $arrowHeight: 20px;\n  $borderRadius: 12px;\n  @include shape($color);\n  position: relative;\n  width: $width;\n  height: $height;\n  border-radius: $borderRadius;\n\n  &::after {\n    content: '';\n    position: absolute;\n    top: $height;\n    right: $width / 4;\n    @include equilateralTriangle($arrowHeight, top, $color);\n  }\n}\n\n@mixin twelvePointsBurst($sideDimension, $color) {\n  $margin: $sideDimension * $sqrt5 / (3 + $sqrt5) / 2;\n  @include square($sideDimension, $color);\n  position: relative;\n  margin: $margin;\n\n  &::before,\n  &::after {\n    content: '';\n    position: absolute;\n    @include square($sideDimension, $color);\n  }\n\n  &::before {\n    transform: rotate(-30deg);\n  }\n\n  &::after {\n    transform: rotate(30deg);\n  }\n}\n\n@mixin eightPointsBurst($sideDimension, $color) {\n  $margin: $sideDimension / (2 + 2 / $cos45deg);\n  @include square($sideDimension, $color);\n  position: relative;\n  margin: $margin;\n\n  &::after {\n    content: '';\n    position: absolute;\n    @include square($sideDimension, $color);\n    transform: rotate(45deg);\n  }\n}\n\n@mixin yinYang($diameter, $color1, $color2) {\n  $borderWidth: 2px;\n  $innerDiameter: $diameter / 8;\n  $innerBorderWidth: ($diameter / 2 - $innerDiameter) / 2;\n  $top: ($diameter - ($innerDiameter + 2 * $innerBorderWidth)) / 2;\n  @include shape($color1);\n  position: relative;\n  width: $diameter;\n  height: $diameter / 2;\n  background-color: $color2;\n  border: $borderWidth solid $color1;\n  border-bottom-width: $diameter / 2 + $borderWidth;\n  border-radius: 50%;\n  box-sizing: content-box;\n\n  &::before,\n  &::after {\n    content: '';\n    position: absolute;\n  }\n\n  &::before {\n    @include circle($innerDiameter, $color2);\n    top: $top;\n    left: 0;\n    border: $innerBorderWidth solid $color1;\n  }\n\n  &::after {\n    @include circle($innerDiameter, $color1);\n    top: $top;\n    right: 0;\n    border: $innerBorderWidth solid $color2;\n  }\n}\n\n@mixin badgeRibbon($diameter, $color) {\n  $triangleHeight: $diameter * 0.7;\n  $triangleWidth: $diameter * 0.8;\n  $bottom: $diameter * 0.28;\n  @include circle($diameter, $color);\n  position: relative;\n  margin-bottom: $bottom;\n\n  &::before,\n  &::after {\n    content: '';\n    position: absolute;\n    top: $diameter / 2;\n  }\n\n  &::before {\n    @include isoscelesTriangle($triangleHeight, $triangleWidth, left, $color);\n    left: $diameter / 4;\n    transform: rotate(12deg);\n    transform-origin: 0 0;\n  }\n\n  &::after {\n    @include isoscelesTriangle($triangleHeight, $triangleWidth, right, $color);\n    right: $diameter / 4;\n    transform: rotate(-12deg);\n    transform-origin: 100% 0;\n  }\n}\n\n@mixin spaceInvader($pixel, $color) {\n  @include shape($color);\n  margin: $pixel * 3 $pixel * 5 $pixel * 4;\n  box-shadow: 0 0 0 1 * $pixel $color, 0 1 * $pixel 0 1 * $pixel $color,\n    -2.5 * $pixel 1.5 * $pixel 0 0.5 * $pixel $color,\n    2.5 * $pixel 1.5 * $pixel 0 0.5 * $pixel $color,\n    -3 * $pixel -3 * $pixel 0 0 $color, 3 * $pixel -3 * $pixel 0 0 $color,\n    -2 * $pixel -2 * $pixel 0 0 $color, 2 * $pixel -2 * $pixel 0 0 $color,\n    -3 * $pixel -1 * $pixel 0 0 $color, -2 * $pixel -1 * $pixel 0 0 $color,\n    2 * $pixel -1 * $pixel 0 0 $color, 3 * $pixel -1 * $pixel 0 0 $color,\n    -4 * $pixel 0 0 0 $color, -3 * $pixel 0 0 0 $color, 3 * $pixel 0 0 0 $color,\n    4 * $pixel 0 0 0 $color, -5 * $pixel 1 * $pixel 0 0 $color,\n    -4 * $pixel 1 * $pixel 0 0 $color, 4 * $pixel 1 * $pixel 0 0 $color,\n    5 * $pixel 1 * $pixel 0 0 $color, -5 * $pixel 2 * $pixel 0 0 $color,\n    5 * $pixel 2 * $pixel 0 0 $color, -5 * $pixel 3 * $pixel 0 0 $color,\n    -3 * $pixel 3 * $pixel 0 0 $color, 3 * $pixel 3 * $pixel 0 0 $color,\n    5 * $pixel 3 * $pixel 0 0 $color, -2 * $pixel 4 * $pixel 0 0 $color,\n    -1 * $pixel 4 * $pixel 0 0 $color, 1 * $pixel 4 * $pixel 0 0 $color,\n    2 * $pixel 4 * $pixel 0 0 $color;\n  width: 1 * $pixel;\n  height: 1 * $pixel;\n}\n\n@mixin tvScreen($height, $color) {\n  $width: $height * 4/3;\n  @include shape($color);\n  position: relative;\n  margin: 0 $height / 15;\n  width: $width;\n  height: $height;\n  border-radius: 50% / 10%;\n\n  &::after {\n    @include shape($color);\n    content: '';\n    position: absolute;\n    top: 10%;\n    bottom: 10%;\n    left: -5%;\n    right: -5%;\n    border-radius: 5% / 50%;\n  }\n}\n\n@mixin chevron($height, $color) {\n  $width: $height * 1.3;\n  $skewAngle: 10deg;\n  $skewHeight: $width * $tan10deg / 2;\n  @include emptyShape();\n  position: relative;\n  margin: $skewHeight $width * 2 $height + $skewHeight 0;\n  transform-origin: $width 0;\n\n  &::before,\n  &::after {\n    content: '';\n    position: absolute;\n    width: $width;\n    height: $height;\n    top: $skewHeight;\n    background-color: $color;\n  }\n\n  &::before {\n    left: 0;\n    transform-origin: 100% 0;\n    transform: skewY($skewAngle);\n  }\n\n  &::after {\n    left: $width;\n    transform-origin: 0 0;\n    transform: skewY(-$skewAngle);\n  }\n}\n\n@mixin magnifyingGlass($diameter, $color) {\n  $thickness: $diameter / 5;\n  $innerDiameter: $diameter - 2 * $thickness;\n  $handleLength: $diameter / 2 + $thickness;\n  $margin: $diameter * 0.275;\n  @include emptyShape();\n  position: relative;\n  width: $innerDiameter;\n  height: $innerDiameter;\n  margin: 0 $margin $margin 0;\n  border: $thickness solid $color;\n  border-radius: 50%;\n\n  &::after {\n    @include rectangle($handleLength, $thickness, $color);\n    content: '';\n    position: absolute;\n    left: $diameter - 2 * $thickness;\n    top: ($diameter - 3 * $thickness) / 2;\n    transform-origin: -($diameter / 2 - $thickness) $thickness / 2;\n    transform: rotateZ(45deg);\n  }\n}\n\n@mixin moon($diameter, $color) {\n  $thickness: $diameter * 0.1875;\n  $innerDiameter: $diameter - $thickness;\n  @include emptyShape();\n  width: $innerDiameter;\n  height: $innerDiameter;\n  margin: $thickness * -1 $thickness $thickness $thickness * -1;\n  border-radius: 50%;\n  box-shadow: $thickness $thickness 0 0 $color;\n}\n\n@mixin flag($width, $color) {\n  $top: $width / 2;\n  $bottom: $width / 4;\n  @include emptyShape();\n  border-width: $top $width / 2 $bottom;\n  border-style: solid;\n  border-color: $color $color transparent;\n}\n\n@mixin cone($width, $height, $color) {\n  @include emptyShape();\n  border-width: $height $width / 2 0;\n  border-style: solid;\n  border-color: $color transparent transparent;\n  border-radius: 50%;\n}\n\n@mixin cross($length, $color) {\n  $thickness: $length / 5;\n  $side: ($length - $thickness) / 2;\n  @include rectangle($thickness, $length, $color);\n  position: relative;\n  margin: 0 $side;\n\n  &::after {\n    @include rectangle($length, $thickness, $color);\n    content: '';\n    position: absolute;\n    left: -$side;\n    top: $side;\n  }\n}\n\n@mixin base($width, $color) {\n  $height: $width * 0.5;\n  $top: $width * 0.3;\n  @include rectangle($width, $height, $color);\n  position: relative;\n  margin-top: $top;\n\n  &::before {\n    @include isoscelesTriangle($top, $width, bottom, $color);\n    content: '';\n    position: absolute;\n    top: -$top;\n    left: 0;\n  }\n}\n\n@mixin pointer($width, $height, $color) {\n  @include emptyShape();\n  position: relative;\n  width: $width;\n  border-top: $height solid $color;\n  border-bottom: $height solid $color;\n  border-left: $height solid transparent;\n\n  &::after {\n    @include isoscelesTriangle($height, $height * 2, left, $color);\n    content: '';\n    position: absolute;\n    top: -$height;\n    right: -$height;\n  }\n}\n\n@mixin lock($width, $color) {\n  $holeWidth: $width / 6;\n  $holeHeight: $width / 2.8;\n  $loopWidth: $width / 2.2;\n  $loopHeight: $width / 2.5;\n  $thickness: $width / 6;\n  @include emptyShape();\n  position: relative;\n  width: $holeWidth;\n  height: $holeHeight;\n  margin-top: $loopHeight + $thickness;\n  border-style: solid;\n  border-color: $color;\n  border-width: $thickness ($width - $holeWidth) / 2;\n  border-radius: 16%;\n\n  &::before,\n  &::after {\n    content: '';\n    position: absolute;\n  }\n\n  &::before {\n    @include emptyShape();\n    top: -($loopHeight + 2 * $thickness);\n    left: -(($loopWidth - $holeWidth) / 2 + $thickness);\n    width: $loopWidth;\n    height: $loopHeight;\n    border: $thickness solid $color;\n    border-radius: 50% 50% 0 0;\n  }\n\n  &::after {\n    top: -$thickness;\n    left: -$thickness;\n    width: $holeWidth;\n    height: $holeHeight;\n    border: $thickness solid $color;\n    border-radius: 50%/36%;\n  }\n}`}\n      </CodeViewer>\n    ),\n    references: [\n      {\n        name: `[CSS-TRICKS] The Shapes of CSS`,\n        url: `https://css-tricks.com/the-shapes-of-css/`,\n      },\n    ],\n  },\n];\n\nexport default questions;\n","import React, { FC, memo } from 'react';\nimport QuestionPage from 'components/QuestionPage';\nimport ShapeContainer from './ShapeContainer';\nimport questions from './questions';\n\nexport const Shapes1Component: FC = () => (\n  <QuestionPage title=\"Shapes 1\" questions={questions}>\n    <ShapeContainer name=\"Rectangle\" type=\"rectangle\" />\n    <ShapeContainer name=\"Square\" type=\"square\" />\n    <ShapeContainer name=\"Oval\" type=\"oval\" />\n    <ShapeContainer name=\"Circle\" type=\"circle\" />\n    <ShapeContainer name=\"Triangle Up\" type=\"triangleUp\" />\n    <ShapeContainer name=\"Triangle Down\" type=\"triangleDown\" />\n    <ShapeContainer name=\"Triangle Left\" type=\"triangleLeft\" />\n    <ShapeContainer name=\"Triangle Right\" type=\"triangleRight\" />\n    <ShapeContainer name=\"Triangle Top Left\" type=\"triangleTopLeft\" />\n    <ShapeContainer name=\"Triangle Top Right\" type=\"triangleTopRight\" />\n    <ShapeContainer name=\"Triangle Bottom Left\" type=\"triangleBottomLeft\" />\n    <ShapeContainer name=\"Triangle Bottom Right\" type=\"triangleBottomRight\" />\n    <ShapeContainer name=\"Curved Tail Arrow\" type=\"curvedTailArrow\" />\n    <ShapeContainer name=\"Trapezoid\" type=\"trapezoid\" />\n    <ShapeContainer name=\"Parallelogram\" type=\"parallelogram\" />\n    <ShapeContainer name=\"6-Points Star\" type=\"sixPointsStar\" />\n    <ShapeContainer name=\"5-Points Star\" type=\"fivePointsStar\" />\n    <ShapeContainer name=\"Pentagon\" type=\"pentagon\" />\n    <ShapeContainer name=\"Hexagon\" type=\"hexagon\" />\n    <ShapeContainer name=\"Octagon\" type=\"octagon\" />\n    <ShapeContainer name=\"Heart\" type=\"heart\" />\n    <ShapeContainer name=\"Infinity\" type=\"infinity\" />\n    <ShapeContainer name=\"Diamond Square\" type=\"diamondSquare\" />\n    <ShapeContainer name=\"Diamond Shield\" type=\"diamondShield\" />\n    <ShapeContainer name=\"Diamond Narrow\" type=\"diamondNarrow\" />\n    <ShapeContainer name=\"Cut Diamond\" type=\"cutDiamond\" />\n    <ShapeContainer name=\"Egg\" type=\"egg\" />\n    <ShapeContainer name=\"Pac-Man\" type=\"pacman\" />\n    <ShapeContainer name=\"Talk Bubble\" type=\"talkBubble\" />\n    <ShapeContainer name=\"12-Points Burst\" type=\"twelvePointsBurst\" />\n    <ShapeContainer name=\"8-Points Burst\" type=\"eightPointsBurst\" />\n    <ShapeContainer name=\"Yin Yang\" type=\"yinYang\" />\n    <ShapeContainer name=\"Badge Ribbon\" type=\"badgeRibbon\" />\n    <ShapeContainer name=\"Space Invader\" type=\"spaceInvader\" />\n    <ShapeContainer name=\"TV Screen\" type=\"tvScreen\" />\n    <ShapeContainer name=\"Chevron\" type=\"chevron\" />\n    <ShapeContainer name=\"Magnifying Glass\" type=\"magnifyingGlass\" />\n    <ShapeContainer name=\"Moon\" type=\"moon\" />\n    <ShapeContainer name=\"Flag\" type=\"flag\" />\n    <ShapeContainer name=\"Cone\" type=\"cone\" />\n    <ShapeContainer name=\"Cross\" type=\"cross\" />\n    <ShapeContainer name=\"Base\" type=\"base\" />\n    <ShapeContainer name=\"Pointer\" type=\"pointer\" />\n    <ShapeContainer name=\"Lock\" type=\"lock\" />\n  </QuestionPage>\n);\n\nconst Shapes1 = memo(Shapes1Component);\nShapes1.displayName = 'Shapes1';\nexport default Shapes1;\n\n/**\n * TODO:\n * 1. hourglass\n * 1. use clip-path to create more shape\n */\n"],"sourceRoot":""}