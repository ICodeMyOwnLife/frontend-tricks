{"version":3,"sources":["questions/css/Shapes1/styles.module.scss","questions/css/Shapes1/Shape.tsx","questions/css/Shapes1/ShapeContainer.tsx","questions/css/Shapes1/questions.tsx","questions/css/Shapes1/index.tsx","components/Question/index.tsx","components/Question/styles.module.scss","components/Code/index.tsx","components/Code/styles.module.scss"],"names":["module","exports","Shape","memo","type","className","classes","displayName","ShapeContainer","name","Title","questions","question","answer","Code","language","references","url","Shapes1Impl","Question","title","Shapes1","children","Container","Content","Questions","map","index","key","Index","Answer","length","References","href","target","rel","style","okaidia","classnames"],"mappings":"8FACAA,EAAOC,QAAU,CAAC,YAAc,4BAA4B,eAAiB,+BAA+B,MAAQ,sBAAsB,UAAY,0BAA0B,QAAU,wBAAwB,OAAS,uBAAuB,QAAU,wBAAwB,KAAO,qBAAqB,OAAS,uBAAuB,WAAa,2BAA2B,aAAe,6BAA6B,aAAe,6BAA6B,cAAgB,8BAA8B,gBAAkB,gCAAgC,iBAAmB,iCAAiC,mBAAqB,mCAAmC,oBAAsB,oCAAoC,gBAAkB,gCAAgC,UAAY,0BAA0B,cAAgB,8BAA8B,cAAgB,8BAA8B,eAAiB,+BAA+B,SAAW,yBAAyB,QAAU,wBAAwB,QAAU,wBAAwB,MAAQ,sBAAsB,SAAW,yBAAyB,cAAgB,8BAA8B,cAAgB,8BAA8B,cAAgB,8BAA8B,WAAa,2BAA2B,IAAM,oBAAoB,OAAS,uBAAuB,WAAa,2BAA2B,kBAAoB,kCAAkC,iBAAmB,iCAAiC,QAAU,wBAAwB,YAAc,4BAA4B,aAAe,6BAA6B,SAAW,yBAAyB,QAAU,wBAAwB,gBAAkB,gCAAgC,KAAO,qBAAqB,KAAO,qBAAqB,KAAO,qBAAqB,MAAQ,sBAAsB,KAAO,qBAAqB,QAAU,wBAAwB,KAAO,qBAAqB,QAAU,0B,sFCMl6DC,EAAQC,gBAJ2B,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OACvC,yBAAKC,UAAWC,IAAQF,QAI1BF,EAAMK,YAAc,QACLL,QCETM,EAAiBL,gBAPoC,SAAC,GAAD,IAAGM,EAAH,EAAGA,KAAML,EAAT,EAASA,KAAT,OACzD,yBAAKC,UAAWC,IAAQE,gBACtB,wBAAIH,UAAWC,IAAQI,OAAQD,GAC/B,kBAAC,EAAD,CAAOL,KAAMA,QAKjBI,EAAeD,YAAc,iBACdC,Q,QC4tBAG,EAruBmB,CAChC,CACEC,SACE,kEACsC,qCADtC,KAIFC,OACE,kBAACC,EAAA,EAAD,CAAMC,SAAS,QAAf,46jBAotBFC,WAAY,CACV,CACEP,KAAK,iCACLQ,IAAI,gDCnuBZ,4CAKO,IAAMC,EAAkB,kBAC7B,kBAACC,EAAA,EAAD,CAAUC,MAAM,WAAWT,UAAWA,GACpC,kBAAC,EAAD,CAAgBF,KAAK,YAAYL,KAAK,cACtC,kBAAC,EAAD,CAAgBK,KAAK,SAASL,KAAK,WACnC,kBAAC,EAAD,CAAgBK,KAAK,OAAOL,KAAK,SACjC,kBAAC,EAAD,CAAgBK,KAAK,SAASL,KAAK,WACnC,kBAAC,EAAD,CAAgBK,KAAK,cAAcL,KAAK,eACxC,kBAAC,EAAD,CAAgBK,KAAK,gBAAgBL,KAAK,iBAC1C,kBAAC,EAAD,CAAgBK,KAAK,gBAAgBL,KAAK,iBAC1C,kBAAC,EAAD,CAAgBK,KAAK,iBAAiBL,KAAK,kBAC3C,kBAAC,EAAD,CAAgBK,KAAK,oBAAoBL,KAAK,oBAC9C,kBAAC,EAAD,CAAgBK,KAAK,qBAAqBL,KAAK,qBAC/C,kBAAC,EAAD,CAAgBK,KAAK,uBAAuBL,KAAK,uBACjD,kBAAC,EAAD,CAAgBK,KAAK,wBAAwBL,KAAK,wBAClD,kBAAC,EAAD,CAAgBK,KAAK,oBAAoBL,KAAK,oBAC9C,kBAAC,EAAD,CAAgBK,KAAK,YAAYL,KAAK,cACtC,kBAAC,EAAD,CAAgBK,KAAK,gBAAgBL,KAAK,kBAC1C,kBAAC,EAAD,CAAgBK,KAAK,gBAAgBL,KAAK,kBAC1C,kBAAC,EAAD,CAAgBK,KAAK,gBAAgBL,KAAK,mBAC1C,kBAAC,EAAD,CAAgBK,KAAK,WAAWL,KAAK,aACrC,kBAAC,EAAD,CAAgBK,KAAK,UAAUL,KAAK,YACpC,kBAAC,EAAD,CAAgBK,KAAK,UAAUL,KAAK,YACpC,kBAAC,EAAD,CAAgBK,KAAK,QAAQL,KAAK,UAClC,kBAAC,EAAD,CAAgBK,KAAK,WAAWL,KAAK,aACrC,kBAAC,EAAD,CAAgBK,KAAK,iBAAiBL,KAAK,kBAC3C,kBAAC,EAAD,CAAgBK,KAAK,iBAAiBL,KAAK,kBAC3C,kBAAC,EAAD,CAAgBK,KAAK,iBAAiBL,KAAK,kBAC3C,kBAAC,EAAD,CAAgBK,KAAK,cAAcL,KAAK,eACxC,kBAAC,EAAD,CAAgBK,KAAK,MAAML,KAAK,QAChC,kBAAC,EAAD,CAAgBK,KAAK,UAAUL,KAAK,WACpC,kBAAC,EAAD,CAAgBK,KAAK,cAAcL,KAAK,eACxC,kBAAC,EAAD,CAAgBK,KAAK,kBAAkBL,KAAK,sBAC5C,kBAAC,EAAD,CAAgBK,KAAK,iBAAiBL,KAAK,qBAC3C,kBAAC,EAAD,CAAgBK,KAAK,WAAWL,KAAK,YACrC,kBAAC,EAAD,CAAgBK,KAAK,eAAeL,KAAK,gBACzC,kBAAC,EAAD,CAAgBK,KAAK,gBAAgBL,KAAK,iBAC1C,kBAAC,EAAD,CAAgBK,KAAK,YAAYL,KAAK,aACtC,kBAAC,EAAD,CAAgBK,KAAK,UAAUL,KAAK,YACpC,kBAAC,EAAD,CAAgBK,KAAK,mBAAmBL,KAAK,oBAC7C,kBAAC,EAAD,CAAgBK,KAAK,OAAOL,KAAK,SACjC,kBAAC,EAAD,CAAgBK,KAAK,OAAOL,KAAK,SACjC,kBAAC,EAAD,CAAgBK,KAAK,OAAOL,KAAK,SACjC,kBAAC,EAAD,CAAgBK,KAAK,QAAQL,KAAK,UAClC,kBAAC,EAAD,CAAgBK,KAAK,OAAOL,KAAK,SACjC,kBAAC,EAAD,CAAgBK,KAAK,UAAUL,KAAK,YACpC,kBAAC,EAAD,CAAgBK,KAAK,OAAOL,KAAK,WAI/BiB,EAAUlB,eAAKe,GACrBG,EAAQd,YAAc,UACPc,a,gCCxDf,qCA4CMF,EAAWhB,gBAzC8B,SAAC,GAAD,IAC7CiB,EAD6C,EAC7CA,MACAT,EAF6C,EAE7CA,UACAW,EAH6C,EAG7CA,SAH6C,OAK7C,yBAAKjB,UAAWC,IAAQiB,WACtB,wBAAIlB,UAAWC,IAAQI,OAAQU,GAC/B,yBAAKf,UAAWC,IAAQkB,SAAUF,GAClC,yBAAKjB,UAAWC,IAAQmB,WACtB,yCACA,6BACGd,EAAUe,KAAI,WAAmCC,GAAnC,IAAGf,EAAH,EAAGA,SAAUC,EAAb,EAAaA,OAAQG,EAArB,EAAqBA,WAArB,OAEb,6BAASY,IAAKD,GACZ,6BAAStB,UAAWC,IAAQa,UAC1B,0BAAMd,UAAWC,IAAQuB,OAAQF,EAAQ,EAAzC,KADF,IACuDf,GAGvD,yBAAKP,UAAWC,IAAQwB,QAASjB,GAEhCG,GAAcA,EAAWe,QACxB,yBAAK1B,UAAWC,IAAQ0B,YACtB,0CACA,4BACGhB,EAAWU,KAAI,gBAAGjB,EAAH,EAAGA,KAAMQ,EAAT,EAASA,IAAT,OACd,wBAAIW,IAAKX,GACP,uBAAGgB,KAAMhB,EAAKiB,OAAO,SAASC,IAAI,uBAC/B1B,mBAezBU,EAASZ,YAAc,WACRY,O,mBC7CfnB,EAAOC,QAAU,CAAC,UAAY,0BAA0B,MAAQ,sBAAsB,QAAU,wBAAwB,UAAY,0BAA0B,SAAW,yBAAyB,MAAQ,sBAAsB,OAAS,uBAAuB,WAAa,6B,gCCD7Q,wEAmBMa,EAAOX,gBAb0B,SAAC,GAAD,IACrCE,EADqC,EACrCA,UACAiB,EAFqC,EAErCA,SAFqC,IAGrCc,aAHqC,MAG7BC,IAH6B,EAIrCtB,EAJqC,EAIrCA,SAJqC,OAMrC,yBAAKV,UAAWiC,IAAWhC,IAAQQ,KAAMT,IACvC,kBAAC,IAAD,CAAmBU,SAAUA,EAAUqB,MAAOA,GAC3Cd,OAMPR,EAAKP,YAAc,OACJO,O,mBCpBfd,EAAOC,QAAU,CAAC,KAAO","file":"static/js/17.81f8c010.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"StyleEditor\":\"styles_StyleEditor__2cYxn\",\"ShapeContainer\":\"styles_ShapeContainer__1bYhE\",\"Title\":\"styles_Title__19YcD\",\"rectangle\":\"styles_rectangle__VgIyx\",\"rotateY\":\"styles_rotateY__3KDxE\",\"square\":\"styles_square__2wwS9\",\"rotateZ\":\"styles_rotateZ__3oIVN\",\"oval\":\"styles_oval__303r2\",\"circle\":\"styles_circle__2dCWq\",\"triangleUp\":\"styles_triangleUp__3lUkx\",\"triangleDown\":\"styles_triangleDown__1bIAR\",\"triangleLeft\":\"styles_triangleLeft__HhGZZ\",\"triangleRight\":\"styles_triangleRight__1giBy\",\"triangleTopLeft\":\"styles_triangleTopLeft__2C4YA\",\"triangleTopRight\":\"styles_triangleTopRight__tw7k2\",\"triangleBottomLeft\":\"styles_triangleBottomLeft__3GZVF\",\"triangleBottomRight\":\"styles_triangleBottomRight__10UHf\",\"curvedTailArrow\":\"styles_curvedTailArrow__17FXX\",\"trapezoid\":\"styles_trapezoid__19A7X\",\"parallelogram\":\"styles_parallelogram__1m7sL\",\"sixPointsStar\":\"styles_sixPointsStar__2bcSG\",\"fivePointsStar\":\"styles_fivePointsStar__1NO4C\",\"pentagon\":\"styles_pentagon__1u9VF\",\"hexagon\":\"styles_hexagon__yS3z_\",\"octagon\":\"styles_octagon__3tYaY\",\"heart\":\"styles_heart__2YSb1\",\"infinity\":\"styles_infinity__knX-m\",\"diamondSquare\":\"styles_diamondSquare__o5UGI\",\"diamondShield\":\"styles_diamondShield__128h_\",\"diamondNarrow\":\"styles_diamondNarrow__3VMr4\",\"cutDiamond\":\"styles_cutDiamond__2DEa_\",\"egg\":\"styles_egg__1zUMZ\",\"pacman\":\"styles_pacman__3yHlg\",\"talkBubble\":\"styles_talkBubble__1XrwH\",\"twelvePointsBurst\":\"styles_twelvePointsBurst__3KW1x\",\"eightPointsBurst\":\"styles_eightPointsBurst__u_wL4\",\"yinYang\":\"styles_yinYang__66clu\",\"badgeRibbon\":\"styles_badgeRibbon__1FSwL\",\"spaceInvader\":\"styles_spaceInvader__Bn3Ia\",\"tvScreen\":\"styles_tvScreen__3AsEA\",\"chevron\":\"styles_chevron__Ug7uB\",\"magnifyingGlass\":\"styles_magnifyingGlass__unViJ\",\"moon\":\"styles_moon__USWKB\",\"flag\":\"styles_flag__1uNO7\",\"cone\":\"styles_cone__GPrPJ\",\"cross\":\"styles_cross__1eZPq\",\"base\":\"styles_base__1L5sX\",\"pointer\":\"styles_pointer__Imbhm\",\"lock\":\"styles_lock__14WVX\",\"rotateX\":\"styles_rotateX__2nY54\"};","import React, { FC, memo } from 'react';\nimport classes from './styles.module.scss';\n\nexport const ShapeImpl: FC<ShapeProps> = ({ type }) => (\n  <div className={classes[type]} />\n);\n\nconst Shape = memo(ShapeImpl);\nShape.displayName = 'Shape';\nexport default Shape;\n\nexport interface ShapeProps {\n  type: ShapeType;\n}\n\nexport type ShapeType =\n  | 'rectangle'\n  | 'square'\n  | 'oval'\n  | 'circle'\n  | 'triangleUp'\n  | 'triangleDown'\n  | 'triangleLeft'\n  | 'triangleRight'\n  | 'triangleTopLeft'\n  | 'triangleTopRight'\n  | 'triangleBottomLeft'\n  | 'triangleBottomRight'\n  | 'curvedTailArrow'\n  | 'trapezoid'\n  | 'parallelogram'\n  | 'sixPointsStar'\n  | 'fivePointsStar'\n  | 'pentagon'\n  | 'hexagon'\n  | 'octagon'\n  | 'heart'\n  | 'infinity'\n  | 'diamondSquare'\n  | 'diamondShield'\n  | 'diamondNarrow'\n  | 'cutDiamond'\n  | 'egg'\n  | 'pacman'\n  | 'talkBubble'\n  | 'twelvePointsBurst'\n  | 'eightPointsBurst'\n  | 'yinYang'\n  | 'badgeRibbon'\n  | 'spaceInvader'\n  | 'tvScreen'\n  | 'chevron'\n  | 'magnifyingGlass'\n  | 'moon'\n  | 'flag'\n  | 'cone'\n  | 'cross'\n  | 'base'\n  | 'pointer'\n  | 'lock';\n","import React, { FC, memo } from 'react';\nimport Shape, { ShapeType } from './Shape';\nimport classes from './styles.module.scss';\n\nexport const ShapeContainerImpl: FC<ShapeContainerProps> = ({ name, type }) => (\n  <div className={classes.ShapeContainer}>\n    <h4 className={classes.Title}>{name}</h4>\n    <Shape type={type} />\n  </div>\n);\n\nconst ShapeContainer = memo(ShapeContainerImpl);\nShapeContainer.displayName = 'ShapeContainer';\nexport default ShapeContainer;\n\nexport interface ShapeContainerProps {\n  name: string;\n  type: ShapeType;\n}\n","import { QuestionInfo } from 'components/Question';\nimport React from 'react';\nimport Code from 'components/Code';\n\nconst questions: QuestionInfo[] = [\n  {\n    question: (\n      <p>\n        How to create shapes using only one <code>div</code>?\n      </p>\n    ),\n    answer: (\n      <Code language=\"scss\">\n        {`@mixin shape($color) {\n  display: inline-block;\n  background-color: $color;\n}\n\n@mixin emptyShape {\n  display: inline-block;\n  width: 0;\n  height: 0;\n  background-color: transparent;\n}\n\n@mixin rectangle($width, $height, $color) {\n  @include shape($color);\n  width: $width;\n  height: $height;\n}\n\n@mixin square($sideDimension, $color) {\n  @include rectangle($sideDimension, $sideDimension, $color);\n}\n\n@mixin oval($width, $height, $color) {\n  @include rectangle($width, $height, $color);\n  border-radius: 100%;\n}\n\n@mixin circle($diameter, $color) {\n  @include oval($diameter, $diameter, $color);\n}\n\n@mixin isoscelesTriangle($height, $width, $apex, $color) {\n  $adjacentSides: (\n    top: left right,\n    bottom: left right,\n    left: top bottom,\n    right: top bottom,\n  );\n  @include emptyShape();\n  border-#{$apex}: $height solid $color;\n  @each $side in map-get($map: $adjacentSides, $key: $apex) {\n    border-#{$side}: $width/2 solid transparent;\n  }\n}\n\n@mixin equilateralTriangle($height, $apex, $color) {\n  $width: $height / $cos30deg;\n  $radius: $height / (2 * $cos30deg * $cos30deg);\n  @include isoscelesTriangle($height, $width, $apex, $color);\n  @if $apex == top {\n    transform-origin: $width / 2 $height - $radius;\n  } @else if $apex == bottom {\n    transform-origin: $width / 2 $radius;\n  } @else if $apex == right {\n    transform-origin: $radius $width / 2;\n  } @else if $apex == left {\n    transform-origin: $height - $radius $width / 2;\n  }\n}\n\n@mixin rightAngledTriangle($height, $shownSide, $hiddenSide, $color) {\n  @include emptyShape();\n  border-#{$shownSide}: $height solid $color;\n  border-#{$hiddenSide}: $height solid transparent;\n}\n\n@mixin curvedTailArrow($length, $color) {\n  $dimension: $length / 2;\n  @include emptyShape();\n  margin-left: $dimension;\n  border-right: $dimension solid $color;\n  border-top: $dimension solid transparent;\n  transform: rotate(12deg);\n\n  &::after {\n    content: '';\n    position: absolute;\n    width: $dimension;\n    height: $dimension;\n    left: -$dimension * 0.7;\n    top: -$dimension * 1.2;\n    background: transparent;\n    border: 0 solid transparent;\n    border-top: $dimension * 0.4 solid $color;\n    border-radius: 100% 0 0 0;\n    transform: rotate(45deg);\n  }\n}\n\n@mixin trapezoid($upperWidth, $lowerWidth, $height, $color) {\n  $borderWidth: abs(\n      $number: $upperWidth - $lowerWidth,\n    ) / 2;\n  @include shape($color);\n  @if $upperWidth < $lowerWidth {\n    width: $upperWidth;\n    border-bottom: $height solid $color;\n  } @else {\n    width: $lowerWidth;\n    border-top: $height solid $color;\n  }\n  background-color: transparent;\n  border-left: $borderWidth solid transparent;\n  border-right: $borderWidth solid transparent;\n}\n\n@mixin parallelogram($width, $height, $color) {\n  $skewWidth: ($height * $tan20deg) / 2;\n  @include emptyShape();\n  position: relative;\n  margin: 0 $width + $skewWidth $height $skewWidth;\n  transform-origin: $width / 2 $height / 2;\n\n  &::after {\n    content: '';\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: $width;\n    height: $height;\n    background-color: $color;\n    transform: skew(-20deg);\n  }\n}\n\n@mixin sixPointsStar($sideDimension, $color) {\n  $height: $sideDimension * $cos30deg;\n  $radius: $sideDimension / $cos30deg / 2;\n  @include equilateralTriangle($height, bottom, $color);\n  position: relative;\n  margin-bottom: $height / 3;\n  transform-origin: 50% $radius;\n\n  &::after {\n    content: '';\n    position: absolute;\n    top: $height / 3;\n    left: -$sideDimension / 2;\n    @include equilateralTriangle($height, top, $color);\n  }\n}\n\n@mixin fivePointsStar($sideDimension, $color) {\n  $upperThird: $sideDimension * $tan36deg / 2;\n  $middleThird: $upperThird;\n  $lowerThird: $sideDimension * $cos18deg - $middleThird - $upperThird;\n  $radius: $sideDimension / $sin36deg / 2;\n  @include isoscelesTriangle($middleThird, $sideDimension, top, $color);\n  position: relative;\n  margin: $upperThird 0 $lowerThird;\n  transform-origin: 50% $radius - ($upperThird + $middleThird);\n\n  &::before,\n  &::after {\n    top: -$middleThird - $upperThird;\n    content: '';\n    position: absolute;\n  }\n\n  &::before {\n    left: 0;\n    @include isoscelesTriangle($middleThird, $sideDimension, left, $color);\n    transform: rotate(18deg);\n    transform-origin: 0 0;\n  }\n\n  &::after {\n    left: -$middleThird;\n    @include isoscelesTriangle($middleThird, $sideDimension, right, $color);\n    transform: rotate(-18deg);\n    transform-origin: 100% 0;\n  }\n}\n\n@mixin pentagon($sideDimension, $color) {\n  $width: $sideDimension + 2 * $sideDimension * $sin18deg;\n  $height: $sideDimension * $cos18deg;\n  $top: $sideDimension * $sin36deg;\n  $radius: $sideDimension / 2 / $sin36deg;\n  @include isoscelesTriangle($top, $width, bottom, $color);\n  position: relative;\n  margin-bottom: $height;\n  transform-origin: 50% $radius;\n\n  &::after {\n    content: '';\n    position: absolute;\n    top: $top;\n    left: -$width / 2;\n    @include trapezoid($width, $sideDimension, $height, $color);\n  }\n}\n\n@mixin hexagon($sideDimension, $color) {\n  $width: $sideDimension * $cos30deg * 2;\n  @include rectangle($width, $sideDimension, $color);\n  position: relative;\n  margin: $sideDimension / 2 0;\n\n  &::before,\n  &::after {\n    content: '';\n    position: absolute;\n  }\n\n  &::before {\n    top: -$sideDimension/2;\n    @include isoscelesTriangle($sideDimension / 2, $width, bottom, $color);\n  }\n\n  &::after {\n    top: $sideDimension;\n    @include isoscelesTriangle($sideDimension / 2, $width, top, $color);\n  }\n}\n\n@mixin octagon($sideDimension, $color) {\n  $sideBorder: $sideDimension * $cos45deg;\n  $width: $sideDimension + 2 * $sideBorder;\n  @include rectangle($width, $sideDimension, $color);\n  position: relative;\n  margin: $sideBorder 0;\n\n  &::before,\n  &::after {\n    content: '';\n    position: absolute;\n  }\n\n  &::before {\n    top: -$sideBorder;\n    @include trapezoid($sideDimension, $width, $sideBorder, $color);\n  }\n\n  &::after {\n    top: $sideDimension;\n    @include trapezoid($width, $sideDimension, $sideBorder, $color);\n  }\n}\n\n@mixin heart($height, $color) {\n  $halfWidth: $height * 5/8;\n  @include emptyShape();\n  position: relative;\n  display: inline-block;\n  margin: $height * 0.0375 $height * 1.25 $height * 1.0375 0;\n  transform-origin: $halfWidth;\n\n  &::before,\n  &::after {\n    content: '';\n    position: absolute;\n    width: $halfWidth;\n    height: $height;\n    top: 0;\n    background-color: $color;\n    border-radius: $halfWidth $halfWidth 0 0;\n  }\n\n  &::before {\n    left: $halfWidth;\n    transform-origin: 0 100%;\n    transform: rotate(-45deg);\n  }\n\n  &::after {\n    left: 0;\n    transform-origin: 100% 100%;\n    transform: rotate(45deg);\n  }\n}\n\n@mixin infinity($diameter, $color) {\n  @include emptyShape();\n  position: relative;\n  margin: 0 $diameter * 3.6 $diameter * 5/3 0;\n\n  &::before,\n  &::after {\n    content: '';\n    position: absolute;\n    width: $diameter;\n    height: $diameter;\n    border: $diameter/3 solid $colorPrimary;\n    transform: rotate(-45deg);\n  }\n\n  &::before {\n    left: 0;\n    border-radius: 100% 100% 0;\n  }\n\n  &::after {\n    left: $diameter * 1.9;\n    border-radius: 0 100% 100%;\n  }\n}\n\n@mixin diamondSquare($sideDimension, $color) {\n  $width: $sideDimension / $cos45deg;\n  @include emptyShape();\n  position: relative;\n  margin: ($width - $sideDimension) / 2 ($width + $sideDimension) / 2\n    ($width + $sideDimension) / 2 ($width - $sideDimension) / 2;\n  transform-origin: $sideDimension / 2 $sideDimension / 2;\n\n  &::after {\n    content: '';\n    position: absolute;\n    @include square($sideDimension, $color);\n    transform: rotate(45deg);\n  }\n}\n\n@mixin diamondShield($height, $color) {\n  $width: $height * 4/5 / $cos30deg;\n  @include isoscelesTriangle($height/5, $width, bottom, $color);\n  position: relative;\n  margin-bottom: $height * 4/5;\n  transform-origin: 50% $height / 2;\n\n  &::after {\n    content: '';\n    position: absolute;\n    left: -$width / 2;\n    top: $height/5;\n    @include isoscelesTriangle($height * 4/5, $width, top, $color);\n  }\n}\n\n@mixin diamondNarrow($sideDimension, $color) {\n  $height: $sideDimension * $cos30deg;\n  @include equilateralTriangle($height, bottom, $color);\n  position: relative;\n  margin-bottom: $height;\n  transform-origin: 50% $height;\n\n  &::after {\n    content: '';\n    position: absolute;\n    top: $height;\n    left: -$sideDimension / 2;\n    @include equilateralTriangle($height, top, $color);\n  }\n}\n\n@mixin cutDiamond($sideDimension, $color) {\n  $lowerHeight: $sideDimension * $cos30deg;\n  $upperHeight: $lowerHeight / 3.2;\n  $upperWidth: $sideDimension * 2 / 3;\n  @include trapezoid($upperWidth, $sideDimension, $upperHeight, $color);\n  position: relative;\n  margin-bottom: $lowerHeight;\n  transform-origin: 50% ($upperHeight + $lowerHeight) / 2;\n\n  &::after {\n    content: '';\n    position: absolute;\n    top: $upperHeight;\n    left: ($upperWidth - $sideDimension) / 2;\n    @include equilateralTriangle($lowerHeight, top, $color);\n  }\n}\n\n@mixin egg($height, $isUpward, $color) {\n  $width: $height * 0.8;\n  @include shape($color);\n  width: $width;\n  height: $height;\n  @if $isUpward {\n    border-radius: 50% 50% 50% 50% / 60% 60% 40% 40%;\n  } @else {\n    border-radius: 50% 50% 50% 50% / 40% 40% 60% 60%;\n  }\n}\n\n@mixin pacman($diameter, $direction, $color) {\n  @include emptyShape();\n  border: $diameter / 2 solid $color;\n  border-#{$direction}-color: transparent;\n  border-radius: 50%;\n}\n\n@mixin talkBubble($width, $height, $color) {\n  $arrowHeight: 20px;\n  $borderRadius: 12px;\n  @include shape($color);\n  position: relative;\n  width: $width;\n  height: $height;\n  border-radius: $borderRadius;\n\n  &::after {\n    content: '';\n    position: absolute;\n    top: $height;\n    right: $width / 4;\n    @include equilateralTriangle($arrowHeight, top, $color);\n  }\n}\n\n@mixin twelvePointsBurst($sideDimension, $color) {\n  $margin: $sideDimension * $sqrt5 / (3 + $sqrt5) / 2;\n  @include square($sideDimension, $color);\n  position: relative;\n  margin: $margin;\n\n  &::before,\n  &::after {\n    content: '';\n    position: absolute;\n    @include square($sideDimension, $color);\n  }\n\n  &::before {\n    transform: rotate(-30deg);\n  }\n\n  &::after {\n    transform: rotate(30deg);\n  }\n}\n\n@mixin eightPointsBurst($sideDimension, $color) {\n  $margin: $sideDimension / (2 + 2 / $cos45deg);\n  @include square($sideDimension, $color);\n  position: relative;\n  margin: $margin;\n\n  &::after {\n    content: '';\n    position: absolute;\n    @include square($sideDimension, $color);\n    transform: rotate(45deg);\n  }\n}\n\n@mixin yinYang($diameter, $color1, $color2) {\n  $borderWidth: 2px;\n  $innerDiameter: $diameter / 8;\n  $innerBorderWidth: ($diameter / 2 - $innerDiameter) / 2;\n  $top: ($diameter - ($innerDiameter + 2 * $innerBorderWidth)) / 2;\n  @include shape($color1);\n  position: relative;\n  width: $diameter;\n  height: $diameter / 2;\n  background-color: $color2;\n  border: $borderWidth solid $color1;\n  border-bottom-width: $diameter / 2 + $borderWidth;\n  border-radius: 50%;\n  box-sizing: content-box;\n\n  &::before,\n  &::after {\n    content: '';\n    position: absolute;\n  }\n\n  &::before {\n    @include circle($innerDiameter, $color2);\n    top: $top;\n    left: 0;\n    border: $innerBorderWidth solid $color1;\n  }\n\n  &::after {\n    @include circle($innerDiameter, $color1);\n    top: $top;\n    right: 0;\n    border: $innerBorderWidth solid $color2;\n  }\n}\n\n@mixin badgeRibbon($diameter, $color) {\n  $triangleHeight: $diameter * 0.7;\n  $triangleWidth: $diameter * 0.8;\n  $bottom: $diameter * 0.28;\n  @include circle($diameter, $color);\n  position: relative;\n  margin-bottom: $bottom;\n\n  &::before,\n  &::after {\n    content: '';\n    position: absolute;\n    top: $diameter / 2;\n  }\n\n  &::before {\n    @include isoscelesTriangle($triangleHeight, $triangleWidth, left, $color);\n    left: $diameter / 4;\n    transform: rotate(12deg);\n    transform-origin: 0 0;\n  }\n\n  &::after {\n    @include isoscelesTriangle($triangleHeight, $triangleWidth, right, $color);\n    right: $diameter / 4;\n    transform: rotate(-12deg);\n    transform-origin: 100% 0;\n  }\n}\n\n@mixin spaceInvader($pixel, $color) {\n  @include shape($color);\n  margin: $pixel * 3 $pixel * 5 $pixel * 4;\n  box-shadow: 0 0 0 1 * $pixel $color, 0 1 * $pixel 0 1 * $pixel $color,\n    -2.5 * $pixel 1.5 * $pixel 0 0.5 * $pixel $color,\n    2.5 * $pixel 1.5 * $pixel 0 0.5 * $pixel $color,\n    -3 * $pixel -3 * $pixel 0 0 $color, 3 * $pixel -3 * $pixel 0 0 $color,\n    -2 * $pixel -2 * $pixel 0 0 $color, 2 * $pixel -2 * $pixel 0 0 $color,\n    -3 * $pixel -1 * $pixel 0 0 $color, -2 * $pixel -1 * $pixel 0 0 $color,\n    2 * $pixel -1 * $pixel 0 0 $color, 3 * $pixel -1 * $pixel 0 0 $color,\n    -4 * $pixel 0 0 0 $color, -3 * $pixel 0 0 0 $color, 3 * $pixel 0 0 0 $color,\n    4 * $pixel 0 0 0 $color, -5 * $pixel 1 * $pixel 0 0 $color,\n    -4 * $pixel 1 * $pixel 0 0 $color, 4 * $pixel 1 * $pixel 0 0 $color,\n    5 * $pixel 1 * $pixel 0 0 $color, -5 * $pixel 2 * $pixel 0 0 $color,\n    5 * $pixel 2 * $pixel 0 0 $color, -5 * $pixel 3 * $pixel 0 0 $color,\n    -3 * $pixel 3 * $pixel 0 0 $color, 3 * $pixel 3 * $pixel 0 0 $color,\n    5 * $pixel 3 * $pixel 0 0 $color, -2 * $pixel 4 * $pixel 0 0 $color,\n    -1 * $pixel 4 * $pixel 0 0 $color, 1 * $pixel 4 * $pixel 0 0 $color,\n    2 * $pixel 4 * $pixel 0 0 $color;\n  width: 1 * $pixel;\n  height: 1 * $pixel;\n}\n\n@mixin tvScreen($height, $color) {\n  $width: $height * 4/3;\n  @include shape($color);\n  position: relative;\n  margin: 0 $height / 15;\n  width: $width;\n  height: $height;\n  border-radius: 50% / 10%;\n\n  &::after {\n    @include shape($color);\n    content: '';\n    position: absolute;\n    top: 10%;\n    bottom: 10%;\n    left: -5%;\n    right: -5%;\n    border-radius: 5% / 50%;\n  }\n}\n\n@mixin chevron($height, $color) {\n  $width: $height * 1.3;\n  $skewAngle: 10deg;\n  $skewHeight: $width * $tan10deg / 2;\n  @include emptyShape();\n  position: relative;\n  margin: $skewHeight $width * 2 $height + $skewHeight 0;\n  transform-origin: $width 0;\n\n  &::before,\n  &::after {\n    content: '';\n    position: absolute;\n    width: $width;\n    height: $height;\n    top: $skewHeight;\n    background-color: $color;\n  }\n\n  &::before {\n    left: 0;\n    transform-origin: 100% 0;\n    transform: skewY($skewAngle);\n  }\n\n  &::after {\n    left: $width;\n    transform-origin: 0 0;\n    transform: skewY(-$skewAngle);\n  }\n}\n\n@mixin magnifyingGlass($diameter, $color) {\n  $thickness: $diameter / 5;\n  $innerDiameter: $diameter - 2 * $thickness;\n  $handleLength: $diameter / 2 + $thickness;\n  $margin: $diameter * 0.275;\n  @include emptyShape();\n  position: relative;\n  width: $innerDiameter;\n  height: $innerDiameter;\n  margin: 0 $margin $margin 0;\n  border: $thickness solid $color;\n  border-radius: 50%;\n\n  &::after {\n    @include rectangle($handleLength, $thickness, $color);\n    content: '';\n    position: absolute;\n    left: $diameter - 2 * $thickness;\n    top: ($diameter - 3 * $thickness) / 2;\n    transform-origin: -($diameter / 2 - $thickness) $thickness / 2;\n    transform: rotateZ(45deg);\n  }\n}\n\n@mixin moon($diameter, $color) {\n  $thickness: $diameter * 0.1875;\n  $innerDiameter: $diameter - $thickness;\n  @include emptyShape();\n  width: $innerDiameter;\n  height: $innerDiameter;\n  margin: $thickness * -1 $thickness $thickness $thickness * -1;\n  border-radius: 50%;\n  box-shadow: $thickness $thickness 0 0 $color;\n}\n\n@mixin flag($width, $color) {\n  $top: $width / 2;\n  $bottom: $width / 4;\n  @include emptyShape();\n  border-width: $top $width / 2 $bottom;\n  border-style: solid;\n  border-color: $color $color transparent;\n}\n\n@mixin cone($width, $height, $color) {\n  @include emptyShape();\n  border-width: $height $width / 2 0;\n  border-style: solid;\n  border-color: $color transparent transparent;\n  border-radius: 50%;\n}\n\n@mixin cross($length, $color) {\n  $thickness: $length / 5;\n  $side: ($length - $thickness) / 2;\n  @include rectangle($thickness, $length, $color);\n  position: relative;\n  margin: 0 $side;\n\n  &::after {\n    @include rectangle($length, $thickness, $color);\n    content: '';\n    position: absolute;\n    left: -$side;\n    top: $side;\n  }\n}\n\n@mixin base($width, $color) {\n  $height: $width * 0.5;\n  $top: $width * 0.3;\n  @include rectangle($width, $height, $color);\n  position: relative;\n  margin-top: $top;\n\n  &::before {\n    @include isoscelesTriangle($top, $width, bottom, $color);\n    content: '';\n    position: absolute;\n    top: -$top;\n    left: 0;\n  }\n}\n\n@mixin pointer($width, $height, $color) {\n  @include emptyShape();\n  position: relative;\n  width: $width;\n  border-top: $height solid $color;\n  border-bottom: $height solid $color;\n  border-left: $height solid transparent;\n\n  &::after {\n    @include isoscelesTriangle($height, $height * 2, left, $color);\n    content: '';\n    position: absolute;\n    top: -$height;\n    right: -$height;\n  }\n}\n\n@mixin lock($width, $color) {\n  $holeWidth: $width / 6;\n  $holeHeight: $width / 2.8;\n  $loopWidth: $width / 2.2;\n  $loopHeight: $width / 2.5;\n  $thickness: $width / 6;\n  @include emptyShape();\n  position: relative;\n  width: $holeWidth;\n  height: $holeHeight;\n  margin-top: $loopHeight + $thickness;\n  border-style: solid;\n  border-color: $color;\n  border-width: $thickness ($width - $holeWidth) / 2;\n  border-radius: 16%;\n\n  &::before,\n  &::after {\n    content: '';\n    position: absolute;\n  }\n\n  &::before {\n    @include emptyShape();\n    top: -($loopHeight + 2 * $thickness);\n    left: -(($loopWidth - $holeWidth) / 2 + $thickness);\n    width: $loopWidth;\n    height: $loopHeight;\n    border: $thickness solid $color;\n    border-radius: 50% 50% 0 0;\n  }\n\n  &::after {\n    top: -$thickness;\n    left: -$thickness;\n    width: $holeWidth;\n    height: $holeHeight;\n    border: $thickness solid $color;\n    border-radius: 50%/36%;\n  }\n}`}\n      </Code>\n    ),\n    references: [\n      {\n        name: `[CSS-TRICKS] The Shapes of CSS`,\n        url: `https://css-tricks.com/the-shapes-of-css/`,\n      },\n    ],\n  },\n];\n\nexport default questions;\n","import React, { FC, memo } from 'react';\nimport Question from 'components/Question';\nimport ShapeContainer from './ShapeContainer';\nimport questions from './questions';\n\nexport const Shapes1Impl: FC = () => (\n  <Question title=\"Shapes 1\" questions={questions}>\n    <ShapeContainer name=\"Rectangle\" type=\"rectangle\" />\n    <ShapeContainer name=\"Square\" type=\"square\" />\n    <ShapeContainer name=\"Oval\" type=\"oval\" />\n    <ShapeContainer name=\"Circle\" type=\"circle\" />\n    <ShapeContainer name=\"Triangle Up\" type=\"triangleUp\" />\n    <ShapeContainer name=\"Triangle Down\" type=\"triangleDown\" />\n    <ShapeContainer name=\"Triangle Left\" type=\"triangleLeft\" />\n    <ShapeContainer name=\"Triangle Right\" type=\"triangleRight\" />\n    <ShapeContainer name=\"Triangle Top Left\" type=\"triangleTopLeft\" />\n    <ShapeContainer name=\"Triangle Top Right\" type=\"triangleTopRight\" />\n    <ShapeContainer name=\"Triangle Bottom Left\" type=\"triangleBottomLeft\" />\n    <ShapeContainer name=\"Triangle Bottom Right\" type=\"triangleBottomRight\" />\n    <ShapeContainer name=\"Curved Tail Arrow\" type=\"curvedTailArrow\" />\n    <ShapeContainer name=\"Trapezoid\" type=\"trapezoid\" />\n    <ShapeContainer name=\"Parallelogram\" type=\"parallelogram\" />\n    <ShapeContainer name=\"6-Points Star\" type=\"sixPointsStar\" />\n    <ShapeContainer name=\"5-Points Star\" type=\"fivePointsStar\" />\n    <ShapeContainer name=\"Pentagon\" type=\"pentagon\" />\n    <ShapeContainer name=\"Hexagon\" type=\"hexagon\" />\n    <ShapeContainer name=\"Octagon\" type=\"octagon\" />\n    <ShapeContainer name=\"Heart\" type=\"heart\" />\n    <ShapeContainer name=\"Infinity\" type=\"infinity\" />\n    <ShapeContainer name=\"Diamond Square\" type=\"diamondSquare\" />\n    <ShapeContainer name=\"Diamond Shield\" type=\"diamondShield\" />\n    <ShapeContainer name=\"Diamond Narrow\" type=\"diamondNarrow\" />\n    <ShapeContainer name=\"Cut Diamond\" type=\"cutDiamond\" />\n    <ShapeContainer name=\"Egg\" type=\"egg\" />\n    <ShapeContainer name=\"Pac-Man\" type=\"pacman\" />\n    <ShapeContainer name=\"Talk Bubble\" type=\"talkBubble\" />\n    <ShapeContainer name=\"12-Points Burst\" type=\"twelvePointsBurst\" />\n    <ShapeContainer name=\"8-Points Burst\" type=\"eightPointsBurst\" />\n    <ShapeContainer name=\"Yin Yang\" type=\"yinYang\" />\n    <ShapeContainer name=\"Badge Ribbon\" type=\"badgeRibbon\" />\n    <ShapeContainer name=\"Space Invader\" type=\"spaceInvader\" />\n    <ShapeContainer name=\"TV Screen\" type=\"tvScreen\" />\n    <ShapeContainer name=\"Chevron\" type=\"chevron\" />\n    <ShapeContainer name=\"Magnifying Glass\" type=\"magnifyingGlass\" />\n    <ShapeContainer name=\"Moon\" type=\"moon\" />\n    <ShapeContainer name=\"Flag\" type=\"flag\" />\n    <ShapeContainer name=\"Cone\" type=\"cone\" />\n    <ShapeContainer name=\"Cross\" type=\"cross\" />\n    <ShapeContainer name=\"Base\" type=\"base\" />\n    <ShapeContainer name=\"Pointer\" type=\"pointer\" />\n    <ShapeContainer name=\"Lock\" type=\"lock\" />\n  </Question>\n);\n\nconst Shapes1 = memo(Shapes1Impl);\nShapes1.displayName = 'Shapes1';\nexport default Shapes1;\n\n/**\n * TODO:\n * 1. hourglass\n * 1. use clip-path to create more shape\n */\n","import React, { FC, memo, ReactNode } from 'react';\nimport classes from './styles.module.scss';\n\nexport const QuestionImpl: FC<QuestionProps> = ({\n  title,\n  questions,\n  children,\n}) => (\n  <div className={classes.Container}>\n    <h2 className={classes.Title}>{title}</h2>\n    <div className={classes.Content}>{children}</div>\n    <div className={classes.Questions}>\n      <h3>Questions</h3>\n      <div>\n        {questions.map(({ question, answer, references }, index) => (\n          // eslint-disable-next-line react/no-array-index-key\n          <details key={index}>\n            <summary className={classes.Question}>\n              <span className={classes.Index}>{index + 1}.</span> {question}\n            </summary>\n\n            <div className={classes.Answer}>{answer}</div>\n\n            {references && references.length && (\n              <div className={classes.References}>\n                <h4>References</h4>\n                <ol>\n                  {references.map(({ name, url }) => (\n                    <li key={url}>\n                      <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">\n                        {name}\n                      </a>\n                    </li>\n                  ))}\n                </ol>\n              </div>\n            )}\n          </details>\n        ))}\n      </div>\n    </div>\n  </div>\n);\n\nconst Question = memo(QuestionImpl);\nQuestion.displayName = 'Question';\nexport default Question;\n\nexport interface QuestionProps {\n  title: string;\n  questions: QuestionInfo[];\n  children?: ReactNode;\n}\n\nexport interface QuestionInfo {\n  question: ReactNode;\n  answer: ReactNode;\n  references?: ReferenceInfo[];\n}\n\nexport interface ReferenceInfo {\n  name: string;\n  url?: string;\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"styles_Container__12Mbc\",\"Title\":\"styles_Title__2qxOI\",\"Content\":\"styles_Content__2wB8J\",\"Questions\":\"styles_Questions__1t11e\",\"Question\":\"styles_Question__3wRhS\",\"Index\":\"styles_Index__1JqtT\",\"Answer\":\"styles_Answer__2snZe\",\"References\":\"styles_References__2N6Wn\"};","import React, { FC, memo } from 'react';\nimport classnames from 'classnames';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { okaidia } from 'react-syntax-highlighter/dist/esm/styles/prism';\nimport classes from './styles.module.scss';\n\nexport const CodeImpl: FC<CodeProps> = ({\n  className,\n  children,\n  style = okaidia,\n  language,\n}) => (\n  <div className={classnames(classes.Code, className)}>\n    <SyntaxHighlighter language={language} style={style}>\n      {children}\n    </SyntaxHighlighter>\n  </div>\n);\n\nconst Code = memo(CodeImpl);\nCode.displayName = 'Code';\nexport default Code;\n\nexport interface CodeProps {\n  className?: string;\n  style?: object;\n  children: string;\n  language: Language;\n}\n\nexport type Language =\n  | 'abap'\n  | 'actionscript'\n  | 'ada'\n  | 'apacheconf'\n  | 'apl'\n  | 'applescript'\n  | 'arduino'\n  | 'arff'\n  | 'asciidoc'\n  | 'asm6502'\n  | 'aspnet'\n  | 'autohotkey'\n  | 'autoit'\n  | 'bash'\n  | 'basic'\n  | 'batch'\n  | 'bison'\n  | 'brainfuck'\n  | 'bro'\n  | 'c'\n  | 'clike'\n  | 'clojure'\n  | 'coffeescript'\n  | 'cpp'\n  | 'crystal'\n  | 'csharp'\n  | 'csp'\n  | 'cssExtras'\n  | 'css-extras'\n  | 'css'\n  | 'd'\n  | 'dart'\n  | 'diff'\n  | 'django'\n  | 'docker'\n  | 'eiffel'\n  | 'elixir'\n  | 'elm'\n  | 'erb'\n  | 'erlang'\n  | 'flow'\n  | 'fortran'\n  | 'fsharp'\n  | 'gedcom'\n  | 'gherkin'\n  | 'git'\n  | 'glsl'\n  | 'go'\n  | 'graphql'\n  | 'groovy'\n  | 'haml'\n  | 'handlebars'\n  | 'haskell'\n  | 'haxe'\n  | 'hpkp'\n  | 'hsts'\n  | 'http'\n  | 'ichigojam'\n  | 'icon'\n  | 'inform7'\n  | 'ini'\n  | 'io'\n  | 'j'\n  | 'java'\n  | 'javascript'\n  | 'jolie'\n  | 'json'\n  | 'jsx'\n  | 'julia'\n  | 'keyman'\n  | 'kotlin'\n  | 'latex'\n  | 'less'\n  | 'liquid'\n  | 'lisp'\n  | 'livescript'\n  | 'lolcode'\n  | 'lua'\n  | 'makefile'\n  | 'markdown'\n  | 'markupTemplating'\n  | 'markup-templating'\n  | 'markup'\n  | 'matlab'\n  | 'mel'\n  | 'mizar'\n  | 'monkey'\n  | 'n4js'\n  | 'nasm'\n  | 'nginx'\n  | 'nim'\n  | 'nix'\n  | 'nsis'\n  | 'objectivec'\n  | 'ocaml'\n  | 'opencl'\n  | 'oz'\n  | 'parigp'\n  | 'parser'\n  | 'pascal'\n  | 'perl'\n  | 'phpExtras'\n  | 'php-extras'\n  | 'php'\n  | 'plsql'\n  | 'powershell'\n  | 'processing'\n  | 'prolog'\n  | 'properties'\n  | 'protobuf'\n  | 'pug'\n  | 'puppet'\n  | 'pure'\n  | 'python'\n  | 'q'\n  | 'qore'\n  | 'r'\n  | 'reason'\n  | 'renpy'\n  | 'rest'\n  | 'rip'\n  | 'roboconf'\n  | 'ruby'\n  | 'rust'\n  | 'sas'\n  | 'sass'\n  | 'scala'\n  | 'scheme'\n  | 'scss'\n  | 'smalltalk'\n  | 'smarty'\n  | 'soy'\n  | 'sql'\n  | 'stylus'\n  | 'swift'\n  | 'tap'\n  | 'tcl'\n  | 'textile'\n  | 'tsx'\n  | 'tt2'\n  | 'twig'\n  | 'typescript'\n  | 'vbnet'\n  | 'velocity'\n  | 'verilog'\n  | 'vhdl'\n  | 'vim'\n  | 'visualBasic'\n  | 'visual-basic'\n  | 'wasm'\n  | 'wiki'\n  | 'xeora'\n  | 'xojo'\n  | 'xquery'\n  | 'yaml';\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Code\":\"styles_Code__2Axvp\"};"],"sourceRoot":""}