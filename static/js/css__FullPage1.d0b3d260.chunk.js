(this.webpackJsonpfrontend=this.webpackJsonpfrontend||[]).push([[15],{134:function(e,a,t){"use strict";var n=t(0),o=t.n(n),s=t(130),i=t(34),r=Object(n.memo)((function(e){var a=e.className,t=e.references;return o.a.createElement(s.a,{className:a},o.a.createElement(i.a,{variant:"h5"},"References"),o.a.createElement("ol",null,t.map((function(e){var a=e.name,t=e.url;return o.a.createElement("li",{key:t},o.a.createElement("a",{href:t,target:"_blank",rel:"noopener noreferrer"},a))}))))}));r.displayName="References",a.a=r},135:function(e,a,t){"use strict";var n=t(54),o=t(0),s=t.n(o),i=t(130),r=t(34),l=t(124),u=t(35),m=t(121),c=t(122),d=t(123),p=t(36),b=t(134),h=Object(o.memo)((function(e){var a=e.className,t=e.todos;return s.a.createElement(i.a,null,s.a.createElement(r.a,{className:a,variant:"h5"},"Todos"),s.a.createElement("ol",null,t.map((function(e){return s.a.createElement("li",{key:e},e)}))))}));h.displayName="Todos";var v=h,f=t(64),g=t(43),y=Object(f.a)((function(e){return{Question:{fontWeight:500},HiddenContent:{marginBottom:e.spacing(2)},Answer:{marginTop:e.spacing(1.5),padding:0,fontSize:14,backgroundColor:g.a[50],border:"1px solid ".concat(g.a[400]),borderRadius:6,"& p":{padding:e.spacing(0,2.5)},"& ol,ul":{margin:e.spacing(1.5,0)},"& img":{maxWidth:"100%"}},BottomBox:{paddingBottom:e.spacing(2),borderBottom:"1px solid ".concat(g.a[400]),"& ol,ul":{marginTop:e.spacing(1)},"& li":{fontSize:14,fontWeight:500,marginBottom:e.spacing(1)}},BottomBoxTitle:{margin:e.spacing(3,0,0)}}})),O=Object(o.memo)((function(e){var a=e.index,t=e.question,n=e.answer,o=e.references,r=e.todos,l=y(),h=Object(p.g)(!1),f=Object(u.a)(h,2),g=f[0],O=f[1],w=!(!o||!o.length),T=!(!r||!r.length),E=w||T;return s.a.createElement(s.a.Fragment,null,s.a.createElement(m.a,{button:!0,onClick:O},s.a.createElement(c.a,{classes:{primary:l.Question}},a,". ",t)),s.a.createElement(d.a,{in:g,timeout:"auto"},s.a.createElement(i.a,{className:l.HiddenContent},s.a.createElement(i.a,{className:l.Answer},n),E&&s.a.createElement(i.a,{className:l.BottomBox},w&&s.a.createElement(b.a,{className:l.BottomBoxTitle,references:o}),T&&s.a.createElement(v,{className:l.BottomBoxTitle,todos:r})))))}));O.displayName="QuestionItem";var w=O,T=t(136),E=t(166),k=Object(f.a)((function(e){var a=e.spacing;return Object(E.a)({root:{},questions:{marginTop:a(4),"& code":{fontFamily:"'Courier New', Courier, monospace",fontSize:14,fontWeight:600,color:"rgb(219, 104, 27)"}}})}),{classNamePrefix:"QuestionPage"}),N=Object(o.memo)((function(e){var a=e.questions,t=e.children,o=Object(n.a)(e,["questions","children"]),u=k();return s.a.createElement(T.a,o,t,s.a.createElement(i.a,{className:u.questions},s.a.createElement(r.a,{variant:"h4"},"Questions"),s.a.createElement(i.a,null,s.a.createElement(l.a,null,a.map((function(e,a){return s.a.createElement(w,Object.assign({key:a,index:a+1},e))}))))))}));N.displayName="QuestionPage";a.a=N},136:function(e,a,t){"use strict";var n=t(0),o=t.n(n),s=t(130),i=t(34),r=t(3),l=t(166),u=t(64),m=Object(u.a)((function(e){var a=e.spacing;return Object(l.a)({root:{marginTop:a(4)},content:{marginTop:a(2.5)}})}),{classNamePrefix:"PageLayout"}),c=Object(n.memo)((function(e){var a=e.className,t=e.title,n=e.children,l=m();return o.a.createElement(s.a,{className:Object(r.a)(l.root,a)},o.a.createElement(i.a,{variant:"h3"},t),o.a.createElement(s.a,{className:l.content},n))}));c.displayName="PageLayout";a.a=c},166:function(e,a,t){"use strict";function n(e){return e}t.d(a,"a",(function(){return n}))},803:function(e,a,t){e.exports={Container:"styles_Container__9eSO1",Ads:"styles_Ads__24oP1",AdsImg:"styles_AdsImg__1ACY0",Window:"styles_Window__1Y3e2"}},908:function(e,a,t){"use strict";t.r(a);var n=t(0),o=t.n(n),s=t(135),i=[{question:"This is undone",answer:null}],r=t(803),l=t.n(r);t.d(a,"FullPage1Component",(function(){return u}));var u=function(){return o.a.createElement(s.a,{title:"",questions:i},"UnComponentemented",o.a.createElement("div",{className:l.a.Container},o.a.createElement("p",null,"debounceTime delays values emitted by the source Observable, but drops previous pending delayed emissions if a new value arrives on the source Observable. This operator keeps track of the most recent value from the source Observable, and emits that only when dueTime enough time has passed without any other value appearing on the source Observable. If a new value appears before dueTime silence occurs, the previous value will be dropped and will not be emitted on the output Observable."),o.a.createElement("p",null,"This is a rate-limiting operator, because it is impossible for more than one value to be emitted in any time window of duration dueTime, but it is also a delay-like operator since output emissions do not occur at the same time as they did on the source Observable. Optionally takes a SchedulerLike for managing timers."),o.a.createElement("p",null,"debounceTime delays values emitted by the source Observable, but drops previous pending delayed emissions if a new value arrives on the source Observable. This operator keeps track of the most recent value from the source Observable, and emits that only when dueTime enough time has passed without any other value appearing on the source Observable. If a new value appears before dueTime silence occurs, the previous value will be dropped and will not be emitted on the output Observable."),o.a.createElement("p",null,"This is a rate-limiting operator, because it is impossible for more than one value to be emitted in any time window of duration dueTime, but it is also a delay-like operator since output emissions do not occur at the same time as they did on the source Observable. Optionally takes a SchedulerLike for managing timers."),o.a.createElement("p",null,"debounceTime delays values emitted by the source Observable, but drops previous pending delayed emissions if a new value arrives on the source Observable. This operator keeps track of the most recent value from the source Observable, and emits that only when dueTime enough time has passed without any other value appearing on the source Observable. If a new value appears before dueTime silence occurs, the previous value will be dropped and will not be emitted on the output Observable."),o.a.createElement("div",{className:l.a.Ads},o.a.createElement("div",{className:l.a.AdsImg})),o.a.createElement("p",null,"This is a rate-limiting operator, because it is impossible for more than one value to be emitted in any time window of duration dueTime, but it is also a delay-like operator since output emissions do not occur at the same time as they did on the source Observable. Optionally takes a SchedulerLike for managing timers."),o.a.createElement("p",null,"debounceTime delays values emitted by the source Observable, but drops previous pending delayed emissions if a new value arrives on the source Observable. This operator keeps track of the most recent value from the source Observable, and emits that only when dueTime enough time has passed without any other value appearing on the source Observable. If a new value appears before dueTime silence occurs, the previous value will be dropped and will not be emitted on the output Observable."),o.a.createElement("p",null,"This is a rate-limiting operator, because it is impossible for more than one value to be emitted in any time window of duration dueTime, but it is also a delay-like operator since output emissions do not occur at the same time as they did on the source Observable. Optionally takes a SchedulerLike for managing timers."),o.a.createElement("p",null,"debounceTime delays values emitted by the source Observable, but drops previous pending delayed emissions if a new value arrives on the source Observable. This operator keeps track of the most recent value from the source Observable, and emits that only when dueTime enough time has passed without any other value appearing on the source Observable. If a new value appears before dueTime silence occurs, the previous value will be dropped and will not be emitted on the output Observable."),o.a.createElement("p",null,"This is a rate-limiting operator, because it is impossible for more than one value to be emitted in any time window of duration dueTime, but it is also a delay-like operator since output emissions do not occur at the same time as they did on the source Observable. Optionally takes a SchedulerLike for managing timers."),o.a.createElement("p",null,"debounceTime delays values emitted by the source Observable, but drops previous pending delayed emissions if a new value arrives on the source Observable. This operator keeps track of the most recent value from the source Observable, and emits that only when dueTime enough time has passed without any other value appearing on the source Observable. If a new value appears before dueTime silence occurs, the previous value will be dropped and will not be emitted on the output Observable."),o.a.createElement("p",null,"This is a rate-limiting operator, because it is impossible for more than one value to be emitted in any time window of duration dueTime, but it is also a delay-like operator since output emissions do not occur at the same time as they did on the source Observable. Optionally takes a SchedulerLike for managing timers.")))},m=Object(n.memo)(u);m.displayName="FullPage1";a.default=m}}]);
//# sourceMappingURL=css__FullPage1.d0b3d260.chunk.js.map