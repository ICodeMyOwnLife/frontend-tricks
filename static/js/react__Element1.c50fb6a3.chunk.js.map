{"version":3,"sources":["components/References/index.tsx","components/Todos/index.tsx","components/QuestionItem/styles.ts","components/QuestionItem/index.tsx","components/QuestionPage/styles.ts","components/QuestionPage/index.tsx","components/PageLayout/styles.ts","components/PageLayout/index.tsx","components/CodeViewer/styles.ts","components/CodeViewer/index.tsx","pages/react/Element1/styles.module.scss","pages/react/Element1/hooks.ts","pages/react/Element1/questions.tsx","pages/react/Element1/index.tsx"],"names":["References","memo","className","references","variant","map","name","url","key","href","target","rel","displayName","Todos","todos","Box","Typography","todo","useStyles","makeStyles","theme","Question","fontWeight","HiddenContent","marginBottom","spacing","Answer","marginTop","padding","fontSize","backgroundColor","grey","border","borderRadius","margin","maxWidth","BottomBox","paddingBottom","borderBottom","BottomBoxTitle","QuestionItem","index","question","answer","classes","useToggle","open","toggleOpen","hasReferences","length","hasTodos","showBottomBox","ListItem","button","onClick","ListItemText","primary","Collapse","in","timeout","createStyles","root","questions","fontFamily","color","classNamePrefix","QuestionPage","children","props","PageLayout","List","questionInfo","content","title","clsx","CodeViewer","style","okaidia","language","module","exports","useForm","initialData","useState","data","setData","onChange","useCallback","e","prevData","nextValue","get","Number","value","String","Boolean","checked","console","warn","nextData","cloneDeep","set","element","cloneElement","id","Element1Component","active","getFieldDecorator","Form","InputGroup","InputLabel","htmlFor","InputControl","type","Checkbox","Data","JSON","stringify","Element1"],"mappings":"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","file":"static/js/react__Element1.c50fb6a3.chunk.js","sourcesContent":["import React, { FC, memo } from 'react';\nimport { Box, Typography } from '@material-ui/core';\n\nexport const ReferencesComponent: FC<ReferencesProps> = ({\n  className,\n  references,\n}) => (\n  <Box className={className}>\n    <Typography variant=\"h5\">References</Typography>\n    <ol>\n      {references!.map(({ name, url }) => (\n        <li key={url}>\n          <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">\n            {name}\n          </a>\n        </li>\n      ))}\n    </ol>\n  </Box>\n);\n\nconst References = memo(ReferencesComponent);\nReferences.displayName = 'References';\nexport default References;\n\nexport interface ReferencesProps {\n  className?: string;\n  references: ReferenceInfo[];\n}\n\nexport interface ReferenceInfo {\n  name: string;\n  url?: string;\n}\n","import React, { FC, memo } from 'react';\nimport { Box, Typography } from '@material-ui/core';\n\nexport const TodosComponent: FC<TodosProps> = ({ className, todos }) => (\n  <Box>\n    <Typography className={className} variant=\"h5\">\n      Todos\n    </Typography>\n    <ol>\n      {todos!.map(todo => (\n        <li key={todo}>{todo}</li>\n      ))}\n    </ol>\n  </Box>\n);\n\nconst Todos = memo(TodosComponent);\nTodos.displayName = 'Todos';\nexport default Todos;\n\nexport interface TodosProps {\n  className?: string;\n  todos: string[];\n}\n","import { makeStyles, Theme } from '@material-ui/core';\nimport { grey } from '@material-ui/core/colors';\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  Question: {\n    fontWeight: 500,\n  },\n  HiddenContent: {\n    marginBottom: theme.spacing(2),\n  },\n  Answer: {\n    marginTop: theme.spacing(1.5),\n    padding: 0,\n    fontSize: 14,\n    backgroundColor: grey[50],\n    border: `1px solid ${grey[400]}`,\n    borderRadius: 6,\n\n    '& p': {\n      padding: theme.spacing(0, 2.5),\n    },\n\n    '& ol,ul': {\n      margin: theme.spacing(1.5, 0),\n    },\n\n    '& img': {\n      maxWidth: '100%',\n    },\n  },\n  BottomBox: {\n    paddingBottom: theme.spacing(2),\n    borderBottom: `1px solid ${grey[400]}`,\n\n    '& ol,ul': {\n      marginTop: theme.spacing(1),\n    },\n\n    '& li': {\n      fontSize: 14,\n      fontWeight: 500,\n      marginBottom: theme.spacing(1),\n    },\n  },\n  BottomBoxTitle: {\n    margin: theme.spacing(3, 0, 0),\n  },\n}));\n\nexport default useStyles;\n","import React, { FC, memo } from 'react';\nimport { ListItem, ListItemText, Collapse, Box } from '@material-ui/core';\nimport { useToggle } from 'cb-hooks';\nimport References from 'components/References';\nimport Todos from 'components/Todos';\nimport { QuestionInfo } from 'types/app-common';\nimport useStyles from './styles';\n\nexport const QuestionItemComponent: FC<QuestionItemProps> = ({\n  index,\n  question,\n  answer,\n  references,\n  todos,\n}) => {\n  const classes = useStyles();\n  const [open, toggleOpen] = useToggle(false);\n  const hasReferences = !!(references && references.length);\n  const hasTodos = !!(todos && todos.length);\n  const showBottomBox = hasReferences || hasTodos;\n\n  return (\n    <>\n      <ListItem button onClick={toggleOpen}>\n        <ListItemText classes={{ primary: classes.Question }}>\n          {index}. {question}\n        </ListItemText>\n      </ListItem>\n      <Collapse in={open} timeout=\"auto\">\n        <Box className={classes.HiddenContent}>\n          <Box className={classes.Answer}>{answer}</Box>\n\n          {showBottomBox && (\n            <Box className={classes.BottomBox}>\n              {hasReferences && (\n                <References\n                  className={classes.BottomBoxTitle}\n                  references={references!}\n                />\n              )}\n\n              {hasTodos && (\n                <Todos className={classes.BottomBoxTitle} todos={todos!} />\n              )}\n            </Box>\n          )}\n        </Box>\n      </Collapse>\n    </>\n  );\n};\n\nconst QuestionItem = memo(QuestionItemComponent);\nQuestionItem.displayName = 'QuestionItem';\nexport default QuestionItem;\n\nexport interface QuestionItemProps extends QuestionInfo {\n  index: number;\n}\n","import { Theme, makeStyles, createStyles } from '@material-ui/core';\n\nconst styles = ({ spacing }: Theme) =>\n  createStyles({\n    root: {},\n    questions: {\n      marginTop: spacing(4),\n      '& code': {\n        fontFamily: `'Courier New', Courier, monospace`,\n        fontSize: 14,\n        fontWeight: 600,\n        color: `rgb(219, 104, 27)`,\n      },\n    },\n  });\n\nconst useStyles = makeStyles(styles, { classNamePrefix: 'QuestionPage' });\n\nexport default useStyles;\n","/* eslint-disable react/no-array-index-key */\nimport React, { FC, memo, ReactNode } from 'react';\nimport { Box, Typography, List } from '@material-ui/core';\nimport QuestionItem from 'components/QuestionItem';\nimport { QuestionInfo } from 'types/app-common';\nimport PageLayout from 'components/PageLayout';\nimport useStyles from './styles';\n\nexport const QuestionPageComponent: FC<QuestionPageProps> = ({\n  questions,\n  children,\n  ...props\n}) => {\n  const classes = useStyles();\n\n  return (\n    <PageLayout {...props}>\n      {children}\n      <Box className={classes.questions}>\n        <Typography variant=\"h4\">Questions</Typography>\n        <Box>\n          <List>\n            {questions.map((questionInfo, index) => (\n              <QuestionItem key={index} index={index + 1} {...questionInfo} />\n            ))}\n          </List>\n        </Box>\n      </Box>\n    </PageLayout>\n  );\n};\n\nconst QuestionPage = memo(QuestionPageComponent);\nQuestionPage.displayName = 'QuestionPage';\nexport default QuestionPage;\n\nexport interface QuestionPageProps {\n  className?: string;\n  title: string;\n  questions: QuestionInfo[];\n  children?: ReactNode;\n}\n","import { makeStyles, createStyles, Theme } from '@material-ui/core';\n\nconst styles = ({ spacing }: Theme) =>\n  createStyles({\n    root: {\n      marginTop: spacing(4),\n    },\n    content: {\n      marginTop: spacing(2.5),\n    },\n  });\n\nconst useStyles = makeStyles(styles, { classNamePrefix: 'PageLayout' });\n\nexport default useStyles;\n","import React, { FC, memo, ReactNode } from 'react';\nimport { Box, Typography } from '@material-ui/core';\nimport clsx from 'clsx';\nimport useStyles from './styles';\n\nexport const PageLayoutComponent: FC<PageLayoutProps> = ({\n  className,\n  title,\n  children,\n}) => {\n  const classes = useStyles();\n\n  return (\n    <Box className={clsx(classes.root, className)}>\n      <Typography variant=\"h3\">{title}</Typography>\n      <Box className={classes.content}>{children}</Box>\n    </Box>\n  );\n};\n\nconst PageLayout = memo(PageLayoutComponent);\nPageLayout.displayName = 'PageLayout';\nexport default PageLayout;\n\nexport interface PageLayoutProps {\n  className?: string;\n  title: string;\n  children: ReactNode;\n}\n","import { makeStyles, Theme } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  CodeViewer: {\n    '& pre': {\n      margin: '0 !important',\n      borderRadius: 6,\n    },\n\n    '&~$CodeViewer': {\n      marginTop: theme.spacing(2),\n    },\n  },\n}));\n\nexport default useStyles;\n","import React, { FC, memo } from 'react';\nimport clsx from 'clsx';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { okaidia } from 'react-syntax-highlighter/dist/esm/styles/prism';\nimport useStyles from './styles';\n\nexport const CodeViewerComponent: FC<CodeViewerProps> = ({\n  className,\n  children,\n  style = okaidia,\n  language,\n}) => {\n  const classes = useStyles();\n\n  return (\n    <div className={clsx(classes.CodeViewer, className)}>\n      <SyntaxHighlighter language={language} style={style}>\n        {children}\n      </SyntaxHighlighter>\n    </div>\n  );\n};\n\nconst CodeViewer = memo(CodeViewerComponent);\nCodeViewer.displayName = 'CodeViewer';\nexport default CodeViewer;\n\nexport interface CodeViewerProps {\n  className?: string;\n  style?: object;\n  children: string;\n  language: CodeViewerLanguage;\n}\n\nexport type CodeViewerLanguage =\n  | 'abap'\n  | 'actionscript'\n  | 'ada'\n  | 'apacheconf'\n  | 'apl'\n  | 'applescript'\n  | 'arduino'\n  | 'arff'\n  | 'asciidoc'\n  | 'asm6502'\n  | 'aspnet'\n  | 'autohotkey'\n  | 'autoit'\n  | 'bash'\n  | 'basic'\n  | 'batch'\n  | 'bison'\n  | 'brainfuck'\n  | 'bro'\n  | 'c'\n  | 'clike'\n  | 'clojure'\n  | 'coffeescript'\n  | 'cpp'\n  | 'crystal'\n  | 'csharp'\n  | 'csp'\n  | 'cssExtras'\n  | 'css-extras'\n  | 'css'\n  | 'd'\n  | 'dart'\n  | 'diff'\n  | 'django'\n  | 'docker'\n  | 'eiffel'\n  | 'elixir'\n  | 'elm'\n  | 'erb'\n  | 'erlang'\n  | 'flow'\n  | 'fortran'\n  | 'fsharp'\n  | 'gedcom'\n  | 'gherkin'\n  | 'git'\n  | 'glsl'\n  | 'go'\n  | 'graphql'\n  | 'groovy'\n  | 'haml'\n  | 'handlebars'\n  | 'haskell'\n  | 'haxe'\n  | 'hpkp'\n  | 'hsts'\n  | 'http'\n  | 'ichigojam'\n  | 'icon'\n  | 'inform7'\n  | 'ini'\n  | 'io'\n  | 'j'\n  | 'java'\n  | 'javascript'\n  | 'jolie'\n  | 'json'\n  | 'jsx'\n  | 'julia'\n  | 'keyman'\n  | 'kotlin'\n  | 'latex'\n  | 'less'\n  | 'liquid'\n  | 'lisp'\n  | 'livescript'\n  | 'lolcode'\n  | 'lua'\n  | 'makefile'\n  | 'markdown'\n  | 'markupTemplating'\n  | 'markup-templating'\n  | 'markup'\n  | 'matlab'\n  | 'mel'\n  | 'mizar'\n  | 'monkey'\n  | 'n4js'\n  | 'nasm'\n  | 'nginx'\n  | 'nim'\n  | 'nix'\n  | 'nsis'\n  | 'objectivec'\n  | 'ocaml'\n  | 'opencl'\n  | 'oz'\n  | 'parigp'\n  | 'parser'\n  | 'pascal'\n  | 'perl'\n  | 'phpExtras'\n  | 'php-extras'\n  | 'php'\n  | 'plsql'\n  | 'powershell'\n  | 'processing'\n  | 'prolog'\n  | 'properties'\n  | 'protobuf'\n  | 'pug'\n  | 'puppet'\n  | 'pure'\n  | 'python'\n  | 'q'\n  | 'qore'\n  | 'r'\n  | 'reason'\n  | 'renpy'\n  | 'rest'\n  | 'rip'\n  | 'roboconf'\n  | 'ruby'\n  | 'rust'\n  | 'sas'\n  | 'sass'\n  | 'scala'\n  | 'scheme'\n  | 'scss'\n  | 'smalltalk'\n  | 'smarty'\n  | 'soy'\n  | 'sql'\n  | 'stylus'\n  | 'swift'\n  | 'tap'\n  | 'tcl'\n  | 'textile'\n  | 'tsx'\n  | 'tt2'\n  | 'twig'\n  | 'typescript'\n  | 'vbnet'\n  | 'velocity'\n  | 'verilog'\n  | 'vhdl'\n  | 'vim'\n  | 'visualBasic'\n  | 'visual-basic'\n  | 'wasm'\n  | 'wiki'\n  | 'xeora'\n  | 'xojo'\n  | 'xquery'\n  | 'yaml';\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Form\":\"styles_Form__1rRRp\",\"InputGroup\":\"styles_InputGroup__xTjCD\",\"InputLabel\":\"styles_InputLabel__15PuE\",\"InputControl\":\"styles_InputControl__fXiDW\",\"Checkbox\":\"styles_Checkbox__2yAwd\",\"Data\":\"styles_Data__3aufO\"};","import {\n  useState,\n  ChangeEvent,\n  useCallback,\n  FormEvent,\n  cloneElement,\n  ReactElement,\n} from 'react';\nimport { get, cloneDeep, set } from 'lodash';\n\nconst useForm = <TData extends FormData>(initialData: TData) => {\n  const [data, setData] = useState(initialData);\n  const onChange = useCallback(\n    (\n      e:\n        | ChangeEvent<HTMLInputElement | HTMLSelectElement>\n        | FormEvent<HTMLFormElement>,\n    ) => {\n      const target = e.target as EventTarget & HTMLInputElement;\n\n      setData(prevData => {\n        const prevDataValue = get(prevData, target.name);\n        let nextValue: number | string | boolean;\n\n        switch (typeof prevDataValue) {\n          case 'number':\n            nextValue = Number(target.value);\n            break;\n\n          case 'string':\n            nextValue = String(target.value);\n            break;\n\n          case 'boolean':\n            nextValue = Boolean((target as HTMLInputElement).checked);\n            break;\n\n          default:\n            // eslint-disable-next-line no-console\n            console.warn(`Cannot find field with name ${target.name}`);\n            return prevData;\n        }\n\n        const nextData = cloneDeep(prevData);\n        set(nextData, target.name, nextValue);\n        return nextData;\n      });\n    },\n    [],\n  );\n\n  const getFieldDecorator = (name: string) => <TProps extends FieldProps>(\n    element: ReactElement<TProps>,\n  ) => {\n    const value = get(data, name);\n    let props: Partial<FieldProps> = {};\n\n    switch (typeof value) {\n      case 'string':\n      case 'number':\n        props = { value };\n        break;\n\n      case 'boolean':\n        props = { checked: value };\n        break;\n\n      default:\n        // eslint-disable-next-line no-console\n        console.warn(`Cannot find field with name ${name}`);\n        break;\n    }\n\n    return cloneElement<FieldProps>(element, {\n      ...props,\n      name,\n      id: name,\n      onChange,\n    });\n  };\n\n  return [data, getFieldDecorator] as const;\n};\n\nexport default useForm;\n\nexport interface FormData {\n  [k: string]: string | number | boolean | FormData;\n  [k: number]: string | number | boolean | FormData;\n}\n\nexport interface FieldProps {\n  name?: string;\n  id?: string;\n  value?: string | number;\n  checked?: boolean;\n  onChange?: (event: ChangeEvent<HTMLInputElement | HTMLSelectElement>) => void;\n}\n","import React from 'react';\nimport { QuestionInfo } from 'types/app-common';\nimport CodeViewer from 'components/CodeViewer';\n\nconst questions: QuestionInfo[] = [\n  {\n    question: (\n      <span>\n        How to change/add/remove props of an <code>ReactElement</code>?\n      </span>\n    ),\n    answer: (\n      <div>\n        <p>\n          Using <code>cloneElement()</code>\n        </p>\n        <CodeViewer language=\"tsx\">\n          {`cloneElement<FieldProps>(element, {\n  ...props,\n  name,\n  id: name,\n  onChange,\n});`}\n        </CodeViewer>\n      </div>\n    ),\n    references: [\n      {\n        name: `[React] cloneElement()`,\n        url: `https://reactjs.org/docs/react-api.html#cloneelement`,\n      },\n      {\n        name: `[Medium] Transforming Elements In React`,\n        url: `https://medium.com/javascript-inside/transforming-elements-in-react-8e411c0f1bba`,\n      },\n      {\n        name: `[Medium] How to change or add React Component properties — clone element with React.cloneElement`,\n        url: `https://medium.com/@vygandas/how-to-change-or-add-react-component-properties-clone-element-with-react-cloneelement-be060097a44a`,\n      },\n    ],\n  },\n];\n\nexport default questions;\n","import React, { FC, memo } from 'react';\nimport QuestionPage from 'components/QuestionPage';\nimport useForm from './hooks';\nimport questions from './questions';\nimport classes from './styles.module.scss';\n\nexport const Element1Component: FC = () => {\n  const [data, getFieldDecorator] = useForm({\n    name: '',\n    value: 0,\n    active: false,\n  });\n\n  return (\n    <QuestionPage title=\"Element 1\" questions={questions}>\n      <form className={classes.Form}>\n        <div className={classes.InputGroup}>\n          <label className={classes.InputLabel} htmlFor=\"name\">\n            Name\n          </label>\n          {getFieldDecorator('name')(\n            <input className={classes.InputControl} type=\"text\" />,\n          )}\n        </div>\n\n        <div className={classes.InputGroup}>\n          <label className={classes.InputLabel} htmlFor=\"value\">\n            Value\n          </label>\n          {getFieldDecorator('value')(\n            <input className={classes.InputControl} type=\"number\" />,\n          )}\n        </div>\n        <div className={classes.InputGroup}>\n          <label className={classes.Checkbox} htmlFor=\"active\">\n            {getFieldDecorator('active')(<input type=\"checkbox\" />)}\n            Active\n          </label>\n        </div>\n      </form>\n\n      <div className={classes.Data}>\n        <pre>{JSON.stringify(data, null, 2)}</pre>\n      </div>\n    </QuestionPage>\n  );\n};\n\nconst Element1 = memo(Element1Component);\nElement1.displayName = 'Element1';\nexport default Element1;\n"],"sourceRoot":""}