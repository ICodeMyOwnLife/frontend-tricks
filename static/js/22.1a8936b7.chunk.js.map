{"version":3,"sources":["components/Question/index.tsx","components/Question/styles.module.scss","questions/react/RawHtml1/questions.tsx","questions/react/RawHtml1/index.tsx","components/Code/index.tsx","components/Code/styles.module.scss"],"names":["Question","memo","title","questions","children","className","classes","Container","Title","Content","Questions","map","index","question","answer","references","key","Index","Answer","length","References","name","url","href","target","rel","displayName","module","exports","Code","language","rawHtml","RawHtml1Impl","dangerouslySetInnerHTML","__html","RawHtml1","style","okaidia","classnames"],"mappings":"0GAAA,qCA4CMA,EAAWC,gBAzC8B,SAAC,GAAD,IAC7CC,EAD6C,EAC7CA,MACAC,EAF6C,EAE7CA,UACAC,EAH6C,EAG7CA,SAH6C,OAK7C,yBAAKC,UAAWC,IAAQC,WACtB,wBAAIF,UAAWC,IAAQE,OAAQN,GAC/B,yBAAKG,UAAWC,IAAQG,SAAUL,GAClC,yBAAKC,UAAWC,IAAQI,WACtB,yCACA,6BACGP,EAAUQ,KAAI,WAAmCC,GAAnC,IAAGC,EAAH,EAAGA,SAAUC,EAAb,EAAaA,OAAQC,EAArB,EAAqBA,WAArB,OAEb,6BAASC,IAAKJ,GACZ,6BAASP,UAAWC,IAAQN,UAC1B,0BAAMK,UAAWC,IAAQW,OAAQL,EAAQ,EAAzC,KADF,IACuDC,GAGvD,yBAAKR,UAAWC,IAAQY,QAASJ,GAEhCC,GAAcA,EAAWI,QACxB,yBAAKd,UAAWC,IAAQc,YACtB,0CACA,4BACGL,EAAWJ,KAAI,gBAAGU,EAAH,EAAGA,KAAMC,EAAT,EAASA,IAAT,OACd,wBAAIN,IAAKM,GACP,uBAAGC,KAAMD,EAAKE,OAAO,SAASC,IAAI,uBAC/BJ,mBAezBrB,EAAS0B,YAAc,WACR1B,O,mBC7Cf2B,EAAOC,QAAU,CAAC,UAAY,0BAA0B,MAAQ,sBAAsB,QAAU,wBAAwB,UAAY,0BAA0B,SAAW,yBAAyB,MAAQ,sBAAsB,OAAS,uBAAuB,WAAa,6B,4ECyB9PzB,EAtBmB,CAChC,CACEU,SACE,uFACyD,IACvD,2CAFF,MAKFC,OACE,kBAACe,EAAA,EAAD,CAAMC,SAAS,OAAf,yDAIFf,WAAY,CACV,CACEM,KAAK,kCACLC,IAAI,yECpBZ,6CAKA,IAAMS,EAAO,kMAMAC,EAAmB,kBAC9B,kBAAChC,EAAA,EAAD,CAAUE,MAAM,aAAaC,UAAWA,GACtC,6BAAM4B,GACN,yBAAKE,wBAAyB,CAAEC,OAAQH,OAItCI,EAAWlC,eAAK+B,GACtBG,EAAST,YAAc,WACRS,a,gCCpBf,wEAmBMN,EAAO5B,gBAb0B,SAAC,GAAD,IACrCI,EADqC,EACrCA,UACAD,EAFqC,EAErCA,SAFqC,IAGrCgC,aAHqC,MAG7BC,IAH6B,EAIrCP,EAJqC,EAIrCA,SAJqC,OAMrC,yBAAKzB,UAAWiC,IAAWhC,IAAQuB,KAAMxB,IACvC,kBAAC,IAAD,CAAmByB,SAAUA,EAAUM,MAAOA,GAC3ChC,OAMPyB,EAAKH,YAAc,OACJG,O,mBCpBfF,EAAOC,QAAU,CAAC,KAAO","file":"static/js/22.1a8936b7.chunk.js","sourcesContent":["import React, { FC, memo, ReactNode } from 'react';\nimport classes from './styles.module.scss';\n\nexport const QuestionImpl: FC<QuestionProps> = ({\n  title,\n  questions,\n  children,\n}) => (\n  <div className={classes.Container}>\n    <h2 className={classes.Title}>{title}</h2>\n    <div className={classes.Content}>{children}</div>\n    <div className={classes.Questions}>\n      <h3>Questions</h3>\n      <div>\n        {questions.map(({ question, answer, references }, index) => (\n          // eslint-disable-next-line react/no-array-index-key\n          <details key={index}>\n            <summary className={classes.Question}>\n              <span className={classes.Index}>{index + 1}.</span> {question}\n            </summary>\n\n            <div className={classes.Answer}>{answer}</div>\n\n            {references && references.length && (\n              <div className={classes.References}>\n                <h4>References</h4>\n                <ol>\n                  {references.map(({ name, url }) => (\n                    <li key={url}>\n                      <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">\n                        {name}\n                      </a>\n                    </li>\n                  ))}\n                </ol>\n              </div>\n            )}\n          </details>\n        ))}\n      </div>\n    </div>\n  </div>\n);\n\nconst Question = memo(QuestionImpl);\nQuestion.displayName = 'Question';\nexport default Question;\n\nexport interface QuestionProps {\n  title: string;\n  questions: QuestionInfo[];\n  children?: ReactNode;\n}\n\nexport interface QuestionInfo {\n  question: ReactNode;\n  answer: ReactNode;\n  references?: ReferenceInfo[];\n}\n\nexport interface ReferenceInfo {\n  name: string;\n  url?: string;\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"styles_Container__12Mbc\",\"Title\":\"styles_Title__2qxOI\",\"Content\":\"styles_Content__2wB8J\",\"Questions\":\"styles_Questions__1t11e\",\"Question\":\"styles_Question__3wRhS\",\"Index\":\"styles_Index__1JqtT\",\"Answer\":\"styles_Answer__2snZe\",\"References\":\"styles_References__2N6Wn\"};","import React from 'react';\nimport { QuestionInfo } from 'components/Question';\nimport Code from 'components/Code';\n\nconst questions: QuestionInfo[] = [\n  {\n    question: (\n      <span>\n        How to insert raw HTML in React (equivalent to setting{' '}\n        <code>innerHTML</code>)?\n      </span>\n    ),\n    answer: (\n      <Code language=\"tsx\">\n        {`<div dangerouslySetInnerHTML={{ __html: rawHtml }} />`}\n      </Code>\n    ),\n    references: [\n      {\n        name: `[React] dangerouslySetInnerHTML`,\n        url: `https://reactjs.org/docs/dom-elements.html#dangerouslysetinnerhtml`,\n      },\n    ],\n  },\n];\n\nexport default questions;\n","/* eslint-disable react/no-danger */\nimport React, { FC, memo } from 'react';\nimport Question from 'components/Question';\nimport questions from './questions';\n\nconst rawHtml = `<ul>\n  <li><a href=\"https://google.com\">Go to Google<a/></li>\n  <li><a href=\"https://facebook.com\">Go to Facebook<a/></li>\n  <li><a href=\"https://twitter.com\">Go to Twitter<a/></li>\n</ul>`;\n\nexport const RawHtml1Impl: FC = () => (\n  <Question title=\"Raw HTML 1\" questions={questions}>\n    <div>{rawHtml}</div>\n    <div dangerouslySetInnerHTML={{ __html: rawHtml }} />\n  </Question>\n);\n\nconst RawHtml1 = memo(RawHtml1Impl);\nRawHtml1.displayName = 'RawHtml1';\nexport default RawHtml1;\n","import React, { FC, memo } from 'react';\nimport classnames from 'classnames';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { okaidia } from 'react-syntax-highlighter/dist/esm/styles/prism';\nimport classes from './styles.module.scss';\n\nexport const CodeImpl: FC<CodeProps> = ({\n  className,\n  children,\n  style = okaidia,\n  language,\n}) => (\n  <div className={classnames(classes.Code, className)}>\n    <SyntaxHighlighter language={language} style={style}>\n      {children}\n    </SyntaxHighlighter>\n  </div>\n);\n\nconst Code = memo(CodeImpl);\nCode.displayName = 'Code';\nexport default Code;\n\nexport interface CodeProps {\n  className?: string;\n  style?: object;\n  children: string;\n  language: Language;\n}\n\nexport type Language =\n  | 'abap'\n  | 'actionscript'\n  | 'ada'\n  | 'apacheconf'\n  | 'apl'\n  | 'applescript'\n  | 'arduino'\n  | 'arff'\n  | 'asciidoc'\n  | 'asm6502'\n  | 'aspnet'\n  | 'autohotkey'\n  | 'autoit'\n  | 'bash'\n  | 'basic'\n  | 'batch'\n  | 'bison'\n  | 'brainfuck'\n  | 'bro'\n  | 'c'\n  | 'clike'\n  | 'clojure'\n  | 'coffeescript'\n  | 'cpp'\n  | 'crystal'\n  | 'csharp'\n  | 'csp'\n  | 'cssExtras'\n  | 'css-extras'\n  | 'css'\n  | 'd'\n  | 'dart'\n  | 'diff'\n  | 'django'\n  | 'docker'\n  | 'eiffel'\n  | 'elixir'\n  | 'elm'\n  | 'erb'\n  | 'erlang'\n  | 'flow'\n  | 'fortran'\n  | 'fsharp'\n  | 'gedcom'\n  | 'gherkin'\n  | 'git'\n  | 'glsl'\n  | 'go'\n  | 'graphql'\n  | 'groovy'\n  | 'haml'\n  | 'handlebars'\n  | 'haskell'\n  | 'haxe'\n  | 'hpkp'\n  | 'hsts'\n  | 'http'\n  | 'ichigojam'\n  | 'icon'\n  | 'inform7'\n  | 'ini'\n  | 'io'\n  | 'j'\n  | 'java'\n  | 'javascript'\n  | 'jolie'\n  | 'json'\n  | 'jsx'\n  | 'julia'\n  | 'keyman'\n  | 'kotlin'\n  | 'latex'\n  | 'less'\n  | 'liquid'\n  | 'lisp'\n  | 'livescript'\n  | 'lolcode'\n  | 'lua'\n  | 'makefile'\n  | 'markdown'\n  | 'markupTemplating'\n  | 'markup-templating'\n  | 'markup'\n  | 'matlab'\n  | 'mel'\n  | 'mizar'\n  | 'monkey'\n  | 'n4js'\n  | 'nasm'\n  | 'nginx'\n  | 'nim'\n  | 'nix'\n  | 'nsis'\n  | 'objectivec'\n  | 'ocaml'\n  | 'opencl'\n  | 'oz'\n  | 'parigp'\n  | 'parser'\n  | 'pascal'\n  | 'perl'\n  | 'phpExtras'\n  | 'php-extras'\n  | 'php'\n  | 'plsql'\n  | 'powershell'\n  | 'processing'\n  | 'prolog'\n  | 'properties'\n  | 'protobuf'\n  | 'pug'\n  | 'puppet'\n  | 'pure'\n  | 'python'\n  | 'q'\n  | 'qore'\n  | 'r'\n  | 'reason'\n  | 'renpy'\n  | 'rest'\n  | 'rip'\n  | 'roboconf'\n  | 'ruby'\n  | 'rust'\n  | 'sas'\n  | 'sass'\n  | 'scala'\n  | 'scheme'\n  | 'scss'\n  | 'smalltalk'\n  | 'smarty'\n  | 'soy'\n  | 'sql'\n  | 'stylus'\n  | 'swift'\n  | 'tap'\n  | 'tcl'\n  | 'textile'\n  | 'tsx'\n  | 'tt2'\n  | 'twig'\n  | 'typescript'\n  | 'vbnet'\n  | 'velocity'\n  | 'verilog'\n  | 'vhdl'\n  | 'vim'\n  | 'visualBasic'\n  | 'visual-basic'\n  | 'wasm'\n  | 'wiki'\n  | 'xeora'\n  | 'xojo'\n  | 'xquery'\n  | 'yaml';\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Code\":\"styles_Code__2Axvp\"};"],"sourceRoot":""}