{"version":3,"sources":["components/QuestionItem/styles.ts","components/QuestionItem/index.tsx","components/QuestionPage/styles.ts","components/QuestionPage/index.tsx","components/Code/index.tsx","components/Code/styles.module.scss","components/Input/index.tsx","components/NumberInput/index.tsx","components/Input/styles.module.scss","questions/js/Array1/styles.module.scss","components/TextInput/index.tsx","questions/js/Array1/questions.tsx","questions/js/Array1/index.tsx"],"names":["useStyles","makeStyles","theme","Question","fontWeight","Answer","marginTop","spacing","padding","fontSize","backgroundColor","grey","border","borderRadius","margin","maxWidth","References","marginBottom","QuestionItem","memo","index","question","answer","references","classes","useToggle","open","toggleOpen","ListItem","button","onClick","ListItemText","primary","Collapse","in","timeout","Box","className","length","Typography","variant","map","name","url","key","href","target","rel","displayName","Container","Content","Questions","fontFamily","color","QuestionPage","title","questions","children","List","questionInfo","Code","style","okaidia","language","classnames","module","exports","Input","labelClassName","inputClassName","id","label","props","InputGroup","Label","htmlFor","NumberInput","type","onChange","handleChange","useCallback","e","Number","value","TextInput","Array1Impl","useState","text","setText","characters","useMemo","Array","from","setLength","fillValue","setFillValue","fillArray","fill","rangeEnd","setRangeEnd","range","_","idx","itemsString","setItemsString","uniqueArray","items","split","filter","Boolean","Set","Section","JSON","stringify","Array1"],"mappings":"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","file":"static/js/js__Array1.7133c7c9.chunk.js","sourcesContent":["import { makeStyles, Theme } from '@material-ui/core';\nimport { grey } from '@material-ui/core/colors';\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  Question: {\n    fontWeight: 500,\n  },\n  Answer: {\n    marginTop: theme.spacing(1.5),\n    padding: 0,\n    fontSize: 14,\n    backgroundColor: grey[50],\n    border: `1px solid ${grey[400]}`,\n    borderRadius: 6,\n\n    '& p': {\n      padding: theme.spacing(0, 2.5),\n    },\n\n    '& ol,ul': {\n      margin: theme.spacing(1.5, 0),\n    },\n\n    '& img': {\n      maxWidth: '100%',\n    },\n  },\n  References: {\n    margin: theme.spacing(3, 0, 0),\n\n    '& ol': {\n      marginTop: theme.spacing(1),\n    },\n\n    '& li': {\n      fontSize: 14,\n      fontWeight: 500,\n      marginBottom: theme.spacing(1),\n    },\n  },\n}));\n\nexport default useStyles;\n","import React, { FC, memo } from 'react';\nimport { QuestionInfo } from 'types/app-common';\nimport {\n  ListItem,\n  ListItemText,\n  Collapse,\n  Box,\n  Typography,\n} from '@material-ui/core';\nimport useToggle from 'hooks/useToggle';\nimport useStyles from './styles';\n\nexport const QuestionItemComponent: FC<QuestionItemProps> = ({\n  index,\n  question,\n  answer,\n  references,\n}) => {\n  const classes = useStyles();\n  const [open, toggleOpen] = useToggle(false);\n\n  return (\n    <>\n      <ListItem button onClick={toggleOpen}>\n        <ListItemText classes={{ primary: classes.Question }}>\n          {index}. {question}\n        </ListItemText>\n      </ListItem>\n      <Collapse in={open} timeout=\"auto\">\n        <Box className={classes.Answer}>{answer}</Box>\n        {!!references && references.length && (\n          <Box className={classes.References}>\n            <Typography variant=\"h4\">References</Typography>\n            <ol>\n              {references.map(({ name, url }) => (\n                <li key={url}>\n                  <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">\n                    {name}\n                  </a>\n                </li>\n              ))}\n            </ol>\n          </Box>\n        )}\n      </Collapse>\n    </>\n  );\n};\n\nconst QuestionItem = memo(QuestionItemComponent);\nQuestionItem.displayName = 'QuestionItem';\nexport default QuestionItem;\n\nexport interface QuestionItemProps extends QuestionInfo {\n  index: number;\n}\n","import { Theme, makeStyles } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  Container: {\n    marginTop: theme.spacing(4),\n  },\n  Content: {\n    marginTop: theme.spacing(2.5),\n  },\n  Questions: {\n    marginTop: theme.spacing(4),\n\n    '& code': {\n      fontFamily: `'Courier New', Courier, monospace`,\n      fontSize: 14,\n      fontWeight: 600,\n      color: `rgb(219, 104, 27)`,\n    },\n  },\n}));\n\nexport default useStyles;\n","/* eslint-disable react/no-array-index-key */\n/* eslint-disable react/jsx-props-no-spreading */\nimport React, { FC, memo, ReactNode } from 'react';\nimport { Box, Typography, List } from '@material-ui/core';\nimport QuestionItem from 'components/QuestionItem';\nimport { QuestionInfo } from 'types/app-common';\nimport useStyles from './styles';\n\nexport const QuestionPageImpl: FC<QuestionPageProps> = ({\n  title,\n  questions,\n  children,\n}) => {\n  const classes = useStyles();\n\n  return (\n    <Box className={classes.Container}>\n      <Typography variant=\"h2\">{title}</Typography>\n      <Box className={classes.Content}>{children}</Box>\n      <Box className={classes.Questions}>\n        <Typography variant=\"h3\">Questions</Typography>\n        <Box>\n          <List>\n            {questions.map((questionInfo, index) => (\n              <QuestionItem key={index} index={index + 1} {...questionInfo} />\n            ))}\n          </List>\n        </Box>\n      </Box>\n    </Box>\n  );\n};\n\nconst QuestionPage = memo(QuestionPageImpl);\nQuestionPage.displayName = 'QuestionPage';\nexport default QuestionPage;\n\nexport interface QuestionPageProps {\n  title: string;\n  questions: QuestionInfo[];\n  children?: ReactNode;\n}\n","import React, { FC, memo } from 'react';\nimport classnames from 'classnames';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { okaidia } from 'react-syntax-highlighter/dist/esm/styles/prism';\nimport classes from './styles.module.scss';\n\nexport const CodeImpl: FC<CodeProps> = ({\n  className,\n  children,\n  style = okaidia,\n  language,\n}) => (\n  <div className={classnames(classes.Code, className)}>\n    <SyntaxHighlighter language={language} style={style}>\n      {children}\n    </SyntaxHighlighter>\n  </div>\n);\n\nconst Code = memo(CodeImpl);\nCode.displayName = 'Code';\nexport default Code;\n\nexport interface CodeProps {\n  className?: string;\n  style?: object;\n  children: string;\n  language: Language;\n}\n\nexport type Language =\n  | 'abap'\n  | 'actionscript'\n  | 'ada'\n  | 'apacheconf'\n  | 'apl'\n  | 'applescript'\n  | 'arduino'\n  | 'arff'\n  | 'asciidoc'\n  | 'asm6502'\n  | 'aspnet'\n  | 'autohotkey'\n  | 'autoit'\n  | 'bash'\n  | 'basic'\n  | 'batch'\n  | 'bison'\n  | 'brainfuck'\n  | 'bro'\n  | 'c'\n  | 'clike'\n  | 'clojure'\n  | 'coffeescript'\n  | 'cpp'\n  | 'crystal'\n  | 'csharp'\n  | 'csp'\n  | 'cssExtras'\n  | 'css-extras'\n  | 'css'\n  | 'd'\n  | 'dart'\n  | 'diff'\n  | 'django'\n  | 'docker'\n  | 'eiffel'\n  | 'elixir'\n  | 'elm'\n  | 'erb'\n  | 'erlang'\n  | 'flow'\n  | 'fortran'\n  | 'fsharp'\n  | 'gedcom'\n  | 'gherkin'\n  | 'git'\n  | 'glsl'\n  | 'go'\n  | 'graphql'\n  | 'groovy'\n  | 'haml'\n  | 'handlebars'\n  | 'haskell'\n  | 'haxe'\n  | 'hpkp'\n  | 'hsts'\n  | 'http'\n  | 'ichigojam'\n  | 'icon'\n  | 'inform7'\n  | 'ini'\n  | 'io'\n  | 'j'\n  | 'java'\n  | 'javascript'\n  | 'jolie'\n  | 'json'\n  | 'jsx'\n  | 'julia'\n  | 'keyman'\n  | 'kotlin'\n  | 'latex'\n  | 'less'\n  | 'liquid'\n  | 'lisp'\n  | 'livescript'\n  | 'lolcode'\n  | 'lua'\n  | 'makefile'\n  | 'markdown'\n  | 'markupTemplating'\n  | 'markup-templating'\n  | 'markup'\n  | 'matlab'\n  | 'mel'\n  | 'mizar'\n  | 'monkey'\n  | 'n4js'\n  | 'nasm'\n  | 'nginx'\n  | 'nim'\n  | 'nix'\n  | 'nsis'\n  | 'objectivec'\n  | 'ocaml'\n  | 'opencl'\n  | 'oz'\n  | 'parigp'\n  | 'parser'\n  | 'pascal'\n  | 'perl'\n  | 'phpExtras'\n  | 'php-extras'\n  | 'php'\n  | 'plsql'\n  | 'powershell'\n  | 'processing'\n  | 'prolog'\n  | 'properties'\n  | 'protobuf'\n  | 'pug'\n  | 'puppet'\n  | 'pure'\n  | 'python'\n  | 'q'\n  | 'qore'\n  | 'r'\n  | 'reason'\n  | 'renpy'\n  | 'rest'\n  | 'rip'\n  | 'roboconf'\n  | 'ruby'\n  | 'rust'\n  | 'sas'\n  | 'sass'\n  | 'scala'\n  | 'scheme'\n  | 'scss'\n  | 'smalltalk'\n  | 'smarty'\n  | 'soy'\n  | 'sql'\n  | 'stylus'\n  | 'swift'\n  | 'tap'\n  | 'tcl'\n  | 'textile'\n  | 'tsx'\n  | 'tt2'\n  | 'twig'\n  | 'typescript'\n  | 'vbnet'\n  | 'velocity'\n  | 'verilog'\n  | 'vhdl'\n  | 'vim'\n  | 'visualBasic'\n  | 'visual-basic'\n  | 'wasm'\n  | 'wiki'\n  | 'xeora'\n  | 'xojo'\n  | 'xquery'\n  | 'yaml';\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Code\":\"styles_Code__2Axvp\"};","/* eslint-disable react/jsx-props-no-spreading */\nimport React, { FC, memo, InputHTMLAttributes, ReactNode } from 'react';\nimport classnames from 'classnames';\nimport classes from './styles.module.scss';\n\nexport const InputImpl: FC<InputProps> = ({\n  className,\n  labelClassName,\n  inputClassName,\n  id,\n  label,\n  ...props\n}) => (\n  <div className={classnames(classes.InputGroup, className)}>\n    <label className={classnames(classes.Label, labelClassName)} htmlFor={id}>\n      {label}\n    </label>\n    <input\n      className={classnames(classes.Input, inputClassName)}\n      id={id}\n      {...props}\n    />\n  </div>\n);\n\nconst Input = memo(InputImpl);\nInput.displayName = 'Input';\nexport default Input;\n\nexport interface InputProps extends InputHTMLAttributes<HTMLInputElement> {\n  labelClassName?: string;\n  inputClassName?: string;\n  label: ReactNode;\n}\n","import React, { FC, memo, ChangeEvent, useCallback } from 'react';\nimport Input, { InputProps } from 'components/Input';\n\nexport const NumberInputImpl: FC<NumberInputProps> = ({\n  type = 'number',\n  onChange,\n  ...props\n}) => {\n  const handleChange = useCallback(\n    (e: ChangeEvent<HTMLInputElement>) =>\n      onChange && onChange(Number(e.target.value)),\n    [onChange],\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return <Input type={type} onChange={handleChange} {...props} />;\n};\n\nconst NumberInput = memo(NumberInputImpl);\nNumberInput.displayName = 'NumberInput';\nexport default NumberInput;\n\nexport interface NumberInputProps\n  extends Omit<InputProps, 'onChange' | 'type'> {\n  type?: 'number' | 'range';\n  onChange?: (value: number) => void;\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"InputGroupBase\":\"styles_InputGroupBase__18W83\",\"InputGroup\":\"styles_InputGroup__1uLeo\",\"LabelBase\":\"styles_LabelBase__2_6Yt\",\"Label\":\"styles_Label__1XhjA\",\"InputBase\":\"styles_InputBase__2S20X\",\"Input\":\"styles_Input__18MvC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Section\":\"styles_Section__3KRs2\"};","import React, { FC, memo, ChangeEvent, useCallback } from 'react';\nimport Input, { InputProps } from 'components/Input';\n\nexport const TextInputImpl: FC<TextInputProps> = ({ onChange, ...props }) => {\n  const handleChange = useCallback(\n    (e: ChangeEvent<HTMLInputElement>) => onChange && onChange(e.target.value),\n    [onChange],\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return <Input onChange={handleChange} {...props} />;\n};\n\nconst TextInput = memo(TextInputImpl);\nTextInput.displayName = 'TextInput';\nexport default TextInput;\n\nexport interface TextInputProps extends Omit<InputProps, 'onChange'> {\n  onChange?: (value: string) => void;\n}\n","import { QuestionInfo } from 'types/app-common';\nimport Code from 'components/Code';\nimport React from 'react';\n\nconst questions: QuestionInfo[] = [\n  {\n    question: `How to convert a string to an array of character?`,\n    answer: <Code language=\"tsx\">Array.from(text)</Code>,\n  },\n  {\n    question: `How to fill an array with values?`,\n    answer: (\n      <div>\n        <p>\n          Use <code>Array.fill()</code> instance method\n        </p>\n        <Code language=\"tsx\">Array(length).fill(fillValue)</Code>\n\n        <p>\n          Use <code>Array.from()</code>\n        </p>\n        <Code language=\"tsx\">{`Array.from({ length }, () => fillValue)`}</Code>\n      </div>\n    ),\n  },\n  {\n    question: `How to generate range of numbers?`,\n    answer: (\n      <Code language=\"tsx\">{`Array.from({ length: rangeEnd }, (_, idx) => idx)`}</Code>\n    ),\n  },\n  {\n    question: `How to create an array of unique values?`,\n    answer: (\n      <Code language=\"tsx\">{`Array.from({ length: rangeEnd }, (_, idx) => idx)`}</Code>\n    ),\n  },\n];\n\nexport default questions;\n","import React, { FC, memo, useState, useMemo } from 'react';\nimport QuestionPage from 'components/QuestionPage';\nimport TextInput from 'components/TextInput';\nimport NumberInput from 'components/NumberInput';\nimport questions from './questions';\nimport classes from './styles.module.scss';\n\nexport const Array1Impl: FC = () => {\n  const [text, setText] = useState('abc');\n  const characters = useMemo(() => Array.from(text), [text]);\n\n  const [length, setLength] = useState(5);\n  const [fillValue, setFillValue] = useState(0);\n  const fillArray = useMemo(() => Array(length).fill(fillValue), [\n    length,\n    fillValue,\n  ]);\n\n  const [rangeEnd, setRangeEnd] = useState(5);\n  const range = useMemo(\n    () => Array.from({ length: rangeEnd }, (_, idx) => idx),\n    [rangeEnd],\n  );\n\n  const [itemsString, setItemsString] = useState('1 1 2 3 3');\n  const uniqueArray = useMemo(() => {\n    const items = itemsString\n      .split(' ')\n      .filter(Boolean)\n      .map(Number);\n    return Array.from(new Set(items));\n  }, [itemsString]);\n\n  return (\n    <QuestionPage title=\"Array 1\" questions={questions}>\n      <div className={classes.Section}>\n        <h4>Convert text to array of character</h4>\n        <TextInput label=\"Text\" value={text} onChange={setText} />\n        <pre>{JSON.stringify(characters)}</pre>\n      </div>\n\n      <div className={classes.Section}>\n        <h4>Fill an array with values</h4>\n        <NumberInput label=\"Length\" value={length} onChange={setLength} />\n        <NumberInput\n          label=\"Fill Value\"\n          value={fillValue}\n          onChange={setFillValue}\n        />\n        <pre>{JSON.stringify(fillArray)}</pre>\n      </div>\n\n      <div className={classes.Section}>\n        <h4>Generate range of numbers</h4>\n        <NumberInput\n          label=\"Range End\"\n          value={rangeEnd}\n          onChange={setRangeEnd}\n        />\n        <pre>{JSON.stringify(range)}</pre>\n      </div>\n\n      <div className={classes.Section}>\n        <h4>Create array of unique items</h4>\n        <TextInput\n          label=\"Items\"\n          value={itemsString}\n          onChange={setItemsString}\n        />\n      </div>\n      <pre>{JSON.stringify(uniqueArray)}</pre>\n    </QuestionPage>\n  );\n};\n\nconst Array1 = memo(Array1Impl);\nArray1.displayName = 'Array1';\nexport default Array1;\n"],"sourceRoot":""}