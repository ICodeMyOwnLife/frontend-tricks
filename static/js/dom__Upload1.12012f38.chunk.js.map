{"version":3,"sources":["components/QuestionItem/styles.ts","components/QuestionItem/index.tsx","components/QuestionPage/styles.ts","components/QuestionPage/index.tsx","components/Code/index.tsx","components/Code/styles.module.scss","questions/dom/Upload1/styles.ts","questions/dom/Upload1/Uploader.tsx","questions/dom/Upload1/questions.tsx","questions/dom/Upload1/hooks.ts","questions/dom/Upload1/index.tsx"],"names":["useStyles","makeStyles","theme","Question","fontWeight","Answer","marginTop","spacing","padding","fontSize","backgroundColor","grey","border","borderRadius","margin","maxWidth","References","marginBottom","QuestionItem","memo","index","question","answer","references","classes","useToggle","open","toggleOpen","ListItem","button","onClick","ListItemText","primary","Collapse","in","timeout","Box","className","length","Typography","variant","map","name","url","key","href","target","rel","displayName","Container","Content","Questions","fontFamily","color","QuestionPage","title","questions","children","List","questionInfo","Code","style","okaidia","language","classnames","module","exports","Section","UploadContainer","UploadWrapper","position","display","FileInput","textAlign","ButtonSubmit","ProgressOverlay","justifyContent","alignItems","left","top","right","bottom","opacity","ErrorText","UploaderInput","width","Uploader","fieldName","formRef","inputRef","handleSubmit","status","multiple","loading","progressPercentage","result","undefined","error","Paper","onSubmit","ref","action","method","encType","type","required","Button","size","JSON","stringify","CircularProgress","value","upload","formData","setStatus","xhr","XMLHttpRequest","addEventListener","e","lengthComputable","console","log","loaded","Math","round","total","parse","response","responseText","send","uploadFilesOnly","input","files","count","max","FormData","i","file","append","useUploadWholeForm","useRef","useState","uploadWholeFormStatus","setUploadWholeFormStatus","handleUploadWholeForm","useCallback","preventDefault","form","uploadWholeForm","current","URL_UPLOAD_SINGLE","BASE_URL","URL_UPLOAD_MULTIPLE","Upload1Component","inputSingleRef","uploadSingleStatus","setUploadSingleStatus","handleUploadSingle","a","useUploadSingle","inputMultipleRef","uploadMultipleStatus","setUploadMultipleStatus","handleUploadMultiple","useUploadMultiple","Card","CardHeader","CardContent","window","location","TextField","label","Upload1"],"mappings":"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","file":"static/js/dom__Upload1.12012f38.chunk.js","sourcesContent":["import { makeStyles, Theme } from '@material-ui/core';\nimport { grey } from '@material-ui/core/colors';\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  Question: {\n    fontWeight: 500,\n  },\n  Answer: {\n    marginTop: theme.spacing(1.5),\n    padding: 0,\n    fontSize: 14,\n    backgroundColor: grey[50],\n    border: `1px solid ${grey[400]}`,\n    borderRadius: 6,\n\n    '& p': {\n      padding: theme.spacing(0, 2.5),\n    },\n\n    '& ol,ul': {\n      margin: theme.spacing(1.5, 0),\n    },\n\n    '& img': {\n      maxWidth: '100%',\n    },\n  },\n  References: {\n    margin: theme.spacing(3, 0, 0),\n\n    '& ol': {\n      marginTop: theme.spacing(1),\n    },\n\n    '& li': {\n      fontSize: 14,\n      fontWeight: 500,\n      marginBottom: theme.spacing(1),\n    },\n  },\n}));\n\nexport default useStyles;\n","import React, { FC, memo } from 'react';\nimport { QuestionInfo } from 'types/app-common';\nimport {\n  ListItem,\n  ListItemText,\n  Collapse,\n  Box,\n  Typography,\n} from '@material-ui/core';\nimport useToggle from 'hooks/useToggle';\nimport useStyles from './styles';\n\nexport const QuestionItemComponent: FC<QuestionItemProps> = ({\n  index,\n  question,\n  answer,\n  references,\n}) => {\n  const classes = useStyles();\n  const [open, toggleOpen] = useToggle(false);\n\n  return (\n    <>\n      <ListItem button onClick={toggleOpen}>\n        <ListItemText classes={{ primary: classes.Question }}>\n          {index}. {question}\n        </ListItemText>\n      </ListItem>\n      <Collapse in={open} timeout=\"auto\">\n        <Box className={classes.Answer}>{answer}</Box>\n        {!!references && references.length && (\n          <Box className={classes.References}>\n            <Typography variant=\"h4\">References</Typography>\n            <ol>\n              {references.map(({ name, url }) => (\n                <li key={url}>\n                  <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">\n                    {name}\n                  </a>\n                </li>\n              ))}\n            </ol>\n          </Box>\n        )}\n      </Collapse>\n    </>\n  );\n};\n\nconst QuestionItem = memo(QuestionItemComponent);\nQuestionItem.displayName = 'QuestionItem';\nexport default QuestionItem;\n\nexport interface QuestionItemProps extends QuestionInfo {\n  index: number;\n}\n","import { Theme, makeStyles } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  Container: {\n    marginTop: theme.spacing(4),\n  },\n  Content: {\n    marginTop: theme.spacing(2.5),\n  },\n  Questions: {\n    marginTop: theme.spacing(4),\n\n    '& code': {\n      fontFamily: `'Courier New', Courier, monospace`,\n      fontSize: 14,\n      fontWeight: 600,\n      color: `rgb(219, 104, 27)`,\n    },\n  },\n}));\n\nexport default useStyles;\n","/* eslint-disable react/no-array-index-key */\n/* eslint-disable react/jsx-props-no-spreading */\nimport React, { FC, memo, ReactNode } from 'react';\nimport { Box, Typography, List } from '@material-ui/core';\nimport QuestionItem from 'components/QuestionItem';\nimport { QuestionInfo } from 'types/app-common';\nimport useStyles from './styles';\n\nexport const QuestionPageImpl: FC<QuestionPageProps> = ({\n  title,\n  questions,\n  children,\n}) => {\n  const classes = useStyles();\n\n  return (\n    <Box className={classes.Container}>\n      <Typography variant=\"h2\">{title}</Typography>\n      <Box className={classes.Content}>{children}</Box>\n      <Box className={classes.Questions}>\n        <Typography variant=\"h3\">Questions</Typography>\n        <Box>\n          <List>\n            {questions.map((questionInfo, index) => (\n              <QuestionItem key={index} index={index + 1} {...questionInfo} />\n            ))}\n          </List>\n        </Box>\n      </Box>\n    </Box>\n  );\n};\n\nconst QuestionPage = memo(QuestionPageImpl);\nQuestionPage.displayName = 'QuestionPage';\nexport default QuestionPage;\n\nexport interface QuestionPageProps {\n  title: string;\n  questions: QuestionInfo[];\n  children?: ReactNode;\n}\n","import React, { FC, memo } from 'react';\nimport classnames from 'classnames';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { okaidia } from 'react-syntax-highlighter/dist/esm/styles/prism';\nimport classes from './styles.module.scss';\n\nexport const CodeImpl: FC<CodeProps> = ({\n  className,\n  children,\n  style = okaidia,\n  language,\n}) => (\n  <div className={classnames(classes.Code, className)}>\n    <SyntaxHighlighter language={language} style={style}>\n      {children}\n    </SyntaxHighlighter>\n  </div>\n);\n\nconst Code = memo(CodeImpl);\nCode.displayName = 'Code';\nexport default Code;\n\nexport interface CodeProps {\n  className?: string;\n  style?: object;\n  children: string;\n  language: Language;\n}\n\nexport type Language =\n  | 'abap'\n  | 'actionscript'\n  | 'ada'\n  | 'apacheconf'\n  | 'apl'\n  | 'applescript'\n  | 'arduino'\n  | 'arff'\n  | 'asciidoc'\n  | 'asm6502'\n  | 'aspnet'\n  | 'autohotkey'\n  | 'autoit'\n  | 'bash'\n  | 'basic'\n  | 'batch'\n  | 'bison'\n  | 'brainfuck'\n  | 'bro'\n  | 'c'\n  | 'clike'\n  | 'clojure'\n  | 'coffeescript'\n  | 'cpp'\n  | 'crystal'\n  | 'csharp'\n  | 'csp'\n  | 'cssExtras'\n  | 'css-extras'\n  | 'css'\n  | 'd'\n  | 'dart'\n  | 'diff'\n  | 'django'\n  | 'docker'\n  | 'eiffel'\n  | 'elixir'\n  | 'elm'\n  | 'erb'\n  | 'erlang'\n  | 'flow'\n  | 'fortran'\n  | 'fsharp'\n  | 'gedcom'\n  | 'gherkin'\n  | 'git'\n  | 'glsl'\n  | 'go'\n  | 'graphql'\n  | 'groovy'\n  | 'haml'\n  | 'handlebars'\n  | 'haskell'\n  | 'haxe'\n  | 'hpkp'\n  | 'hsts'\n  | 'http'\n  | 'ichigojam'\n  | 'icon'\n  | 'inform7'\n  | 'ini'\n  | 'io'\n  | 'j'\n  | 'java'\n  | 'javascript'\n  | 'jolie'\n  | 'json'\n  | 'jsx'\n  | 'julia'\n  | 'keyman'\n  | 'kotlin'\n  | 'latex'\n  | 'less'\n  | 'liquid'\n  | 'lisp'\n  | 'livescript'\n  | 'lolcode'\n  | 'lua'\n  | 'makefile'\n  | 'markdown'\n  | 'markupTemplating'\n  | 'markup-templating'\n  | 'markup'\n  | 'matlab'\n  | 'mel'\n  | 'mizar'\n  | 'monkey'\n  | 'n4js'\n  | 'nasm'\n  | 'nginx'\n  | 'nim'\n  | 'nix'\n  | 'nsis'\n  | 'objectivec'\n  | 'ocaml'\n  | 'opencl'\n  | 'oz'\n  | 'parigp'\n  | 'parser'\n  | 'pascal'\n  | 'perl'\n  | 'phpExtras'\n  | 'php-extras'\n  | 'php'\n  | 'plsql'\n  | 'powershell'\n  | 'processing'\n  | 'prolog'\n  | 'properties'\n  | 'protobuf'\n  | 'pug'\n  | 'puppet'\n  | 'pure'\n  | 'python'\n  | 'q'\n  | 'qore'\n  | 'r'\n  | 'reason'\n  | 'renpy'\n  | 'rest'\n  | 'rip'\n  | 'roboconf'\n  | 'ruby'\n  | 'rust'\n  | 'sas'\n  | 'sass'\n  | 'scala'\n  | 'scheme'\n  | 'scss'\n  | 'smalltalk'\n  | 'smarty'\n  | 'soy'\n  | 'sql'\n  | 'stylus'\n  | 'swift'\n  | 'tap'\n  | 'tcl'\n  | 'textile'\n  | 'tsx'\n  | 'tt2'\n  | 'twig'\n  | 'typescript'\n  | 'vbnet'\n  | 'velocity'\n  | 'verilog'\n  | 'vhdl'\n  | 'vim'\n  | 'visualBasic'\n  | 'visual-basic'\n  | 'wasm'\n  | 'wiki'\n  | 'xeora'\n  | 'xojo'\n  | 'xquery'\n  | 'yaml';\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Code\":\"styles_Code__2Axvp\"};","import { Theme, makeStyles } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  Section: {\n    marginBottom: theme.spacing(3),\n  },\n  UploadContainer: {\n    marginBottom: theme.spacing(3),\n  },\n  UploadWrapper: {\n    position: 'relative',\n    display: 'inline-block',\n    marginTop: theme.spacing(1),\n    padding: theme.spacing(2),\n  },\n  FileInput: {\n    display: 'block',\n    fontSize: 14,\n    textAlign: 'right',\n  },\n  ButtonSubmit: {\n    marginTop: theme.spacing(2),\n  },\n  ProgressOverlay: {\n    position: 'absolute',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    left: theme.spacing(1),\n    top: theme.spacing(1),\n    right: theme.spacing(1),\n    bottom: theme.spacing(1),\n    backgroundColor: 'white',\n    opacity: 0.5,\n  },\n  ErrorText: {\n    marginTop: theme.spacing(1),\n  },\n  UploaderInput: {\n    display: 'block',\n    margin: `${theme.spacing(1)}px 0`,\n    '& .MuiInput-formControl': {\n      width: '100%',\n    },\n  },\n}));\n\nexport default useStyles;\n","import React, { FC, memo, RefObject, FormEventHandler, ReactNode } from 'react';\nimport {\n  Typography,\n  Button,\n  Box,\n  CircularProgress,\n  Paper,\n} from '@material-ui/core';\nimport useStyles from './styles';\nimport { UploadStatus } from './hooks';\n\nexport const UploaderComponent: FC<UploaderProps> = ({\n  title,\n  url,\n  fieldName,\n  formRef,\n  inputRef,\n  handleSubmit,\n  status,\n  multiple,\n  children,\n}) => {\n  const classes = useStyles();\n  const {\n    loading = false,\n    progressPercentage = 0,\n    result = undefined,\n    error = undefined,\n  } = status || {};\n\n  return (\n    <Box className={classes.UploadContainer}>\n      <Typography variant=\"h6\">{title}</Typography>\n\n      <Paper className={classes.UploadWrapper}>\n        <form\n          onSubmit={handleSubmit}\n          ref={formRef}\n          action={url}\n          method=\"POST\"\n          encType=\"multipart/form-data\"\n        >\n          <input\n            className={classes.FileInput}\n            type=\"file\"\n            name={fieldName}\n            ref={inputRef}\n            required\n            multiple={multiple}\n          />\n          {children}\n          <Button\n            className={classes.ButtonSubmit}\n            type=\"submit\"\n            variant=\"contained\"\n            color=\"default\"\n            size=\"small\"\n          >\n            Upload\n          </Button>\n          {result && <pre>{JSON.stringify(result)}</pre>}\n        </form>\n\n        {error && (\n          <Typography\n            className={classes.ErrorText}\n            color=\"error\"\n            variant=\"subtitle1\"\n          >\n            {error}\n          </Typography>\n        )}\n\n        {loading && (\n          <Box className={classes.ProgressOverlay}>\n            <CircularProgress\n              value={progressPercentage}\n              variant=\"determinate\"\n              color=\"primary\"\n            />\n          </Box>\n        )}\n      </Paper>\n    </Box>\n  );\n};\n\nconst Uploader = memo(UploaderComponent);\nUploader.displayName = 'Uploader';\nexport default Uploader;\n\nexport interface UploaderProps {\n  title: string;\n  url?: string;\n  fieldName?: string;\n  formRef?: RefObject<HTMLFormElement>;\n  inputRef?: RefObject<HTMLInputElement>;\n  handleSubmit?: FormEventHandler;\n  status?: UploadStatus;\n  multiple?: boolean;\n  children?: ReactNode;\n}\n","import React from 'react';\nimport { QuestionInfo } from 'types/app-common';\nimport Code from 'components/Code';\n\nconst questions: QuestionInfo[] = [\n  {\n    question: (\n      <span>\n        How to upload file(s) using a <code>form</code>?\n      </span>\n    ),\n    answer: (\n      <div>\n        <p>\n          Use an <code>input</code> with <code>type</code> attribute set to{' '}\n          <code>file</code> inside a <code>form</code> with <code>enctype</code>{' '}\n          attribute set to <code>multipart/form-data</code> and{' '}\n          <code>method</code> attribute set to <code>POST</code>\n        </p>\n\n        <Code language=\"markup\">\n          {`<form\n  action=\"http://127.0.0.1:1333/upload-single\"\n  method=\"POST\"\n  enctype=\"multipart/form-data\"\n>\n  <input type=\"file\" name=\"single-file\" required=\"\" />\n  <input\n    type=\"hidden\"\n    name=\"redirect\"\n    value=\"http://localhost:3000/dom/upload\"\n  />\n\n  <input\n    aria-invalid=\"false\"\n    name=\"description\"\n    required=\"\"\n    type=\"text\"\n    value=\"\"\n  />\n  <button type=\"submit\">Upload</button>\n</form>`}\n        </Code>\n      </div>\n    ),\n    references: [\n      {\n        name: `[Stack Overflow] how to upload a file to my server using html?`,\n        url: `https://stackoverflow.com/questions/5628011/how-to-upload-a-file-to-my-server-using-html`,\n      },\n      {\n        name: `[MDN] <form>`,\n        url: `https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form#attr-enctype`,\n      },\n    ],\n  },\n  {\n    question: <span>How to upload file(s) using AJAX requests?</span>,\n    answer: (\n      <div>\n        <p>\n          Create a <code>FormData</code> object and send it as body of a request\n        </p>\n        <Code language=\"typescript\">\n          {`const upload = ({\n  formData,\n  url,\n  setStatus,\n}: {\n  formData: FormData;\n  url: string;\n  setStatus: Dispatch<SetStateAction<UploadStatus>>;\n}) => {\n  const xhr = new XMLHttpRequest();\n  xhr.addEventListener(\n    'progress',\n    e => {\n      if (e.lengthComputable) {\n        console.log(e.loaded);\n        const progressPercentage = Math.round((e.loaded * 100) / e.total);\n        setStatus(status => ({ ...status, progressPercentage }));\n      }\n    },\n    false,\n  );\n  xhr.addEventListener(\n    'load',\n    () =>\n      setStatus({\n        loading: false,\n        progressPercentage: 100,\n        result: JSON.parse(xhr.response),\n      }),\n    false,\n  );\n  xhr.addEventListener('error', () => {\n    const error = xhr.responseText || 'UNKNOWN ERROR';\n    setStatus({ loading: false, error, progressPercentage: 0 });\n  });\n  xhr.open('POST', url, true);\n  xhr.timeout = 2000;\n  setStatus({ loading: true, progressPercentage: 0 });\n  xhr.send(formData);\n};\n\nexport const uploadWholeForm = ({\n  form,\n  url,\n  setStatus,\n}: {\n  form: HTMLFormElement | null | undefined;\n  url: string;\n  setStatus: Dispatch<SetStateAction<UploadStatus>>;\n}) => {\n  if (!form) return;\n\n  const formData = new FormData(form);\n  upload({ formData, url, setStatus });\n};\n\nexport const uploadFilesOnly = ({\n  input,\n  url,\n  fieldName,\n  multiple,\n  setStatus,\n}: {\n  input: HTMLInputElement | undefined | null;\n  url: string;\n  fieldName: string;\n  multiple: boolean;\n  setStatus: Dispatch<SetStateAction<UploadStatus>>;\n}) => {\n  const files = input && input.files;\n\n  if (!files) return;\n\n  const count = multiple ? files.length : Math.max(1, files.length);\n  const formData = new FormData();\n\n  for (let i = 0; i < count; ++i) {\n    const file = files[i];\n    formData.append(fieldName, file, file.name);\n  }\n\n  upload({ formData, url, setStatus });\n};`}\n        </Code>\n      </div>\n    ),\n    references: [\n      {\n        name: `Ridiculously simple Ajax uploads with FormData`,\n        url: `https://thoughtbot.com/blog/ridiculously-simple-ajax-uploads-with-formdata`,\n      },\n      {\n        name: `Uploading Files with AJAX`,\n        url: `https://blog.teamtreehouse.com/uploading-files-ajax`,\n      },\n      {\n        name: `[MDN] Uploading a user-selected file`,\n        url: `https://developer.mozilla.org/en-US/docs/Web/API/File/Using_files_from_web_applications#Example_Uploading_a_user-selected_file`,\n      },\n      {\n        name: `[MDN] FormData.append()`,\n        url: `https://developer.mozilla.org/en-US/docs/Web/API/FormData/append`,\n      },\n      {\n        name: `[MDN] XMLHttpRequest.send()`,\n        url: `https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/send`,\n      },\n    ],\n  },\n];\n\nexport default questions;\n","/* eslint-disable no-console */\nimport {\n  useCallback,\n  FormEvent,\n  useRef,\n  useState,\n  Dispatch,\n  SetStateAction,\n  FormEventHandler,\n} from 'react';\nimport { BASE_URL } from 'constants/common';\n\nconst upload = ({\n  formData,\n  url,\n  setStatus,\n}: {\n  formData: FormData;\n  url: string;\n  setStatus: Dispatch<SetStateAction<UploadStatus>>;\n}) => {\n  const xhr = new XMLHttpRequest();\n  xhr.addEventListener(\n    'progress',\n    e => {\n      if (e.lengthComputable) {\n        console.log(e.loaded);\n        const progressPercentage = Math.round((e.loaded * 100) / e.total);\n        setStatus(status => ({ ...status, progressPercentage }));\n      }\n    },\n    false,\n  );\n  xhr.addEventListener(\n    'load',\n    () =>\n      setStatus({\n        loading: false,\n        progressPercentage: 100,\n        result: JSON.parse(xhr.response),\n      }),\n    false,\n  );\n  xhr.addEventListener('error', () => {\n    const error = xhr.responseText || 'UNKNOWN ERROR';\n    setStatus({ loading: false, error, progressPercentage: 0 });\n  });\n  xhr.open('POST', url, true);\n  xhr.timeout = 2000;\n  setStatus({ loading: true, progressPercentage: 0 });\n  xhr.send(formData);\n};\n\nexport const uploadWholeForm = ({\n  form,\n  url,\n  setStatus,\n}: {\n  form: HTMLFormElement | null | undefined;\n  url: string;\n  setStatus: Dispatch<SetStateAction<UploadStatus>>;\n}) => {\n  if (!form) return;\n\n  const formData = new FormData(form);\n  upload({ formData, url, setStatus });\n};\n\nexport const uploadFilesOnly = ({\n  input,\n  url,\n  fieldName,\n  multiple,\n  setStatus,\n}: {\n  input: HTMLInputElement | undefined | null;\n  url: string;\n  fieldName: string;\n  multiple: boolean;\n  setStatus: Dispatch<SetStateAction<UploadStatus>>;\n}) => {\n  const files = input && input.files;\n\n  if (!files) return;\n\n  const count = multiple ? files.length : Math.max(1, files.length);\n  const formData = new FormData();\n\n  for (let i = 0; i < count; ++i) {\n    const file = files[i];\n    formData.append(fieldName, file, file.name);\n  }\n\n  upload({ formData, url, setStatus });\n};\n\nexport const useUploadWholeForm = ({ url }: { url: string }) => {\n  const formRef = useRef<HTMLFormElement>(null);\n  const [uploadWholeFormStatus, setUploadWholeFormStatus] = useState<\n    UploadStatus\n  >({\n    loading: false,\n    progressPercentage: 0,\n  });\n\n  const handleUploadWholeForm = useCallback<FormEventHandler>(\n    e => {\n      e.preventDefault();\n\n      uploadWholeForm({\n        form: formRef.current,\n        url,\n        setStatus: setUploadWholeFormStatus,\n      });\n    },\n    [url],\n  );\n\n  return {\n    formRef,\n    handleUploadWholeForm,\n    uploadWholeFormStatus,\n  };\n};\n\nexport const useUploadSingle = () => {\n  const inputSingleRef = useRef<HTMLInputElement>(null);\n  const [uploadSingleStatus, setUploadSingleStatus] = useState<UploadStatus>({\n    loading: false,\n    progressPercentage: 0,\n  });\n\n  const handleUploadSingle = useCallback(\n    async (e: FormEvent<HTMLFormElement>) => {\n      e.preventDefault();\n\n      uploadFilesOnly({\n        input: inputSingleRef.current,\n        url: `${BASE_URL}/upload-single`,\n        fieldName: 'single-file',\n        setStatus: setUploadSingleStatus,\n        multiple: false,\n      });\n    },\n    [],\n  );\n\n  return {\n    inputSingleRef,\n    handleUploadSingle,\n    uploadSingleStatus,\n  };\n};\n\nexport const useUploadMultiple = () => {\n  const inputMultipleRef = useRef<HTMLInputElement>(null);\n  const [uploadMultipleStatus, setUploadMultipleStatus] = useState<\n    UploadStatus\n  >({ loading: false, progressPercentage: 0 });\n\n  const handleUploadMultiple = useCallback(\n    async (e: FormEvent<HTMLFormElement>) => {\n      e.preventDefault();\n\n      uploadFilesOnly({\n        input: inputMultipleRef.current,\n        url: `${BASE_URL}/upload-multiple`,\n        fieldName: 'multiple-files',\n        setStatus: setUploadMultipleStatus,\n        multiple: true,\n      });\n    },\n    [],\n  );\n\n  return {\n    inputMultipleRef,\n    handleUploadMultiple,\n    uploadMultipleStatus,\n  };\n};\n\nexport interface UploadStatus {\n  progressPercentage: number;\n  loading: boolean;\n  result?: any;\n  error?: string;\n}\n","import React, { FC, memo } from 'react';\nimport QuestionPage from 'components/QuestionPage';\nimport { BASE_URL } from 'constants/common';\nimport { Card, CardHeader, CardContent, TextField } from '@material-ui/core';\nimport Uploader from './Uploader';\nimport questions from './questions';\nimport useStyles from './styles';\nimport {\n  useUploadSingle,\n  useUploadMultiple,\n  useUploadWholeForm,\n} from './hooks';\n\nconst URL_UPLOAD_SINGLE = `${BASE_URL}/upload-single`;\nconst URL_UPLOAD_MULTIPLE = `${BASE_URL}/upload-multiple`;\nexport const Upload1Component: FC = () => {\n  const classes = useStyles();\n\n  const {\n    handleUploadSingle,\n    inputSingleRef,\n    uploadSingleStatus,\n  } = useUploadSingle();\n\n  const {\n    handleUploadMultiple,\n    inputMultipleRef,\n    uploadMultipleStatus,\n  } = useUploadMultiple();\n\n  const {\n    handleUploadWholeForm,\n    formRef,\n    uploadWholeFormStatus,\n  } = useUploadWholeForm({ url: URL_UPLOAD_MULTIPLE });\n\n  return (\n    <QuestionPage title=\"Upload 1\" questions={questions}>\n      <Card className={classes.Section}>\n        <CardHeader title=\"Form Upload\" />\n        <CardContent>\n          <Uploader\n            title=\"Upload single\"\n            fieldName=\"single-file\"\n            url={URL_UPLOAD_SINGLE}\n          >\n            <input type=\"hidden\" name=\"redirect\" value={window.location.href} />\n            <TextField\n              className={classes.UploaderInput}\n              label=\"Description\"\n              name=\"description\"\n              required\n            />\n          </Uploader>\n\n          <Uploader\n            title=\"Upload multiple\"\n            fieldName=\"multiple-files\"\n            url={URL_UPLOAD_MULTIPLE}\n            multiple\n          >\n            <input type=\"hidden\" name=\"redirect\" value={window.location.href} />\n            <TextField\n              className={classes.UploaderInput}\n              label=\"Category\"\n              name=\"category\"\n              required\n            />\n          </Uploader>\n        </CardContent>\n      </Card>\n\n      <Card className={classes.Section}>\n        <CardHeader title=\"AJAX Upload\" />\n        <CardContent>\n          <Uploader\n            title=\"Upload single\"\n            inputRef={inputSingleRef}\n            handleSubmit={handleUploadSingle}\n            status={uploadSingleStatus}\n          />\n          <Uploader\n            title=\"Upload multiple\"\n            inputRef={inputMultipleRef}\n            handleSubmit={handleUploadMultiple}\n            status={uploadMultipleStatus}\n            multiple\n          />\n          <Uploader\n            title=\"Upload whole form\"\n            formRef={formRef}\n            fieldName=\"multiple-files\"\n            handleSubmit={handleUploadWholeForm}\n            status={uploadWholeFormStatus}\n            multiple\n          >\n            <TextField\n              className={classes.UploaderInput}\n              type=\"text\"\n              name=\"name\"\n              label=\"Name\"\n              required\n            />\n            <TextField\n              className={classes.UploaderInput}\n              type=\"number\"\n              name=\"value\"\n              label=\"Value\"\n              required\n            />\n          </Uploader>\n        </CardContent>\n      </Card>\n    </QuestionPage>\n  );\n};\n\nconst Upload1 = memo(Upload1Component);\nUpload1.displayName = 'Upload1';\nexport default Upload1;\n"],"sourceRoot":""}