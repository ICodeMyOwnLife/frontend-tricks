{"version":3,"sources":["components/References/index.tsx","components/Todos/index.tsx","components/QuestionItem/styles.ts","components/QuestionItem/index.tsx","components/QuestionPage/styles.ts","components/QuestionPage/index.tsx","components/PageLayout/styles.ts","components/PageLayout/index.tsx","components/CodeViewer/styles.ts","components/CodeViewer/index.tsx","components/Section/styles.ts","components/Section/index.tsx","../node_modules/@material-ui/core/esm/FormControl/useFormControl.js","components/InputControl/index.tsx","components/Experiment/utils.ts","components/Experiment/styles.ts","components/Experiment/index.tsx","components/InputControlLayout/index.tsx","pages/js/String1/questions.tsx","pages/js/String1/MatchAll/utils.ts","pages/js/String1/MatchAll/styles.tsx","pages/js/String1/MatchAll/index.tsx","pages/js/String1/index.tsx"],"names":["References","memo","className","references","variant","map","name","url","key","href","target","rel","displayName","Todos","todos","Box","Typography","todo","useStyles","makeStyles","theme","Question","fontWeight","HiddenContent","marginBottom","spacing","Answer","marginTop","padding","fontSize","backgroundColor","grey","border","borderRadius","margin","maxWidth","BottomBox","paddingBottom","borderBottom","BottomBoxTitle","QuestionItem","index","question","answer","classes","useToggle","open","toggleOpen","hasReferences","length","hasTodos","showBottomBox","ListItem","button","onClick","ListItemText","primary","Collapse","in","timeout","createStyles","root","questions","fontFamily","color","classNamePrefix","QuestionPage","children","props","PageLayout","List","questionInfo","content","title","clsx","CodeViewer","style","okaidia","language","Section","Title","titleVariant","titleClassName","Paper","elevation","useFormControl","React","useContext","FormControlContext","InputControl","Component","component","componentChildren","error","errorMessage","form","fullWidth","id","label","rest","componentProps","htmlFor","useHandleSubmit","handleSubmit","onSubmit","useState","result","setResult","handleSubmitForm","data","newResult","palette","display","gridTemplateColumns","gridGap","alignItems","submitButton","gridColumn","alignSelf","paddingTop","borderTopColor","borderTopWidth","borderTopStyle","whiteSpace","Experiment","Button","size","type","JSON","stringify","InputControlLayout","inputError","undefined","errors","inputErrorMessage","message","flags","string","pattern","regex","RegExp","Array","from","matchAll","matchArray","input","groups","inputGroup","MatchAll","useForm","register","Input","defaultValue","inputRef","required","multiline","String1Component","String1"],"mappings":"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","file":"static/js/js__String1.f082fffd.chunk.js","sourcesContent":["import React, { FC, memo } from 'react';\nimport { Box, Typography } from '@material-ui/core';\n\nexport const ReferencesComponent: FC<ReferencesProps> = ({\n  className,\n  references,\n}) => (\n  <Box className={className}>\n    <Typography variant=\"h5\">References</Typography>\n    <ol>\n      {references!.map(({ name, url }) => (\n        <li key={url}>\n          <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">\n            {name}\n          </a>\n        </li>\n      ))}\n    </ol>\n  </Box>\n);\n\nconst References = memo(ReferencesComponent);\nReferences.displayName = 'References';\nexport default References;\n\nexport interface ReferencesProps {\n  className?: string;\n  references: ReferenceInfo[];\n}\n\nexport interface ReferenceInfo {\n  name: string;\n  url?: string;\n}\n","import React, { FC, memo } from 'react';\nimport { Box, Typography } from '@material-ui/core';\n\nexport const TodosComponent: FC<TodosProps> = ({ className, todos }) => (\n  <Box>\n    <Typography className={className} variant=\"h5\">\n      Todos\n    </Typography>\n    <ol>\n      {todos!.map(todo => (\n        <li key={todo}>{todo}</li>\n      ))}\n    </ol>\n  </Box>\n);\n\nconst Todos = memo(TodosComponent);\nTodos.displayName = 'Todos';\nexport default Todos;\n\nexport interface TodosProps {\n  className?: string;\n  todos: string[];\n}\n","import { makeStyles, Theme } from '@material-ui/core';\nimport { grey } from '@material-ui/core/colors';\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  Question: {\n    fontWeight: 500,\n  },\n  HiddenContent: {\n    marginBottom: theme.spacing(2),\n  },\n  Answer: {\n    marginTop: theme.spacing(1.5),\n    padding: 0,\n    fontSize: 14,\n    backgroundColor: grey[50],\n    border: `1px solid ${grey[400]}`,\n    borderRadius: 6,\n\n    '& p': {\n      padding: theme.spacing(0, 2.5),\n    },\n\n    '& ol,ul': {\n      margin: theme.spacing(1.5, 0),\n    },\n\n    '& img': {\n      maxWidth: '100%',\n    },\n  },\n  BottomBox: {\n    paddingBottom: theme.spacing(2),\n    borderBottom: `1px solid ${grey[400]}`,\n\n    '& ol,ul': {\n      marginTop: theme.spacing(1),\n    },\n\n    '& li': {\n      fontSize: 14,\n      fontWeight: 500,\n      marginBottom: theme.spacing(1),\n    },\n  },\n  BottomBoxTitle: {\n    margin: theme.spacing(3, 0, 0),\n  },\n}));\n\nexport default useStyles;\n","import React, { FC, memo } from 'react';\nimport { ListItem, ListItemText, Collapse, Box } from '@material-ui/core';\nimport { useToggle } from 'cb-hooks';\nimport References from 'components/References';\nimport Todos from 'components/Todos';\nimport { QuestionInfo } from 'types/app-common';\nimport useStyles from './styles';\n\nexport const QuestionItemComponent: FC<QuestionItemProps> = ({\n  index,\n  question,\n  answer,\n  references,\n  todos,\n}) => {\n  const classes = useStyles();\n  const [open, toggleOpen] = useToggle(false);\n  const hasReferences = !!(references && references.length);\n  const hasTodos = !!(todos && todos.length);\n  const showBottomBox = hasReferences || hasTodos;\n\n  return (\n    <>\n      <ListItem button onClick={toggleOpen}>\n        <ListItemText classes={{ primary: classes.Question }}>\n          {index}. {question}\n        </ListItemText>\n      </ListItem>\n      <Collapse in={open} timeout=\"auto\">\n        <Box className={classes.HiddenContent}>\n          <Box className={classes.Answer}>{answer}</Box>\n\n          {showBottomBox && (\n            <Box className={classes.BottomBox}>\n              {hasReferences && (\n                <References\n                  className={classes.BottomBoxTitle}\n                  references={references!}\n                />\n              )}\n\n              {hasTodos && (\n                <Todos className={classes.BottomBoxTitle} todos={todos!} />\n              )}\n            </Box>\n          )}\n        </Box>\n      </Collapse>\n    </>\n  );\n};\n\nconst QuestionItem = memo(QuestionItemComponent);\nQuestionItem.displayName = 'QuestionItem';\nexport default QuestionItem;\n\nexport interface QuestionItemProps extends QuestionInfo {\n  index: number;\n}\n","import { Theme, makeStyles, createStyles } from '@material-ui/core';\n\nconst styles = ({ spacing }: Theme) =>\n  createStyles({\n    root: {},\n    questions: {\n      marginTop: spacing(4),\n      '& code': {\n        fontFamily: `'Courier New', Courier, monospace`,\n        fontSize: 14,\n        fontWeight: 600,\n        color: `rgb(219, 104, 27)`,\n      },\n    },\n  });\n\nconst useStyles = makeStyles(styles, { classNamePrefix: 'QuestionPage' });\n\nexport default useStyles;\n","/* eslint-disable react/no-array-index-key */\nimport React, { FC, memo, ReactNode } from 'react';\nimport { Box, Typography, List } from '@material-ui/core';\nimport QuestionItem from 'components/QuestionItem';\nimport { QuestionInfo } from 'types/app-common';\nimport PageLayout from 'components/PageLayout';\nimport useStyles from './styles';\n\nexport const QuestionPageComponent: FC<QuestionPageProps> = ({\n  questions,\n  children,\n  ...props\n}) => {\n  const classes = useStyles();\n\n  return (\n    <PageLayout {...props}>\n      {children}\n      <Box className={classes.questions}>\n        <Typography variant=\"h4\">Questions</Typography>\n        <Box>\n          <List>\n            {questions.map((questionInfo, index) => (\n              <QuestionItem key={index} index={index + 1} {...questionInfo} />\n            ))}\n          </List>\n        </Box>\n      </Box>\n    </PageLayout>\n  );\n};\n\nconst QuestionPage = memo(QuestionPageComponent);\nQuestionPage.displayName = 'QuestionPage';\nexport default QuestionPage;\n\nexport interface QuestionPageProps {\n  className?: string;\n  title: string;\n  questions: QuestionInfo[];\n  children?: ReactNode;\n}\n","import { makeStyles, createStyles, Theme } from '@material-ui/core';\n\nconst styles = ({ spacing }: Theme) =>\n  createStyles({\n    root: {\n      marginTop: spacing(4),\n    },\n    content: {\n      marginTop: spacing(2.5),\n    },\n  });\n\nconst useStyles = makeStyles(styles, { classNamePrefix: 'PageLayout' });\n\nexport default useStyles;\n","import React, { FC, memo, ReactNode } from 'react';\nimport { Box, Typography } from '@material-ui/core';\nimport clsx from 'clsx';\nimport useStyles from './styles';\n\nexport const PageLayoutComponent: FC<PageLayoutProps> = ({\n  className,\n  title,\n  children,\n}) => {\n  const classes = useStyles();\n\n  return (\n    <Box className={clsx(classes.root, className)}>\n      <Typography variant=\"h3\">{title}</Typography>\n      <Box className={classes.content}>{children}</Box>\n    </Box>\n  );\n};\n\nconst PageLayout = memo(PageLayoutComponent);\nPageLayout.displayName = 'PageLayout';\nexport default PageLayout;\n\nexport interface PageLayoutProps {\n  className?: string;\n  title: string;\n  children: ReactNode;\n}\n","import { makeStyles, Theme } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  CodeViewer: {\n    '& pre': {\n      margin: '0 !important',\n      borderRadius: 6,\n    },\n\n    '&~$CodeViewer': {\n      marginTop: theme.spacing(2),\n    },\n  },\n}));\n\nexport default useStyles;\n","import React, { FC, memo } from 'react';\nimport clsx from 'clsx';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { okaidia } from 'react-syntax-highlighter/dist/esm/styles/prism';\nimport useStyles from './styles';\n\nexport const CodeViewerComponent: FC<CodeViewerProps> = ({\n  className,\n  children,\n  style = okaidia,\n  language,\n}) => {\n  const classes = useStyles();\n\n  return (\n    <div className={clsx(classes.CodeViewer, className)}>\n      <SyntaxHighlighter language={language} style={style}>\n        {children}\n      </SyntaxHighlighter>\n    </div>\n  );\n};\n\nconst CodeViewer = memo(CodeViewerComponent);\nCodeViewer.displayName = 'CodeViewer';\nexport default CodeViewer;\n\nexport interface CodeViewerProps {\n  className?: string;\n  style?: object;\n  children: string;\n  language: CodeViewerLanguage;\n}\n\nexport type CodeViewerLanguage =\n  | 'abap'\n  | 'actionscript'\n  | 'ada'\n  | 'apacheconf'\n  | 'apl'\n  | 'applescript'\n  | 'arduino'\n  | 'arff'\n  | 'asciidoc'\n  | 'asm6502'\n  | 'aspnet'\n  | 'autohotkey'\n  | 'autoit'\n  | 'bash'\n  | 'basic'\n  | 'batch'\n  | 'bison'\n  | 'brainfuck'\n  | 'bro'\n  | 'c'\n  | 'clike'\n  | 'clojure'\n  | 'coffeescript'\n  | 'cpp'\n  | 'crystal'\n  | 'csharp'\n  | 'csp'\n  | 'cssExtras'\n  | 'css-extras'\n  | 'css'\n  | 'd'\n  | 'dart'\n  | 'diff'\n  | 'django'\n  | 'docker'\n  | 'eiffel'\n  | 'elixir'\n  | 'elm'\n  | 'erb'\n  | 'erlang'\n  | 'flow'\n  | 'fortran'\n  | 'fsharp'\n  | 'gedcom'\n  | 'gherkin'\n  | 'git'\n  | 'glsl'\n  | 'go'\n  | 'graphql'\n  | 'groovy'\n  | 'haml'\n  | 'handlebars'\n  | 'haskell'\n  | 'haxe'\n  | 'hpkp'\n  | 'hsts'\n  | 'http'\n  | 'ichigojam'\n  | 'icon'\n  | 'inform7'\n  | 'ini'\n  | 'io'\n  | 'j'\n  | 'java'\n  | 'javascript'\n  | 'jolie'\n  | 'json'\n  | 'jsx'\n  | 'julia'\n  | 'keyman'\n  | 'kotlin'\n  | 'latex'\n  | 'less'\n  | 'liquid'\n  | 'lisp'\n  | 'livescript'\n  | 'lolcode'\n  | 'lua'\n  | 'makefile'\n  | 'markdown'\n  | 'markupTemplating'\n  | 'markup-templating'\n  | 'markup'\n  | 'matlab'\n  | 'mel'\n  | 'mizar'\n  | 'monkey'\n  | 'n4js'\n  | 'nasm'\n  | 'nginx'\n  | 'nim'\n  | 'nix'\n  | 'nsis'\n  | 'objectivec'\n  | 'ocaml'\n  | 'opencl'\n  | 'oz'\n  | 'parigp'\n  | 'parser'\n  | 'pascal'\n  | 'perl'\n  | 'phpExtras'\n  | 'php-extras'\n  | 'php'\n  | 'plsql'\n  | 'powershell'\n  | 'processing'\n  | 'prolog'\n  | 'properties'\n  | 'protobuf'\n  | 'pug'\n  | 'puppet'\n  | 'pure'\n  | 'python'\n  | 'q'\n  | 'qore'\n  | 'r'\n  | 'reason'\n  | 'renpy'\n  | 'rest'\n  | 'rip'\n  | 'roboconf'\n  | 'ruby'\n  | 'rust'\n  | 'sas'\n  | 'sass'\n  | 'scala'\n  | 'scheme'\n  | 'scss'\n  | 'smalltalk'\n  | 'smarty'\n  | 'soy'\n  | 'sql'\n  | 'stylus'\n  | 'swift'\n  | 'tap'\n  | 'tcl'\n  | 'textile'\n  | 'tsx'\n  | 'tt2'\n  | 'twig'\n  | 'typescript'\n  | 'vbnet'\n  | 'velocity'\n  | 'verilog'\n  | 'vhdl'\n  | 'vim'\n  | 'visualBasic'\n  | 'visual-basic'\n  | 'wasm'\n  | 'wiki'\n  | 'xeora'\n  | 'xojo'\n  | 'xquery'\n  | 'yaml';\n","import { Theme, makeStyles } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  Section: {\n    marginBottom: theme.spacing(4),\n    padding: theme.spacing(3),\n  },\n  Title: {\n    marginBottom: theme.spacing(2),\n  },\n}));\n\nexport default useStyles;\n","import React, { FC, memo, ReactNode } from 'react';\nimport clsx from 'clsx';\nimport { Paper, Typography } from '@material-ui/core';\nimport { TypographyProps } from '@material-ui/core/Typography';\nimport useStyles from './styles';\n\nexport const SectionComponent: FC<SectionProps> = ({\n  className,\n  title,\n  titleVariant = 'h6',\n  titleClassName,\n  children,\n}) => {\n  const classes = useStyles();\n\n  return (\n    <Paper className={clsx(classes.Section, className)} elevation={0}>\n      <Typography\n        className={clsx(classes.Title, titleClassName)}\n        variant={titleVariant}\n      >\n        {title}\n      </Typography>\n      {children}\n    </Paper>\n  );\n};\n\nconst Section = memo(SectionComponent);\nSection.displayName = 'Section';\nexport default Section;\n\nexport interface SectionProps {\n  className?: string;\n  title: string;\n  titleVariant?: TypographyProps['variant'];\n  titleClassName?: string;\n  children?: ReactNode;\n}\n","import React from 'react';\nimport FormControlContext from './FormControlContext';\nexport default function useFormControl() {\n  return React.useContext(FormControlContext);\n}","import React, {\n  memo,\n  ReactElement,\n  ComponentType,\n  ElementType,\n  ComponentProps,\n  ReactNode,\n} from 'react';\nimport { FormContextValues, FieldError } from 'react-hook-form';\nimport { InputLabel } from '@material-ui/core';\nimport InputControlLayout from 'components/InputControlLayout';\n\nexport function InputControlComponent<\n  TName extends string,\n  TFormData extends Partial<Record<TName, unknown>>,\n  TElement extends ElementType\n>(props: InputControlProps<TName, TFormData, TElement>): ReactElement | null {\n  const {\n    children,\n    className,\n    component: Component,\n    componentChildren,\n    error,\n    errorMessage,\n    form,\n    fullWidth = true,\n    id,\n    label,\n    name,\n    ...rest\n  } = props as InputControlOwnProps<TName, TFormData, TElement>;\n  const componentProps = {\n    ...rest,\n    children: componentChildren,\n    form,\n    id,\n    name,\n  } as ComponentProps<TElement>;\n\n  return (\n    <InputControlLayout\n      className={className}\n      error={error}\n      errorMessage={errorMessage}\n      form={form}\n      name={name}\n      fullWidth={fullWidth}\n    >\n      {label && <InputLabel htmlFor={id}>{label}</InputLabel>}\n      <Component {...componentProps} />\n      {children}\n    </InputControlLayout>\n  );\n}\n\nconst InputControl = memo(\n  InputControlComponent,\n) as typeof InputControlComponent & ComponentType<any>;\nInputControl.displayName = 'InputControl';\nexport default InputControl;\n\ninterface InputControlOwnProps<\n  TName extends string,\n  TFormData extends Partial<Record<TName, unknown>>,\n  TElement extends ElementType\n> {\n  children?: ReactNode;\n  className?: string;\n  component: TElement;\n  componentChildren?: ReactNode;\n  error?: FieldError;\n  errorMessage?: ReactNode;\n  form: FormContextValues<TFormData>;\n  fullWidth?: boolean;\n  id?: string;\n  label?: ReactNode;\n  name: TName;\n}\n\nexport type InputControlProps<\n  TName extends string,\n  TFormData extends Partial<Record<TName, unknown>>,\n  TElement extends ElementType\n> = InputControlOwnProps<TName, TFormData, TElement> &\n  Omit<\n    ComponentProps<TElement>,\n    keyof InputControlOwnProps<TName, TFormData, TElement>\n  >;\n","import { FormContextValues } from 'react-hook-form';\nimport { useState } from 'react';\n\nexport const useHandleSubmit = <TFormData>({\n  form: { handleSubmit },\n  onSubmit,\n}: {\n  form: FormContextValues<TFormData>;\n  onSubmit: OnSubmit<TFormData>;\n}) => {\n  const [result, setResult] = useState<unknown>();\n  const handleSubmitForm = handleSubmit(data => {\n    const newResult = onSubmit(data);\n    return setResult(newResult);\n  });\n  return { result, handleSubmitForm };\n};\n\nexport type OnSubmit<TFormData> = (data: TFormData) => unknown;\n","import { makeStyles, createStyles, Theme } from '@material-ui/core';\n\nconst styles = ({ palette, spacing }: Theme) =>\n  createStyles({\n    root: {},\n    form: {\n      display: 'grid',\n      gridTemplateColumns: 'repeat(3, 1fr)',\n      gridGap: spacing(3, 6),\n      alignItems: 'flex-start',\n    },\n    submitButton: {\n      gridColumn: -2,\n      alignSelf: 'flex-end',\n    },\n    result: {\n      marginTop: spacing(4),\n      paddingTop: spacing(2),\n      fontFamily: 'monospace',\n      borderTopColor: palette.grey[500],\n      borderTopWidth: 1,\n      borderTopStyle: 'solid',\n      whiteSpace: 'pre',\n    },\n  });\n\nconst useStyles = makeStyles(styles, { classNamePrefix: 'IntlLayout' });\n\nexport default useStyles;\n","import React, { memo, ReactElement, ComponentType, ReactNode } from 'react';\nimport { FormContextValues } from 'react-hook-form';\nimport { Box, Button, Typography } from '@material-ui/core';\nimport clsx from 'clsx';\nimport { useHandleSubmit, OnSubmit } from './utils';\nimport useStyles from './styles';\n\nexport function ExperimentComponent<TFormData>({\n  children,\n  className,\n  form,\n  onSubmit,\n}: ExperimentProps<TFormData>): ReactElement | null {\n  const classes = useStyles();\n  const { result, handleSubmitForm } = useHandleSubmit({ form, onSubmit });\n\n  return (\n    <Box className={clsx(classes.root, className)}>\n      <form className={classes.form} onSubmit={handleSubmitForm}>\n        {children}\n        <Button\n          className={classes.submitButton}\n          color=\"default\"\n          fullWidth\n          size=\"large\"\n          type=\"submit\"\n          variant=\"contained\"\n        >\n          Apply\n        </Button>\n      </form>\n      {!!result && (\n        <Typography\n          className={classes.result}\n          color=\"textPrimary\"\n          variant=\"subtitle2\"\n        >\n          {JSON.stringify(result, null, 2)}\n        </Typography>\n      )}\n    </Box>\n  );\n}\n\nconst Experiment = memo(ExperimentComponent) as typeof ExperimentComponent &\n  ComponentType<any>;\nExperiment.displayName = 'Experiment';\nexport default Experiment;\n\nexport interface ExperimentProps<TFormData> {\n  children?: ReactNode;\n  className?: string;\n  form: FormContextValues<TFormData>;\n  onSubmit: OnSubmit<TFormData>;\n}\n","import React, { memo, ReactElement, ComponentType, ReactNode } from 'react';\nimport { FieldError, FormContextValues } from 'react-hook-form';\nimport {\n  FormControl,\n  FormControlProps,\n  FormHelperText,\n} from '@material-ui/core';\n\nexport function InputControlLayoutComponent<\n  TName extends string,\n  TFormData extends Partial<Record<TName, unknown>>\n>({\n  children,\n  error,\n  errorMessage,\n  form,\n  name,\n  ...props\n}: InputControlLayoutProps<TName, TFormData>): ReactElement | null {\n  const inputError =\n    !!form && name !== undefined ? (form.errors[name] as FieldError) : error;\n  const inputErrorMessage = errorMessage || inputError?.message;\n\n  return (\n    <FormControl {...props} error={!!inputError}>\n      {children}\n      {inputError && <FormHelperText>{inputErrorMessage}</FormHelperText>}\n    </FormControl>\n  );\n}\n\nconst InputControlLayout = memo(\n  InputControlLayoutComponent,\n) as typeof InputControlLayoutComponent & ComponentType<any>;\nInputControlLayout.displayName = 'InputControlLayout';\nexport default InputControlLayout;\n\nexport interface InputControlLayoutProps<\n  TName extends string,\n  TFormData extends Partial<Record<TName, unknown>>\n> extends OmitFrom<FormControlProps, 'error'> {\n  error?: FieldError;\n  errorMessage?: ReactNode;\n  form: FormContextValues<TFormData>;\n  name: TName;\n}\n","import React from 'react';\nimport { QuestionInfo } from 'types/app-common';\nimport CodeViewer from 'components/CodeViewer';\n\nconst questions: QuestionInfo[] = [\n  {\n    question: `How to get all of the capturing groups for all regex matches?`,\n    answer: (\n      <div>\n        <p>\n          Use <code>String.prototype.matchAll</code>\n        </p>\n        <CodeViewer language=\"typescript\">\n          {`const regex = new RegExp(pattern, flags);\nreturn Array.from(string.matchAll(regex)).map<MatchResult>(matchArray => {\n  const { index, input, groups } = matchArray;\n  return { matchArray, index, input, groups };\n});`}\n        </CodeViewer>\n      </div>\n    ),\n    references: [\n      {\n        name: `[MDN] String.prototype.matchAll()`,\n        url: `https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/matchAll`,\n      },\n      {\n        name: `[developers.google.com] Better match results with String.prototype.matchAll()`,\n        url: `https://developers.google.com/web/updates/2019/02/string-matchall`,\n      },\n    ],\n  },\n];\n\nexport default questions;\n","import { OnSubmit } from 'components/Experiment/utils';\n\nexport const handleSubmit: OnSubmit<MatchAllFormData> = ({\n  flags,\n  string,\n  pattern,\n}) => {\n  const regex = new RegExp(pattern, flags);\n  return Array.from(string.matchAll(regex)).map<MatchResult>(matchArray => {\n    const { index, input, groups } = matchArray;\n    return { matchArray, index, input, groups };\n  });\n};\n\nexport interface MatchAllFormData {\n  flags?: string;\n  string: string;\n  pattern: string;\n}\n\ninterface MatchResult {\n  matchArray: RegExpMatchArray;\n  index: number | undefined;\n  input: string | undefined;\n  groups: Record<string, string> | undefined;\n}\n","import { makeStyles, createStyles } from '@material-ui/core';\n\nconst styles = () =>\n  createStyles({\n    root: {},\n    inputGroup: { gridColumn: 'span 3' },\n  });\n\nconst useStyles = makeStyles(styles, { classNamePrefix: 'MatchAll' });\n\nexport default useStyles;\n","import React, { FC, memo } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { Input } from '@material-ui/core';\nimport Experiment from 'components/Experiment';\nimport InputControl from 'components/InputControl';\nimport { MatchAllFormData, handleSubmit } from './utils';\nimport useStyles from './styles';\n\nconst defaultString = `2019-12-31\n2020-01-01`;\n\nexport const MatchAllComponent: FC = () => {\n  const classes = useStyles();\n  const form = useForm<MatchAllFormData>();\n  const { register } = form;\n\n  return (\n    <Experiment className={classes.root} form={form} onSubmit={handleSubmit}>\n      <InputControl\n        className={classes.inputGroup}\n        component={Input}\n        defaultValue={defaultString}\n        form={form}\n        inputRef={register({ required: 'Required' })}\n        label=\"String\"\n        multiline\n        name=\"string\"\n      />\n      <InputControl\n        component={Input}\n        defaultValue=\"(?<year>\\d{4})-(?<month>\\d{1,2})-(?<day>\\d{1,2})\"\n        form={form}\n        inputRef={register({ required: 'Required' })}\n        label=\"Pattern\"\n        name=\"pattern\"\n      />\n      <InputControl\n        component={Input}\n        defaultValue=\"g\"\n        form={form}\n        inputRef={register}\n        label=\"Flags\"\n        name=\"flags\"\n      />\n    </Experiment>\n  );\n};\n\nconst MatchAll = memo(MatchAllComponent);\nMatchAll.displayName = 'MatchAll';\nexport default MatchAll;\n","import React, { FC, memo } from 'react';\nimport QuestionPage from 'components/QuestionPage';\nimport Section from 'components/Section';\nimport questions from './questions';\nimport MatchAll from './MatchAll';\n\nexport const String1Component: FC = () => (\n  <QuestionPage title=\"String 1\" questions={questions}>\n    <Section title=\"Match All\">\n      <MatchAll />\n    </Section>\n  </QuestionPage>\n);\n\nconst String1 = memo(String1Component);\nString1.displayName = 'String1';\nexport default String1;\n"],"sourceRoot":""}