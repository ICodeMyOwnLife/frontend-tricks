{"version":3,"sources":["components/QuestionItem/styles.ts","components/QuestionItem/index.tsx","components/QuestionPage/styles.ts","components/QuestionPage/index.tsx","questions/css/Newline1/questions.tsx","questions/css/Newline1/index.tsx"],"names":["useStyles","makeStyles","theme","Question","fontWeight","Answer","marginTop","spacing","padding","fontSize","backgroundColor","grey","border","borderRadius","margin","maxWidth","References","marginBottom","QuestionItem","memo","index","question","answer","references","classes","useToggle","open","toggleOpen","ListItem","button","onClick","ListItemText","primary","Collapse","in","timeout","Box","className","length","Typography","variant","map","name","url","key","href","target","rel","displayName","Container","Content","Questions","fontFamily","color","QuestionPage","title","questions","children","List","questionInfo","text","whiteSpaceStyleValues","NewlineImpl","useState","whitespaceStyleValue","setWhitespaceStyleValue","value","onChange","e","style","whiteSpace","Newline"],"mappings":"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","file":"static/js/css__Newline1.c9ebce36.chunk.js","sourcesContent":["import { makeStyles, Theme } from '@material-ui/core';\nimport { grey } from '@material-ui/core/colors';\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  Question: {\n    fontWeight: 500,\n  },\n  Answer: {\n    marginTop: theme.spacing(1.5),\n    padding: 0,\n    fontSize: 14,\n    backgroundColor: grey[50],\n    border: `1px solid ${grey[400]}`,\n    borderRadius: 6,\n\n    '& p': {\n      padding: theme.spacing(0, 2.5),\n    },\n\n    '& ol,ul': {\n      margin: theme.spacing(1.5, 0),\n    },\n\n    '& img': {\n      maxWidth: '100%',\n    },\n  },\n  References: {\n    margin: theme.spacing(3, 0, 0),\n\n    '& ol': {\n      marginTop: theme.spacing(1),\n    },\n\n    '& li': {\n      fontSize: 14,\n      fontWeight: 500,\n      marginBottom: theme.spacing(1),\n    },\n  },\n}));\n\nexport default useStyles;\n","import React, { FC, memo } from 'react';\nimport { QuestionInfo } from 'types/app-common';\nimport {\n  ListItem,\n  ListItemText,\n  Collapse,\n  Box,\n  Typography,\n} from '@material-ui/core';\nimport useToggle from 'hooks/useToggle';\nimport useStyles from './styles';\n\nexport const QuestionItemComponent: FC<QuestionItemProps> = ({\n  index,\n  question,\n  answer,\n  references,\n}) => {\n  const classes = useStyles();\n  const [open, toggleOpen] = useToggle(false);\n\n  return (\n    <>\n      <ListItem button onClick={toggleOpen}>\n        <ListItemText classes={{ primary: classes.Question }}>\n          {index}. {question}\n        </ListItemText>\n      </ListItem>\n      <Collapse in={open} timeout=\"auto\">\n        <Box className={classes.Answer}>{answer}</Box>\n        {!!references && references.length && (\n          <Box className={classes.References}>\n            <Typography variant=\"h4\">References</Typography>\n            <ol>\n              {references.map(({ name, url }) => (\n                <li key={url}>\n                  <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">\n                    {name}\n                  </a>\n                </li>\n              ))}\n            </ol>\n          </Box>\n        )}\n      </Collapse>\n    </>\n  );\n};\n\nconst QuestionItem = memo(QuestionItemComponent);\nQuestionItem.displayName = 'QuestionItem';\nexport default QuestionItem;\n\nexport interface QuestionItemProps extends QuestionInfo {\n  index: number;\n}\n","import { Theme, makeStyles } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  Container: {\n    marginTop: theme.spacing(4),\n  },\n  Content: {\n    marginTop: theme.spacing(2.5),\n  },\n  Questions: {\n    marginTop: theme.spacing(4),\n\n    '& code': {\n      fontFamily: `'Courier New', Courier, monospace`,\n      fontSize: 14,\n      fontWeight: 600,\n      color: `rgb(219, 104, 27)`,\n    },\n  },\n}));\n\nexport default useStyles;\n","/* eslint-disable react/no-array-index-key */\n/* eslint-disable react/jsx-props-no-spreading */\nimport React, { FC, memo, ReactNode } from 'react';\nimport { Box, Typography, List } from '@material-ui/core';\nimport QuestionItem from 'components/QuestionItem';\nimport { QuestionInfo } from 'types/app-common';\nimport useStyles from './styles';\n\nexport const QuestionPageImpl: FC<QuestionPageProps> = ({\n  title,\n  questions,\n  children,\n}) => {\n  const classes = useStyles();\n\n  return (\n    <Box className={classes.Container}>\n      <Typography variant=\"h2\">{title}</Typography>\n      <Box className={classes.Content}>{children}</Box>\n      <Box className={classes.Questions}>\n        <Typography variant=\"h3\">Questions</Typography>\n        <Box>\n          <List>\n            {questions.map((questionInfo, index) => (\n              <QuestionItem key={index} index={index + 1} {...questionInfo} />\n            ))}\n          </List>\n        </Box>\n      </Box>\n    </Box>\n  );\n};\n\nconst QuestionPage = memo(QuestionPageImpl);\nQuestionPage.displayName = 'QuestionPage';\nexport default QuestionPage;\n\nexport interface QuestionPageProps {\n  title: string;\n  questions: QuestionInfo[];\n  children?: ReactNode;\n}\n","import React from 'react';\nimport { QuestionInfo } from 'types/app-common';\n\nconst questions: QuestionInfo[] = [\n  {\n    question: (\n      <span>\n        How to wrap text at a newline (<code>\\n</code>) character?\n      </span>\n    ),\n    answer: (\n      <ol>\n        <li>\n          Using <code>white-space: pre</code>, or{' '}\n          <code>white-space: pre-line</code>, or{' '}\n          <code>white-space: pre-wrap</code>.\n        </li>\n        <li>\n          Using a <code>pre</code> element.\n        </li>\n      </ol>\n    ),\n    references: [\n      {\n        name: '[CSS-TRICKS] white-space',\n        url: 'https://css-tricks.com/almanac/properties/w/whitespace/',\n      },\n      {\n        name: '[MDN] white-space',\n        url: 'https://developer.mozilla.org/en-US/docs/Web/CSS/white-space',\n      },\n    ],\n  },\n];\n\nexport default questions;\n","import React, { FC, memo, useState, CSSProperties } from 'react';\nimport QuestionPage from 'components/QuestionPage';\nimport questions from './questions';\n\nconst text = `This is first paragraph.\\nThis is second paragraph.\\nThis is third paragraph.`;\n\nconst whiteSpaceStyleValues: WhiteSpaceStyleValue[] = [\n  'inherit',\n  'initial',\n  'normal',\n  'nowrap',\n  'pre',\n  'pre-line',\n  'pre-wrap',\n  'revert',\n];\n\nexport const NewlineImpl: FC = () => {\n  const [whitespaceStyleValue, setWhitespaceStyleValue] = useState(\n    whiteSpaceStyleValues[0],\n  );\n\n  return (\n    <QuestionPage title=\"Newline 1\" questions={questions}>\n      <div>\n        <div>\n          <select\n            value={whitespaceStyleValue}\n            onChange={e =>\n              setWhitespaceStyleValue(e.target.value as WhiteSpaceStyleValue)\n            }\n          >\n            {whiteSpaceStyleValues.map(value => (\n              <option key={value} value={value}>\n                {value}\n              </option>\n            ))}\n          </select>\n        </div>\n        <p style={{ whiteSpace: whitespaceStyleValue }}>{text}</p>\n        <pre>{text}</pre>\n      </div>\n    </QuestionPage>\n  );\n};\n\nconst Newline = memo(NewlineImpl);\nNewline.displayName = 'Newline';\nexport default Newline;\n\ntype WhiteSpaceStyleValue = CSSProperties['whiteSpace'];\n"],"sourceRoot":""}