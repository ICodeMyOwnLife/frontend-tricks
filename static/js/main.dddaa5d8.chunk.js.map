{"version":3,"sources":["helpers/routes.tsx","components/Nav/index.tsx","components/Nav/styles.module.scss","App.module.scss","App.tsx","serviceWorker.ts","index.tsx"],"names":["renderLinks","url","routes","map","name","path","key","to","renderRoutes","fallback","className","component","exact","Nav","memo","baseUrl","classes","displayName","module","exports","lazy","theme","createMuiTheme","App","CssBaseline","ThemeProvider","basename","process","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yGAAA,uGAQaA,EAAc,SAACC,EAAaC,GAAd,OACzBA,EAAOC,KAAI,gBAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,KAAT,OACT,kBAAC,IAAD,CAASC,IAAKF,EAAMG,GAAE,UAAKN,EAAL,YAAYI,IAC/BD,OAIMI,EAAe,SAACP,EAAaC,GAAd,OAC1B,kBAAC,WAAD,CAAUO,SAAU,uBAAGC,UAAU,QAAb,eACjBR,EAAOC,KAAI,gBAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,KAAMM,EAAf,EAAeA,UAAWC,EAA1B,EAA0BA,MAA1B,OACV,kBAAC,IAAD,CACEN,IAAKF,EACLC,KAAI,UAAKJ,EAAL,YAAYI,GAChBM,UAAWA,EACXC,MAAOA,U,gCCtBf,6CAQMC,EAAMC,gBAJyB,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASb,EAAZ,EAAYA,OAAZ,OACnC,yBAAKQ,UAAWM,IAAQH,KAAMb,YAAYe,EAASb,OAIrDW,EAAII,YAAc,MACHJ,O,mBCTfK,EAAOC,QAAU,CAAC,IAAM,sB,mBCAxBD,EAAOC,QAAU,CAAC,IAAM,mB,sMCOlBjB,EAAsB,CAC1B,CACEE,KAAM,MACNC,KAAM,MACNM,UAAWS,gBAAK,kBAAM,mCAExB,CACEhB,KAAM,MACNC,KAAM,MACNM,UAAWS,gBAAK,kBAAM,mCAExB,CACEhB,KAAM,QACNC,KAAM,QACNM,UAAWS,gBAAK,kBAAM,mCAExB,CACEhB,KAAM,aACNC,KAAM,KACNM,UAAWS,gBAAK,kBAAM,mCAExB,CACEhB,KAAM,QACNC,KAAM,QACNM,UAAWS,gBAAK,kBAAM,mCAExB,CACEhB,KAAM,MACNC,KAAM,MACNM,UAAWS,gBAAK,kBAAM,mCAExB,CACEhB,KAAM,cACNC,KAAM,cACNM,UAAWS,gBAAK,kBAAM,oCAIpBC,EAAQC,YAAe,IAcdC,EAZO,kBACpB,yBAAKb,UAAWM,IAAQO,KACtB,kBAACC,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,CAAeJ,MAAOA,GACpB,kBAAC,IAAD,CAAeK,SAAUC,oBACvB,kBAACd,EAAA,EAAD,CAAKE,QAAQ,GAAGb,OAAQA,IACvBM,YAAa,GAAIN,OC1CN0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,kBCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDiI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.dddaa5d8.chunk.js","sourcesContent":["import React, { ComponentType, Suspense } from 'react';\nimport {\n  RouteComponentProps,\n  NavLink,\n  Route,\n  RouteProps,\n} from 'react-router-dom';\n\nexport const renderLinks = (url: string, routes: RouteInfo[]) =>\n  routes.map(({ name, path }) => (\n    <NavLink key={name} to={`${url}/${path}`}>\n      {name}\n    </NavLink>\n  ));\n\nexport const renderRoutes = (url: string, routes: RouteInfo[]) => (\n  <Suspense fallback={<p className=\"mt-5\">Loading...</p>}>\n    {routes.map(({ name, path, component, exact }) => (\n      <Route<RouteProps>\n        key={name}\n        path={`${url}/${path}`}\n        component={component}\n        exact={exact}\n      />\n    ))}\n  </Suspense>\n);\n\nexport interface RouteInfo {\n  name: string;\n  path: string;\n  component: ComponentType<RouteComponentProps>;\n  exact?: boolean;\n}\n","import React, { FC, memo } from 'react';\nimport { RouteInfo, renderLinks } from 'helpers/routes';\nimport classes from './styles.module.scss';\n\nexport const NavImpl: FC<NavProps> = ({ baseUrl, routes }) => (\n  <nav className={classes.Nav}>{renderLinks(baseUrl, routes)}</nav>\n);\n\nconst Nav = memo(NavImpl);\nNav.displayName = 'Nav';\nexport default Nav;\n\nexport interface NavProps {\n  baseUrl: string;\n  routes: RouteInfo[];\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Nav\":\"styles_Nav__1SRxW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__15LM-\"};","import React, { lazy } from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport { createMuiTheme, CssBaseline } from '@material-ui/core';\nimport { ThemeProvider } from '@material-ui/styles';\nimport Nav from 'components/Nav';\nimport { RouteInfo, renderRoutes } from 'helpers/routes';\nimport classes from './App.module.scss';\n\nconst routes: RouteInfo[] = [\n  {\n    name: 'DOM',\n    path: 'dom',\n    component: lazy(() => import('questions/dom')),\n  },\n  {\n    name: 'CSS',\n    path: 'css',\n    component: lazy(() => import('questions/css')),\n  },\n  {\n    name: 'React',\n    path: 'react',\n    component: lazy(() => import('questions/react')),\n  },\n  {\n    name: 'JavaScript',\n    path: 'js',\n    component: lazy(() => import('questions/js')),\n  },\n  {\n    name: 'CI/CD',\n    path: 'ci-cd',\n    component: lazy(() => import('questions/ci_cd')),\n  },\n  {\n    name: 'Git',\n    path: 'git',\n    component: lazy(() => import('questions/git')),\n  },\n  {\n    name: 'Performance',\n    path: 'performance',\n    component: lazy(() => import('questions/performance')),\n  },\n];\n\nconst theme = createMuiTheme({});\n\nconst App: React.FC = () => (\n  <div className={classes.App}>\n    <CssBaseline />\n    <ThemeProvider theme={theme}>\n      <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <Nav baseUrl=\"\" routes={routes} />\n        {renderRoutes('', routes)}\n      </BrowserRouter>\n    </ThemeProvider>\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'typeface-roboto';\nimport 'material-design-icons/iconfont/material-icons.css';\nimport './index.scss';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}