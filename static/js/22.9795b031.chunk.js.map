{"version":3,"sources":["components/Question/index.tsx","components/Question/styles.module.scss","questions/react/TypeScript1/questions.tsx","questions/react/TypeScript1/index.tsx","components/Code/index.tsx","components/Code/styles.module.scss"],"names":["Question","memo","title","questions","children","className","classes","Container","Title","Content","Questions","map","index","question","answer","references","key","Index","Answer","length","References","name","url","href","target","rel","displayName","module","exports","Code","language","TypeScript1Component","TypeScript1","style","okaidia","classnames"],"mappings":"0GAAA,qCA4CMA,EAAWC,gBAzC8B,SAAC,GAAD,IAC7CC,EAD6C,EAC7CA,MACAC,EAF6C,EAE7CA,UACAC,EAH6C,EAG7CA,SAH6C,OAK7C,yBAAKC,UAAWC,IAAQC,WACtB,wBAAIF,UAAWC,IAAQE,OAAQN,GAC/B,yBAAKG,UAAWC,IAAQG,SAAUL,GAClC,yBAAKC,UAAWC,IAAQI,WACtB,yCACA,6BACGP,EAAUQ,KAAI,WAAmCC,GAAnC,IAAGC,EAAH,EAAGA,SAAUC,EAAb,EAAaA,OAAQC,EAArB,EAAqBA,WAArB,OAEb,6BAASC,IAAKJ,GACZ,6BAASP,UAAWC,IAAQN,UAC1B,0BAAMK,UAAWC,IAAQW,OAAQL,EAAQ,EAAzC,KADF,IACuDC,GAGvD,yBAAKR,UAAWC,IAAQY,QAASJ,GAEhCC,GAAcA,EAAWI,QACxB,yBAAKd,UAAWC,IAAQc,YACtB,0CACA,4BACGL,EAAWJ,KAAI,gBAAGU,EAAH,EAAGA,KAAMC,EAAT,EAASA,IAAT,OACd,wBAAIN,IAAKM,GACP,uBAAGC,KAAMD,EAAKE,OAAO,SAASC,IAAI,uBAC/BJ,mBAezBrB,EAAS0B,YAAc,WACR1B,O,mBC7Cf2B,EAAOC,QAAU,CAAC,UAAY,0BAA0B,MAAQ,sBAAsB,QAAU,wBAAwB,UAAY,0BAA0B,SAAW,yBAAyB,MAAQ,sBAAsB,OAAS,uBAAuB,WAAa,6B,4ECiN9PzB,EA9MmB,CAChC,CACEU,SAAS,sDACTC,OACE,kBAACe,EAAA,EAAD,CAAMC,SAAS,QAAf,4CAGJ,CACEjB,SAAS,8CACTC,OACE,6BACE,sCACU,4CADV,yBAIA,kBAACe,EAAA,EAAD,CAAMC,SAAS,QAAf,6EAKA,kCACM,+CADN,kCAIA,kBAACD,EAAA,EAAD,CAAMC,SAAS,QAAf,whBAwBA,qCACS,oCADT,eACoC,oCADpC,QACwD,qCAAiB,IADzE,cAEa,uCAIjBf,WAAY,CACV,CACEM,KAAK,uCACLC,IAAI,yDAIV,CACET,SAAU,iDACVC,OACE,6BACE,sCACU,0CADV,QACoC,wCADpC,4CAKA,kBAACe,EAAA,EAAD,CAAMC,SAAS,QAAf,wQAQA,kCACM,2CADN,kCAIA,kBAACD,EAAA,EAAD,CAAMC,SAAS,QAAf,yrDAuEA,kCACM,6CADN,kCAIA,kBAACD,EAAA,EAAD,CAAMC,SAAS,QAAf,mDAEA,4CACgB,wDAGhB,kBAACD,EAAA,EAAD,CAAMC,SAAS,QAAf,kgBA0BJf,WAAY,CACV,CACEM,KAAK,0DACLC,IAAI,0FAEN,CACED,KAAK,yEACLC,IAAI,gGAEN,CACED,KAAK,iEACLC,IAAI,0FC5MZ,qDAIO,IAAMS,EAA2B,kBACtC,kBAAC/B,EAAA,EAAD,CAAUE,MAAM,eAAeC,UAAWA,KAGtC6B,EAAc/B,eAAK8B,GACVC,a,gCCTf,wEAmBMH,EAAO5B,gBAb0B,SAAC,GAAD,IACrCI,EADqC,EACrCA,UACAD,EAFqC,EAErCA,SAFqC,IAGrC6B,aAHqC,MAG7BC,IAH6B,EAIrCJ,EAJqC,EAIrCA,SAJqC,OAMrC,yBAAKzB,UAAW8B,IAAW7B,IAAQuB,KAAMxB,IACvC,kBAAC,IAAD,CAAmByB,SAAUA,EAAUG,MAAOA,GAC3C7B,OAMPyB,EAAKH,YAAc,OACJG,O,mBCpBfF,EAAOC,QAAU,CAAC,KAAO","file":"static/js/22.9795b031.chunk.js","sourcesContent":["import React, { FC, memo, ReactNode } from 'react';\nimport classes from './styles.module.scss';\n\nexport const QuestionImpl: FC<QuestionProps> = ({\n  title,\n  questions,\n  children,\n}) => (\n  <div className={classes.Container}>\n    <h2 className={classes.Title}>{title}</h2>\n    <div className={classes.Content}>{children}</div>\n    <div className={classes.Questions}>\n      <h3>Questions</h3>\n      <div>\n        {questions.map(({ question, answer, references }, index) => (\n          // eslint-disable-next-line react/no-array-index-key\n          <details key={index}>\n            <summary className={classes.Question}>\n              <span className={classes.Index}>{index + 1}.</span> {question}\n            </summary>\n\n            <div className={classes.Answer}>{answer}</div>\n\n            {references && references.length && (\n              <div className={classes.References}>\n                <h4>References</h4>\n                <ol>\n                  {references.map(({ name, url }) => (\n                    <li key={url}>\n                      <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">\n                        {name}\n                      </a>\n                    </li>\n                  ))}\n                </ol>\n              </div>\n            )}\n          </details>\n        ))}\n      </div>\n    </div>\n  </div>\n);\n\nconst Question = memo(QuestionImpl);\nQuestion.displayName = 'Question';\nexport default Question;\n\nexport interface QuestionProps {\n  title: string;\n  questions: QuestionInfo[];\n  children?: ReactNode;\n}\n\nexport interface QuestionInfo {\n  question: ReactNode;\n  answer: ReactNode;\n  references?: ReferenceInfo[];\n}\n\nexport interface ReferenceInfo {\n  name: string;\n  url?: string;\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"styles_Container__12Mbc\",\"Title\":\"styles_Title__2qxOI\",\"Content\":\"styles_Content__2wB8J\",\"Questions\":\"styles_Questions__1t11e\",\"Question\":\"styles_Question__3wRhS\",\"Index\":\"styles_Index__1JqtT\",\"Answer\":\"styles_Answer__2snZe\",\"References\":\"styles_References__2N6Wn\"};","import React from 'react';\nimport { QuestionInfo } from 'components/Question';\nimport Code from 'components/Code';\n\nconst questions: QuestionInfo[] = [\n  {\n    question: `How to create an React app with TypeScript support?`,\n    answer: (\n      <Code language=\"bash\">npx create-react-app MyApp --typescript</Code>\n    ),\n  },\n  {\n    question: `How to add TypeScript to a current project?`,\n    answer: (\n      <div>\n        <p>\n          Install <code>typescript</code> and type definitions\n        </p>\n\n        <Code language=\"bash\">\n          yarn add typescript @types/node @types/react @types/react-dom\n          @types/jest\n        </Code>\n\n        <p>\n          Add <code>tsconfig.json</code> to the root project directory\n        </p>\n\n        <Code language=\"json\">\n          {`{\n  \"compilerOptions\": {\n    \"target\": \"es5\",\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"allowJs\": true,\n    \"skipLibCheck\": true,\n    \"esModuleInterop\": true,\n    \"allowSyntheticDefaultImports\": true,\n    \"strict\": true,\n    \"forceConsistentCasingInFileNames\": true,\n    \"module\": \"esnext\",\n    \"moduleResolution\": \"node\",\n    \"resolveJsonModule\": true,\n    \"isolatedModules\": true,\n    \"noEmit\": true,\n    \"jsx\": \"react\",\n    \"baseUrl\": \"src\",\n    \"downlevelIteration\": true\n  },\n  \"include\": [\"src\"]\n}`}\n        </Code>\n\n        <p>\n          Rename <code>js</code> files into <code>ts</code> and <code>jsx</code>{' '}\n          files into <code>tsx</code>\n        </p>\n      </div>\n    ),\n    references: [\n      {\n        name: `[Create React App] Adding TypeScript`,\n        url: `https://create-react-app.dev/docs/adding-typescript`,\n      },\n    ],\n  },\n  {\n    question: 'How to add apply ESLint to TypeScript project?',\n    answer: (\n      <div>\n        <p>\n          Install <code>prettier</code> and <code>eslint</code>, parser, configs\n          and plugins for ESLint\n        </p>\n\n        <Code language=\"bash\">\n          yarn add prettier eslint @typescript-eslint/parser\n          @typescript-eslint/eslint-plugin eslint-plugin-import\n          eslint-plugin-jsx-a11y eslint-plugin-prettier eslint-plugin-react\n          eslint-config-airbnb eslint-config-prettier eslint-config-react\n          eslint-plugin-react-hooks\n        </Code>\n\n        <p>\n          Add <code>.eslintrc</code> to the root project directory\n        </p>\n\n        <Code language=\"json\">\n          {`{\n  \"parser\": \"@typescript-eslint/parser\",\n  \"env\": {\n    \"node\": true,\n    \"browser\": true,\n    \"es6\": true,\n    \"mocha\": true,\n    \"jest\": true\n  },\n  \"plugins\": [\n    \"react\",\n    \"@typescript-eslint\",\n    \"import\",\n    \"prettier\",\n    \"react-hooks\"\n  ],\n  \"extends\": [\n    \"airbnb\",\n    \"plugin:jsx-a11y/recommended\",\n    \"plugin:react/recommended\",\n    \"plugin:@typescript-eslint/recommended\",\n    \"prettier/@typescript-eslint\",\n    \"plugin:prettier/recommended\"\n  ],\n  \"globals\": {\n    \"document\": true,\n    \"window\": true\n  },\n  \"parserOptions\": {\n    \"ecmaVersion\": 2018,\n    \"sourceType\": \"module\",\n    \"ecmaFeatures\": {\n      \"jsx\": true\n    }\n  },\n  \"rules\": {\n    \"arrow-body-style\": \"warn\",\n    \"no-sparse-arrays\": \"off\",\n    \"@typescript-eslint/explicit-function-return-type\": \"off\",\n    \"@typescript-eslint/no-explicit-any\": \"off\",\n    \"@typescript-eslint/no-non-null-assertion\": \"off\",\n    \"@typescript-eslint/no-object-literal-type-assertion\": \"off\",\n    \"jsx-a11y/label-has-associated-control\": \"off\",\n    \"jsx-a11y/no-onchange\": \"off\",\n    \"react/jsx-curly-newline\": \"off\",\n    \"react/jsx-one-expression-per-line\": \"off\",\n    \"react/prop-types\": \"off\",\n    \"react-hooks/exhaustive-deps\": \"warn\",\n    \"react-hooks/rules-of-hooks\": \"error\",\n    \"import/no-unresolved\": \"off\",\n    \"prettier/prettier\": [\n      \"warn\",\n      { \"singleQuote\": true, \"trailingComma\": \"all\" }\n    ],\n    \"react/jsx-filename-extension\": [\n      \"error\",\n      {\n        \"extensions\": [\".jsx\", \".tsx\"]\n      }\n    ],\n    \"no-plusplus\": [\"warn\", { \"allowForLoopAfterthoughts\": true }]\n  },\n  \"settings\": {\n    \"react\": {\n      \"version\": \"detect\"\n    }\n  }\n}`}\n        </Code>\n\n        <p>\n          Add <code>.prettierrc</code> to the root project directory\n        </p>\n\n        <Code language=\"json\">{`{ \"singleQuote\": true, \"trailingComma\": \"all\" }`}</Code>\n\n        <p>\n          Add or update <code>.vscode/settings.json</code>\n        </p>\n\n        <Code language=\"json\">\n          {`{\n  \"eslint.enable\": true,\n  \"eslint.validate\": [\n    \"javascript\",\n    \"javascriptreact\",\n    { \"language\": \"typescript\", \"autoFix\": true },\n    { \"language\": \"typescriptreact\", \"autoFix\": true }\n  ],\n  \"eslint.autoFixOnSave\": true,\n  \"[javascript]\":  {\n    \"editor.formatOnSave\":  false,\n  },\n  \"[javascriptreact]\":  {\n    \"editor.formatOnSave\":  false,\n  },\n  \"[typescript]\":  {\n    \"editor.formatOnSave\":  false,\n  },\n  \"[typescriptreact]\":  {\n    \"editor.formatOnSave\":  false,\n  }\n}`}\n        </Code>\n      </div>\n    ),\n    references: [\n      {\n        name: `[DEV] Using ESLint and Prettier in a TypeScript Project`,\n        url: `https://dev.to/robertcoopercode/using-eslint-and-prettier-in-a-typescript-project-53jb`,\n      },\n      {\n        name: `[DEV] How To Set Up ESLint, TypeScript, Prettier with Create React App`,\n        url: `https://dev.to/benweiser/how-to-set-up-eslint-typescript-prettier-with-create-react-app-3675`,\n      },\n      {\n        name: `Linting Your React+Typescript Project With ESlint and Prettier`,\n        url: `https://dorshinar.me/linting-your-react+typescript-project-with-eslint-and-prettier`,\n      },\n    ],\n  },\n];\n\nexport default questions;\n","import React, { FC, memo } from 'react';\nimport Question from 'components/Question';\nimport questions from './questions';\n\nexport const TypeScript1Component: FC = () => (\n  <Question title=\"TypeScript 1\" questions={questions} />\n);\n\nconst TypeScript1 = memo(TypeScript1Component);\nexport default TypeScript1;\n","import React, { FC, memo } from 'react';\nimport classnames from 'classnames';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { okaidia } from 'react-syntax-highlighter/dist/esm/styles/prism';\nimport classes from './styles.module.scss';\n\nexport const CodeImpl: FC<CodeProps> = ({\n  className,\n  children,\n  style = okaidia,\n  language,\n}) => (\n  <div className={classnames(classes.Code, className)}>\n    <SyntaxHighlighter language={language} style={style}>\n      {children}\n    </SyntaxHighlighter>\n  </div>\n);\n\nconst Code = memo(CodeImpl);\nCode.displayName = 'Code';\nexport default Code;\n\nexport interface CodeProps {\n  className?: string;\n  style?: object;\n  children: string;\n  language: Language;\n}\n\nexport type Language =\n  | 'abap'\n  | 'actionscript'\n  | 'ada'\n  | 'apacheconf'\n  | 'apl'\n  | 'applescript'\n  | 'arduino'\n  | 'arff'\n  | 'asciidoc'\n  | 'asm6502'\n  | 'aspnet'\n  | 'autohotkey'\n  | 'autoit'\n  | 'bash'\n  | 'basic'\n  | 'batch'\n  | 'bison'\n  | 'brainfuck'\n  | 'bro'\n  | 'c'\n  | 'clike'\n  | 'clojure'\n  | 'coffeescript'\n  | 'cpp'\n  | 'crystal'\n  | 'csharp'\n  | 'csp'\n  | 'cssExtras'\n  | 'css-extras'\n  | 'css'\n  | 'd'\n  | 'dart'\n  | 'diff'\n  | 'django'\n  | 'docker'\n  | 'eiffel'\n  | 'elixir'\n  | 'elm'\n  | 'erb'\n  | 'erlang'\n  | 'flow'\n  | 'fortran'\n  | 'fsharp'\n  | 'gedcom'\n  | 'gherkin'\n  | 'git'\n  | 'glsl'\n  | 'go'\n  | 'graphql'\n  | 'groovy'\n  | 'haml'\n  | 'handlebars'\n  | 'haskell'\n  | 'haxe'\n  | 'hpkp'\n  | 'hsts'\n  | 'http'\n  | 'ichigojam'\n  | 'icon'\n  | 'inform7'\n  | 'ini'\n  | 'io'\n  | 'j'\n  | 'java'\n  | 'javascript'\n  | 'jolie'\n  | 'json'\n  | 'jsx'\n  | 'julia'\n  | 'keyman'\n  | 'kotlin'\n  | 'latex'\n  | 'less'\n  | 'liquid'\n  | 'lisp'\n  | 'livescript'\n  | 'lolcode'\n  | 'lua'\n  | 'makefile'\n  | 'markdown'\n  | 'markupTemplating'\n  | 'markup-templating'\n  | 'markup'\n  | 'matlab'\n  | 'mel'\n  | 'mizar'\n  | 'monkey'\n  | 'n4js'\n  | 'nasm'\n  | 'nginx'\n  | 'nim'\n  | 'nix'\n  | 'nsis'\n  | 'objectivec'\n  | 'ocaml'\n  | 'opencl'\n  | 'oz'\n  | 'parigp'\n  | 'parser'\n  | 'pascal'\n  | 'perl'\n  | 'phpExtras'\n  | 'php-extras'\n  | 'php'\n  | 'plsql'\n  | 'powershell'\n  | 'processing'\n  | 'prolog'\n  | 'properties'\n  | 'protobuf'\n  | 'pug'\n  | 'puppet'\n  | 'pure'\n  | 'python'\n  | 'q'\n  | 'qore'\n  | 'r'\n  | 'reason'\n  | 'renpy'\n  | 'rest'\n  | 'rip'\n  | 'roboconf'\n  | 'ruby'\n  | 'rust'\n  | 'sas'\n  | 'sass'\n  | 'scala'\n  | 'scheme'\n  | 'scss'\n  | 'smalltalk'\n  | 'smarty'\n  | 'soy'\n  | 'sql'\n  | 'stylus'\n  | 'swift'\n  | 'tap'\n  | 'tcl'\n  | 'textile'\n  | 'tsx'\n  | 'tt2'\n  | 'twig'\n  | 'typescript'\n  | 'vbnet'\n  | 'velocity'\n  | 'verilog'\n  | 'vhdl'\n  | 'vim'\n  | 'visualBasic'\n  | 'visual-basic'\n  | 'wasm'\n  | 'wiki'\n  | 'xeora'\n  | 'xojo'\n  | 'xquery'\n  | 'yaml';\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Code\":\"styles_Code__2Axvp\"};"],"sourceRoot":""}