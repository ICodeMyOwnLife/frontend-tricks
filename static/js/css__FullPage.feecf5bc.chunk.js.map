{"version":3,"sources":["components/QuestionItem/styles.ts","components/QuestionItem/index.tsx","components/QuestionPage/styles.ts","components/QuestionPage/index.tsx","questions/css/FullPage/styles.module.scss","questions/css/FullPage/questions.ts","questions/css/FullPage/index.tsx"],"names":["useStyles","makeStyles","theme","Question","fontWeight","Answer","marginTop","spacing","padding","fontSize","backgroundColor","grey","border","borderRadius","margin","maxWidth","References","marginBottom","QuestionItem","memo","index","question","answer","references","classes","useToggle","open","toggleOpen","ListItem","button","onClick","ListItemText","primary","Collapse","in","timeout","Box","className","length","Typography","variant","map","name","url","key","href","target","rel","displayName","Container","Content","Questions","fontFamily","color","QuestionPage","title","questions","children","List","questionInfo","module","exports","FullPage1Impl","Ads","AdsImg","FullPage1"],"mappings":"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","file":"static/js/css__FullPage.feecf5bc.chunk.js","sourcesContent":["import { makeStyles, Theme } from '@material-ui/core';\nimport { grey } from '@material-ui/core/colors';\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  Question: {\n    fontWeight: 500,\n  },\n  Answer: {\n    marginTop: theme.spacing(1.5),\n    padding: 0,\n    fontSize: 14,\n    backgroundColor: grey[50],\n    border: `1px solid ${grey[400]}`,\n    borderRadius: 6,\n\n    '& p': {\n      padding: theme.spacing(0, 2.5),\n    },\n\n    '& ol,ul': {\n      margin: theme.spacing(1.5, 0),\n    },\n\n    '& img': {\n      maxWidth: '100%',\n    },\n  },\n  References: {\n    margin: theme.spacing(3, 0, 0),\n\n    '& ol': {\n      marginTop: theme.spacing(1),\n    },\n\n    '& li': {\n      fontSize: 14,\n      fontWeight: 500,\n      marginBottom: theme.spacing(1),\n    },\n  },\n}));\n\nexport default useStyles;\n","import React, { FC, memo } from 'react';\nimport { QuestionInfo } from 'types/app-common';\nimport {\n  ListItem,\n  ListItemText,\n  Collapse,\n  Box,\n  Typography,\n} from '@material-ui/core';\nimport useToggle from 'hooks/useToggle';\nimport useStyles from './styles';\n\nexport const QuestionItemComponent: FC<QuestionItemProps> = ({\n  index,\n  question,\n  answer,\n  references,\n}) => {\n  const classes = useStyles();\n  const [open, toggleOpen] = useToggle(false);\n\n  return (\n    <>\n      <ListItem button onClick={toggleOpen}>\n        <ListItemText classes={{ primary: classes.Question }}>\n          {index}. {question}\n        </ListItemText>\n      </ListItem>\n      <Collapse in={open} timeout=\"auto\">\n        <Box className={classes.Answer}>{answer}</Box>\n        {!!references && references.length && (\n          <Box className={classes.References}>\n            <Typography variant=\"h4\">References</Typography>\n            <ol>\n              {references.map(({ name, url }) => (\n                <li key={url}>\n                  <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">\n                    {name}\n                  </a>\n                </li>\n              ))}\n            </ol>\n          </Box>\n        )}\n      </Collapse>\n    </>\n  );\n};\n\nconst QuestionItem = memo(QuestionItemComponent);\nQuestionItem.displayName = 'QuestionItem';\nexport default QuestionItem;\n\nexport interface QuestionItemProps extends QuestionInfo {\n  index: number;\n}\n","import { Theme, makeStyles } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  Container: {\n    marginTop: theme.spacing(4),\n  },\n  Content: {\n    marginTop: theme.spacing(2.5),\n  },\n  Questions: {\n    marginTop: theme.spacing(4),\n\n    '& code': {\n      fontFamily: `'Courier New', Courier, monospace`,\n      fontSize: 14,\n      fontWeight: 600,\n      color: `rgb(219, 104, 27)`,\n    },\n  },\n}));\n\nexport default useStyles;\n","/* eslint-disable react/no-array-index-key */\n/* eslint-disable react/jsx-props-no-spreading */\nimport React, { FC, memo, ReactNode } from 'react';\nimport { Box, Typography, List } from '@material-ui/core';\nimport QuestionItem from 'components/QuestionItem';\nimport { QuestionInfo } from 'types/app-common';\nimport useStyles from './styles';\n\nexport const QuestionPageImpl: FC<QuestionPageProps> = ({\n  title,\n  questions,\n  children,\n}) => {\n  const classes = useStyles();\n\n  return (\n    <Box className={classes.Container}>\n      <Typography variant=\"h2\">{title}</Typography>\n      <Box className={classes.Content}>{children}</Box>\n      <Box className={classes.Questions}>\n        <Typography variant=\"h3\">Questions</Typography>\n        <Box>\n          <List>\n            {questions.map((questionInfo, index) => (\n              <QuestionItem key={index} index={index + 1} {...questionInfo} />\n            ))}\n          </List>\n        </Box>\n      </Box>\n    </Box>\n  );\n};\n\nconst QuestionPage = memo(QuestionPageImpl);\nQuestionPage.displayName = 'QuestionPage';\nexport default QuestionPage;\n\nexport interface QuestionPageProps {\n  title: string;\n  questions: QuestionInfo[];\n  children?: ReactNode;\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"styles_Container__2O4_o\",\"Ads\":\"styles_Ads__36Di2\",\"AdsImg\":\"styles_AdsImg__3Yc1N\",\"Window\":\"styles_Window__1RP6s\"};","import { QuestionInfo } from 'types/app-common';\n\nconst questions: QuestionInfo[] = [\n  { question: `This is undone`, answer: null },\n];\n\nexport default questions;\n","import React, { FC, memo } from 'react';\nimport QuestionPage from 'components/QuestionPage';\nimport questions from './questions';\nimport classes from './styles.module.scss';\n\nexport const FullPage1Impl: FC = () => (\n  <QuestionPage title=\"\" questions={questions}>\n    Unimplemented\n    <div className={classes.Container}>\n      <p>\n        debounceTime delays values emitted by the source Observable, but drops\n        previous pending delayed emissions if a new value arrives on the source\n        Observable. This operator keeps track of the most recent value from the\n        source Observable, and emits that only when dueTime enough time has\n        passed without any other value appearing on the source Observable. If a\n        new value appears before dueTime silence occurs, the previous value will\n        be dropped and will not be emitted on the output Observable.\n      </p>\n      <p>\n        This is a rate-limiting operator, because it is impossible for more than\n        one value to be emitted in any time window of duration dueTime, but it\n        is also a delay-like operator since output emissions do not occur at the\n        same time as they did on the source Observable. Optionally takes a\n        SchedulerLike for managing timers.\n      </p>\n      <p>\n        debounceTime delays values emitted by the source Observable, but drops\n        previous pending delayed emissions if a new value arrives on the source\n        Observable. This operator keeps track of the most recent value from the\n        source Observable, and emits that only when dueTime enough time has\n        passed without any other value appearing on the source Observable. If a\n        new value appears before dueTime silence occurs, the previous value will\n        be dropped and will not be emitted on the output Observable.\n      </p>\n      <p>\n        This is a rate-limiting operator, because it is impossible for more than\n        one value to be emitted in any time window of duration dueTime, but it\n        is also a delay-like operator since output emissions do not occur at the\n        same time as they did on the source Observable. Optionally takes a\n        SchedulerLike for managing timers.\n      </p>\n      <p>\n        debounceTime delays values emitted by the source Observable, but drops\n        previous pending delayed emissions if a new value arrives on the source\n        Observable. This operator keeps track of the most recent value from the\n        source Observable, and emits that only when dueTime enough time has\n        passed without any other value appearing on the source Observable. If a\n        new value appears before dueTime silence occurs, the previous value will\n        be dropped and will not be emitted on the output Observable.\n      </p>\n      <div className={classes.Ads}>\n        <div className={classes.AdsImg} />\n      </div>\n      <p>\n        This is a rate-limiting operator, because it is impossible for more than\n        one value to be emitted in any time window of duration dueTime, but it\n        is also a delay-like operator since output emissions do not occur at the\n        same time as they did on the source Observable. Optionally takes a\n        SchedulerLike for managing timers.\n      </p>\n      <p>\n        debounceTime delays values emitted by the source Observable, but drops\n        previous pending delayed emissions if a new value arrives on the source\n        Observable. This operator keeps track of the most recent value from the\n        source Observable, and emits that only when dueTime enough time has\n        passed without any other value appearing on the source Observable. If a\n        new value appears before dueTime silence occurs, the previous value will\n        be dropped and will not be emitted on the output Observable.\n      </p>\n      <p>\n        This is a rate-limiting operator, because it is impossible for more than\n        one value to be emitted in any time window of duration dueTime, but it\n        is also a delay-like operator since output emissions do not occur at the\n        same time as they did on the source Observable. Optionally takes a\n        SchedulerLike for managing timers.\n      </p>\n      <p>\n        debounceTime delays values emitted by the source Observable, but drops\n        previous pending delayed emissions if a new value arrives on the source\n        Observable. This operator keeps track of the most recent value from the\n        source Observable, and emits that only when dueTime enough time has\n        passed without any other value appearing on the source Observable. If a\n        new value appears before dueTime silence occurs, the previous value will\n        be dropped and will not be emitted on the output Observable.\n      </p>\n      <p>\n        This is a rate-limiting operator, because it is impossible for more than\n        one value to be emitted in any time window of duration dueTime, but it\n        is also a delay-like operator since output emissions do not occur at the\n        same time as they did on the source Observable. Optionally takes a\n        SchedulerLike for managing timers.\n      </p>\n      <p>\n        debounceTime delays values emitted by the source Observable, but drops\n        previous pending delayed emissions if a new value arrives on the source\n        Observable. This operator keeps track of the most recent value from the\n        source Observable, and emits that only when dueTime enough time has\n        passed without any other value appearing on the source Observable. If a\n        new value appears before dueTime silence occurs, the previous value will\n        be dropped and will not be emitted on the output Observable.\n      </p>\n      <p>\n        This is a rate-limiting operator, because it is impossible for more than\n        one value to be emitted in any time window of duration dueTime, but it\n        is also a delay-like operator since output emissions do not occur at the\n        same time as they did on the source Observable. Optionally takes a\n        SchedulerLike for managing timers.\n      </p>\n    </div>\n  </QuestionPage>\n);\n\nconst FullPage1 = memo(FullPage1Impl);\nFullPage1.displayName = 'FullPage1';\nexport default FullPage1;\n"],"sourceRoot":""}