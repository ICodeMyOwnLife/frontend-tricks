(this.webpackJsonpfrontend=this.webpackJsonpfrontend||[]).push([[24],{134:function(e,n,i){"use strict";var t=i(0),o=i.n(t),r=i(130),a=i(34),l=Object(t.memo)((function(e){var n=e.className,i=e.references;return o.a.createElement(r.a,{className:n},o.a.createElement(a.a,{variant:"h5"},"References"),o.a.createElement("ol",null,i.map((function(e){var n=e.name,i=e.url;return o.a.createElement("li",{key:i},o.a.createElement("a",{href:i,target:"_blank",rel:"noopener noreferrer"},n))}))))}));l.displayName="References",n.a=l},135:function(e,n,i){"use strict";var t=i(54),o=i(0),r=i.n(o),a=i(130),l=i(34),s=i(124),$=i(35),d=i(121),c=i(122),m=i(123),h=i(36),g=i(134),p=Object(o.memo)((function(e){var n=e.className,i=e.todos;return r.a.createElement(a.a,null,r.a.createElement(l.a,{className:n,variant:"h5"},"Todos"),r.a.createElement("ol",null,i.map((function(e){return r.a.createElement("li",{key:e},e)}))))}));p.displayName="Todos";var u=p,f=i(64),b=i(43),_=Object(f.a)((function(e){return{Question:{fontWeight:500},HiddenContent:{marginBottom:e.spacing(2)},Answer:{marginTop:e.spacing(1.5),padding:0,fontSize:14,backgroundColor:b.a[50],border:"1px solid ".concat(b.a[400]),borderRadius:6,"& p":{padding:e.spacing(0,2.5)},"& ol,ul":{margin:e.spacing(1.5,0)},"& img":{maxWidth:"100%"}},BottomBox:{paddingBottom:e.spacing(2),borderBottom:"1px solid ".concat(b.a[400]),"& ol,ul":{marginTop:e.spacing(1)},"& li":{fontSize:14,fontWeight:500,marginBottom:e.spacing(1)}},BottomBoxTitle:{margin:e.spacing(3,0,0)}}})),w=Object(o.memo)((function(e){var n=e.index,i=e.question,t=e.answer,o=e.references,l=e.todos,s=_(),p=Object(h.g)(!1),f=Object($.a)(p,2),b=f[0],w=f[1],y=!(!o||!o.length),x=!(!l||!l.length),E=y||x;return r.a.createElement(r.a.Fragment,null,r.a.createElement(d.a,{button:!0,onClick:w},r.a.createElement(c.a,{classes:{primary:s.Question}},n,". ",i)),r.a.createElement(m.a,{in:b,timeout:"auto"},r.a.createElement(a.a,{className:s.HiddenContent},r.a.createElement(a.a,{className:s.Answer},t),E&&r.a.createElement(a.a,{className:s.BottomBox},y&&r.a.createElement(g.a,{className:s.BottomBoxTitle,references:o}),x&&r.a.createElement(u,{className:s.BottomBoxTitle,todos:l})))))}));w.displayName="QuestionItem";var y=w,x=i(136),E=i(166),v=Object(f.a)((function(e){var n=e.spacing;return Object(E.a)({root:{},questions:{marginTop:n(4),"& code":{fontFamily:"'Courier New', Courier, monospace",fontSize:14,fontWeight:600,color:"rgb(219, 104, 27)"}}})}),{classNamePrefix:"QuestionPage"}),D=Object(o.memo)((function(e){var n=e.questions,i=e.children,o=Object(t.a)(e,["questions","children"]),$=v();return r.a.createElement(x.a,o,i,r.a.createElement(a.a,{className:$.questions},r.a.createElement(l.a,{variant:"h4"},"Questions"),r.a.createElement(a.a,null,r.a.createElement(s.a,null,n.map((function(e,n){return r.a.createElement(y,Object.assign({key:n,index:n+1},e))}))))))}));D.displayName="QuestionPage";n.a=D},136:function(e,n,i){"use strict";var t=i(0),o=i.n(t),r=i(130),a=i(34),l=i(3),s=i(166),$=i(64),d=Object($.a)((function(e){var n=e.spacing;return Object(s.a)({root:{marginTop:n(4)},content:{marginTop:n(2.5)}})}),{classNamePrefix:"PageLayout"}),c=Object(t.memo)((function(e){var n=e.className,i=e.title,t=e.children,s=d();return o.a.createElement(r.a,{className:Object(l.a)(s.root,n)},o.a.createElement(a.a,{variant:"h3"},i),o.a.createElement(r.a,{className:s.content},t))}));c.displayName="PageLayout";n.a=c},137:function(e,n,i){"use strict";var t=i(0),o=i.n(t),r=i(3),a=i(887),l=i(865),s=i(64),$=Object(s.a)((function(e){return{CodeViewer:{"& pre":{margin:"0 !important",borderRadius:6},"&~$CodeViewer":{marginTop:e.spacing(2)}}}})),d=Object(t.memo)((function(e){var n=e.className,i=e.children,t=e.style,s=void 0===t?l.a:t,d=e.language,c=$();return o.a.createElement("div",{className:Object(r.a)(c.CodeViewer,n)},o.a.createElement(a.a,{language:d,style:s},i))}));d.displayName="CodeViewer";n.a=d},583:function(e,n,i){e.exports={StyleEditor:"styles_StyleEditor__1p4m3",ShapeContainer:"styles_ShapeContainer__e_w8c",Title:"styles_Title__33LO7",rectangle:"styles_rectangle__2YNKa",rotateY:"styles_rotateY__FSs1E",square:"styles_square__310dA",rotateZ:"styles_rotateZ__1st_J",oval:"styles_oval__1MqEw",circle:"styles_circle__RoNuX",triangleUp:"styles_triangleUp__1VQFf",triangleDown:"styles_triangleDown__1aRnO",triangleLeft:"styles_triangleLeft__2oFjR",triangleRight:"styles_triangleRight__2VW-N",triangleTopLeft:"styles_triangleTopLeft__384__",triangleTopRight:"styles_triangleTopRight__m9t1J",triangleBottomLeft:"styles_triangleBottomLeft__36vtP",triangleBottomRight:"styles_triangleBottomRight__3zBoL",curvedTailArrow:"styles_curvedTailArrow__1Ljek",trapezoid:"styles_trapezoid__3NeRE",parallelogram:"styles_parallelogram__1fAts",sixPointsStar:"styles_sixPointsStar__1SuSt",fivePointsStar:"styles_fivePointsStar__1hFtc",pentagon:"styles_pentagon__1xkzZ",hexagon:"styles_hexagon__Eyn7g",octagon:"styles_octagon__du3Oi",heart:"styles_heart__EHEIn",infinity:"styles_infinity__2kolN",diamondSquare:"styles_diamondSquare__3YvKU",diamondShield:"styles_diamondShield__HqsoV",diamondNarrow:"styles_diamondNarrow__3IRaf",cutDiamond:"styles_cutDiamond__2VgMt",egg:"styles_egg__1PRs_",pacman:"styles_pacman__OOTzN",talkBubble:"styles_talkBubble__18seY",twelvePointsBurst:"styles_twelvePointsBurst__2kkO9",eightPointsBurst:"styles_eightPointsBurst__3ETPr",yinYang:"styles_yinYang__1nojN",badgeRibbon:"styles_badgeRibbon__3_VbR",spaceInvader:"styles_spaceInvader__o1zq0",tvScreen:"styles_tvScreen__2orzp",chevron:"styles_chevron__2pavH",magnifyingGlass:"styles_magnifyingGlass__34GzB",moon:"styles_moon__YllS3",flag:"styles_flag__omu2G",cone:"styles_cone__1d14Q",cross:"styles_cross__S8_OL",base:"styles_base__1K2YC",pointer:"styles_pointer__2A-ju",lock:"styles_lock__2m1NB",rotateX:"styles_rotateX__3PF-_"}},890:function(e,n,i){"use strict";i.r(n);var t=i(0),o=i.n(t),r=i(135),a=i(583),l=i.n(a),s=Object(t.memo)((function(e){var n=e.type;return o.a.createElement("div",{className:l.a[n]})}));s.displayName="Shape";var $=s,d=Object(t.memo)((function(e){var n=e.name,i=e.type;return o.a.createElement("div",{className:l.a.ShapeContainer},o.a.createElement("h4",{className:l.a.Title},n),o.a.createElement($,{type:i}))}));d.displayName="ShapeContainer";var c=d,m=i(137),h=[{question:o.a.createElement("p",null,"How to create shapes using only one ",o.a.createElement("code",null,"div"),"?"),answer:o.a.createElement(m.a,{language:"scss"},"@mixin shape($color) {\n  display: inline-block;\n  background-color: $color;\n}\n\n@mixin emptyShape {\n  display: inline-block;\n  width: 0;\n  height: 0;\n  background-color: transparent;\n}\n\n@mixin rectangle($width, $height, $color) {\n  @include shape($color);\n  width: $width;\n  height: $height;\n}\n\n@mixin square($sideDimension, $color) {\n  @include rectangle($sideDimension, $sideDimension, $color);\n}\n\n@mixin oval($width, $height, $color) {\n  @include rectangle($width, $height, $color);\n  border-radius: 100%;\n}\n\n@mixin circle($diameter, $color) {\n  @include oval($diameter, $diameter, $color);\n}\n\n@mixin isoscelesTriangle($height, $width, $apex, $color) {\n  $adjacentSides: (\n    top: left right,\n    bottom: left right,\n    left: top bottom,\n    right: top bottom,\n  );\n  @include emptyShape();\n  border-#{$apex}: $height solid $color;\n  @each $side in map-get($map: $adjacentSides, $key: $apex) {\n    border-#{$side}: $width/2 solid transparent;\n  }\n}\n\n@mixin equilateralTriangle($height, $apex, $color) {\n  $width: $height / $cos30deg;\n  $radius: $height / (2 * $cos30deg * $cos30deg);\n  @include isoscelesTriangle($height, $width, $apex, $color);\n  @if $apex == top {\n    transform-origin: $width / 2 $height - $radius;\n  } @else if $apex == bottom {\n    transform-origin: $width / 2 $radius;\n  } @else if $apex == right {\n    transform-origin: $radius $width / 2;\n  } @else if $apex == left {\n    transform-origin: $height - $radius $width / 2;\n  }\n}\n\n@mixin rightAngledTriangle($height, $shownSide, $hiddenSide, $color) {\n  @include emptyShape();\n  border-#{$shownSide}: $height solid $color;\n  border-#{$hiddenSide}: $height solid transparent;\n}\n\n@mixin curvedTailArrow($length, $color) {\n  $dimension: $length / 2;\n  @include emptyShape();\n  margin-left: $dimension;\n  border-right: $dimension solid $color;\n  border-top: $dimension solid transparent;\n  transform: rotate(12deg);\n\n  &::after {\n    content: '';\n    position: absolute;\n    width: $dimension;\n    height: $dimension;\n    left: -$dimension * 0.7;\n    top: -$dimension * 1.2;\n    background: transparent;\n    border: 0 solid transparent;\n    border-top: $dimension * 0.4 solid $color;\n    border-radius: 100% 0 0 0;\n    transform: rotate(45deg);\n  }\n}\n\n@mixin trapezoid($upperWidth, $lowerWidth, $height, $color) {\n  $borderWidth: abs(\n      $number: $upperWidth - $lowerWidth,\n    ) / 2;\n  @include shape($color);\n  @if $upperWidth < $lowerWidth {\n    width: $upperWidth;\n    border-bottom: $height solid $color;\n  } @else {\n    width: $lowerWidth;\n    border-top: $height solid $color;\n  }\n  background-color: transparent;\n  border-left: $borderWidth solid transparent;\n  border-right: $borderWidth solid transparent;\n}\n\n@mixin parallelogram($width, $height, $color) {\n  $skewWidth: ($height * $tan20deg) / 2;\n  @include emptyShape();\n  position: relative;\n  margin: 0 $width + $skewWidth $height $skewWidth;\n  transform-origin: $width / 2 $height / 2;\n\n  &::after {\n    content: '';\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: $width;\n    height: $height;\n    background-color: $color;\n    transform: skew(-20deg);\n  }\n}\n\n@mixin sixPointsStar($sideDimension, $color) {\n  $height: $sideDimension * $cos30deg;\n  $radius: $sideDimension / $cos30deg / 2;\n  @include equilateralTriangle($height, bottom, $color);\n  position: relative;\n  margin-bottom: $height / 3;\n  transform-origin: 50% $radius;\n\n  &::after {\n    content: '';\n    position: absolute;\n    top: $height / 3;\n    left: -$sideDimension / 2;\n    @include equilateralTriangle($height, top, $color);\n  }\n}\n\n@mixin fivePointsStar($sideDimension, $color) {\n  $upperThird: $sideDimension * $tan36deg / 2;\n  $middleThird: $upperThird;\n  $lowerThird: $sideDimension * $cos18deg - $middleThird - $upperThird;\n  $radius: $sideDimension / $sin36deg / 2;\n  @include isoscelesTriangle($middleThird, $sideDimension, top, $color);\n  position: relative;\n  margin: $upperThird 0 $lowerThird;\n  transform-origin: 50% $radius - ($upperThird + $middleThird);\n\n  &::before,\n  &::after {\n    top: -$middleThird - $upperThird;\n    content: '';\n    position: absolute;\n  }\n\n  &::before {\n    left: 0;\n    @include isoscelesTriangle($middleThird, $sideDimension, left, $color);\n    transform: rotate(18deg);\n    transform-origin: 0 0;\n  }\n\n  &::after {\n    left: -$middleThird;\n    @include isoscelesTriangle($middleThird, $sideDimension, right, $color);\n    transform: rotate(-18deg);\n    transform-origin: 100% 0;\n  }\n}\n\n@mixin pentagon($sideDimension, $color) {\n  $width: $sideDimension + 2 * $sideDimension * $sin18deg;\n  $height: $sideDimension * $cos18deg;\n  $top: $sideDimension * $sin36deg;\n  $radius: $sideDimension / 2 / $sin36deg;\n  @include isoscelesTriangle($top, $width, bottom, $color);\n  position: relative;\n  margin-bottom: $height;\n  transform-origin: 50% $radius;\n\n  &::after {\n    content: '';\n    position: absolute;\n    top: $top;\n    left: -$width / 2;\n    @include trapezoid($width, $sideDimension, $height, $color);\n  }\n}\n\n@mixin hexagon($sideDimension, $color) {\n  $width: $sideDimension * $cos30deg * 2;\n  @include rectangle($width, $sideDimension, $color);\n  position: relative;\n  margin: $sideDimension / 2 0;\n\n  &::before,\n  &::after {\n    content: '';\n    position: absolute;\n  }\n\n  &::before {\n    top: -$sideDimension/2;\n    @include isoscelesTriangle($sideDimension / 2, $width, bottom, $color);\n  }\n\n  &::after {\n    top: $sideDimension;\n    @include isoscelesTriangle($sideDimension / 2, $width, top, $color);\n  }\n}\n\n@mixin octagon($sideDimension, $color) {\n  $sideBorder: $sideDimension * $cos45deg;\n  $width: $sideDimension + 2 * $sideBorder;\n  @include rectangle($width, $sideDimension, $color);\n  position: relative;\n  margin: $sideBorder 0;\n\n  &::before,\n  &::after {\n    content: '';\n    position: absolute;\n  }\n\n  &::before {\n    top: -$sideBorder;\n    @include trapezoid($sideDimension, $width, $sideBorder, $color);\n  }\n\n  &::after {\n    top: $sideDimension;\n    @include trapezoid($width, $sideDimension, $sideBorder, $color);\n  }\n}\n\n@mixin heart($height, $color) {\n  $halfWidth: $height * 5/8;\n  @include emptyShape();\n  position: relative;\n  display: inline-block;\n  margin: $height * 0.0375 $height * 1.25 $height * 1.0375 0;\n  transform-origin: $halfWidth;\n\n  &::before,\n  &::after {\n    content: '';\n    position: absolute;\n    width: $halfWidth;\n    height: $height;\n    top: 0;\n    background-color: $color;\n    border-radius: $halfWidth $halfWidth 0 0;\n  }\n\n  &::before {\n    left: $halfWidth;\n    transform-origin: 0 100%;\n    transform: rotate(-45deg);\n  }\n\n  &::after {\n    left: 0;\n    transform-origin: 100% 100%;\n    transform: rotate(45deg);\n  }\n}\n\n@mixin infinity($diameter, $color) {\n  @include emptyShape();\n  position: relative;\n  margin: 0 $diameter * 3.6 $diameter * 5/3 0;\n\n  &::before,\n  &::after {\n    content: '';\n    position: absolute;\n    width: $diameter;\n    height: $diameter;\n    border: $diameter/3 solid $colorPrimary;\n    transform: rotate(-45deg);\n  }\n\n  &::before {\n    left: 0;\n    border-radius: 100% 100% 0;\n  }\n\n  &::after {\n    left: $diameter * 1.9;\n    border-radius: 0 100% 100%;\n  }\n}\n\n@mixin diamondSquare($sideDimension, $color) {\n  $width: $sideDimension / $cos45deg;\n  @include emptyShape();\n  position: relative;\n  margin: ($width - $sideDimension) / 2 ($width + $sideDimension) / 2\n    ($width + $sideDimension) / 2 ($width - $sideDimension) / 2;\n  transform-origin: $sideDimension / 2 $sideDimension / 2;\n\n  &::after {\n    content: '';\n    position: absolute;\n    @include square($sideDimension, $color);\n    transform: rotate(45deg);\n  }\n}\n\n@mixin diamondShield($height, $color) {\n  $width: $height * 4/5 / $cos30deg;\n  @include isoscelesTriangle($height/5, $width, bottom, $color);\n  position: relative;\n  margin-bottom: $height * 4/5;\n  transform-origin: 50% $height / 2;\n\n  &::after {\n    content: '';\n    position: absolute;\n    left: -$width / 2;\n    top: $height/5;\n    @include isoscelesTriangle($height * 4/5, $width, top, $color);\n  }\n}\n\n@mixin diamondNarrow($sideDimension, $color) {\n  $height: $sideDimension * $cos30deg;\n  @include equilateralTriangle($height, bottom, $color);\n  position: relative;\n  margin-bottom: $height;\n  transform-origin: 50% $height;\n\n  &::after {\n    content: '';\n    position: absolute;\n    top: $height;\n    left: -$sideDimension / 2;\n    @include equilateralTriangle($height, top, $color);\n  }\n}\n\n@mixin cutDiamond($sideDimension, $color) {\n  $lowerHeight: $sideDimension * $cos30deg;\n  $upperHeight: $lowerHeight / 3.2;\n  $upperWidth: $sideDimension * 2 / 3;\n  @include trapezoid($upperWidth, $sideDimension, $upperHeight, $color);\n  position: relative;\n  margin-bottom: $lowerHeight;\n  transform-origin: 50% ($upperHeight + $lowerHeight) / 2;\n\n  &::after {\n    content: '';\n    position: absolute;\n    top: $upperHeight;\n    left: ($upperWidth - $sideDimension) / 2;\n    @include equilateralTriangle($lowerHeight, top, $color);\n  }\n}\n\n@mixin egg($height, $isUpward, $color) {\n  $width: $height * 0.8;\n  @include shape($color);\n  width: $width;\n  height: $height;\n  @if $isUpward {\n    border-radius: 50% 50% 50% 50% / 60% 60% 40% 40%;\n  } @else {\n    border-radius: 50% 50% 50% 50% / 40% 40% 60% 60%;\n  }\n}\n\n@mixin pacman($diameter, $direction, $color) {\n  @include emptyShape();\n  border: $diameter / 2 solid $color;\n  border-#{$direction}-color: transparent;\n  border-radius: 50%;\n}\n\n@mixin talkBubble($width, $height, $color) {\n  $arrowHeight: 20px;\n  $borderRadius: 12px;\n  @include shape($color);\n  position: relative;\n  width: $width;\n  height: $height;\n  border-radius: $borderRadius;\n\n  &::after {\n    content: '';\n    position: absolute;\n    top: $height;\n    right: $width / 4;\n    @include equilateralTriangle($arrowHeight, top, $color);\n  }\n}\n\n@mixin twelvePointsBurst($sideDimension, $color) {\n  $margin: $sideDimension * $sqrt5 / (3 + $sqrt5) / 2;\n  @include square($sideDimension, $color);\n  position: relative;\n  margin: $margin;\n\n  &::before,\n  &::after {\n    content: '';\n    position: absolute;\n    @include square($sideDimension, $color);\n  }\n\n  &::before {\n    transform: rotate(-30deg);\n  }\n\n  &::after {\n    transform: rotate(30deg);\n  }\n}\n\n@mixin eightPointsBurst($sideDimension, $color) {\n  $margin: $sideDimension / (2 + 2 / $cos45deg);\n  @include square($sideDimension, $color);\n  position: relative;\n  margin: $margin;\n\n  &::after {\n    content: '';\n    position: absolute;\n    @include square($sideDimension, $color);\n    transform: rotate(45deg);\n  }\n}\n\n@mixin yinYang($diameter, $color1, $color2) {\n  $borderWidth: 2px;\n  $innerDiameter: $diameter / 8;\n  $innerBorderWidth: ($diameter / 2 - $innerDiameter) / 2;\n  $top: ($diameter - ($innerDiameter + 2 * $innerBorderWidth)) / 2;\n  @include shape($color1);\n  position: relative;\n  width: $diameter;\n  height: $diameter / 2;\n  background-color: $color2;\n  border: $borderWidth solid $color1;\n  border-bottom-width: $diameter / 2 + $borderWidth;\n  border-radius: 50%;\n  box-sizing: content-box;\n\n  &::before,\n  &::after {\n    content: '';\n    position: absolute;\n  }\n\n  &::before {\n    @include circle($innerDiameter, $color2);\n    top: $top;\n    left: 0;\n    border: $innerBorderWidth solid $color1;\n  }\n\n  &::after {\n    @include circle($innerDiameter, $color1);\n    top: $top;\n    right: 0;\n    border: $innerBorderWidth solid $color2;\n  }\n}\n\n@mixin badgeRibbon($diameter, $color) {\n  $triangleHeight: $diameter * 0.7;\n  $triangleWidth: $diameter * 0.8;\n  $bottom: $diameter * 0.28;\n  @include circle($diameter, $color);\n  position: relative;\n  margin-bottom: $bottom;\n\n  &::before,\n  &::after {\n    content: '';\n    position: absolute;\n    top: $diameter / 2;\n  }\n\n  &::before {\n    @include isoscelesTriangle($triangleHeight, $triangleWidth, left, $color);\n    left: $diameter / 4;\n    transform: rotate(12deg);\n    transform-origin: 0 0;\n  }\n\n  &::after {\n    @include isoscelesTriangle($triangleHeight, $triangleWidth, right, $color);\n    right: $diameter / 4;\n    transform: rotate(-12deg);\n    transform-origin: 100% 0;\n  }\n}\n\n@mixin spaceInvader($pixel, $color) {\n  @include shape($color);\n  margin: $pixel * 3 $pixel * 5 $pixel * 4;\n  box-shadow: 0 0 0 1 * $pixel $color, 0 1 * $pixel 0 1 * $pixel $color,\n    -2.5 * $pixel 1.5 * $pixel 0 0.5 * $pixel $color,\n    2.5 * $pixel 1.5 * $pixel 0 0.5 * $pixel $color,\n    -3 * $pixel -3 * $pixel 0 0 $color, 3 * $pixel -3 * $pixel 0 0 $color,\n    -2 * $pixel -2 * $pixel 0 0 $color, 2 * $pixel -2 * $pixel 0 0 $color,\n    -3 * $pixel -1 * $pixel 0 0 $color, -2 * $pixel -1 * $pixel 0 0 $color,\n    2 * $pixel -1 * $pixel 0 0 $color, 3 * $pixel -1 * $pixel 0 0 $color,\n    -4 * $pixel 0 0 0 $color, -3 * $pixel 0 0 0 $color, 3 * $pixel 0 0 0 $color,\n    4 * $pixel 0 0 0 $color, -5 * $pixel 1 * $pixel 0 0 $color,\n    -4 * $pixel 1 * $pixel 0 0 $color, 4 * $pixel 1 * $pixel 0 0 $color,\n    5 * $pixel 1 * $pixel 0 0 $color, -5 * $pixel 2 * $pixel 0 0 $color,\n    5 * $pixel 2 * $pixel 0 0 $color, -5 * $pixel 3 * $pixel 0 0 $color,\n    -3 * $pixel 3 * $pixel 0 0 $color, 3 * $pixel 3 * $pixel 0 0 $color,\n    5 * $pixel 3 * $pixel 0 0 $color, -2 * $pixel 4 * $pixel 0 0 $color,\n    -1 * $pixel 4 * $pixel 0 0 $color, 1 * $pixel 4 * $pixel 0 0 $color,\n    2 * $pixel 4 * $pixel 0 0 $color;\n  width: 1 * $pixel;\n  height: 1 * $pixel;\n}\n\n@mixin tvScreen($height, $color) {\n  $width: $height * 4/3;\n  @include shape($color);\n  position: relative;\n  margin: 0 $height / 15;\n  width: $width;\n  height: $height;\n  border-radius: 50% / 10%;\n\n  &::after {\n    @include shape($color);\n    content: '';\n    position: absolute;\n    top: 10%;\n    bottom: 10%;\n    left: -5%;\n    right: -5%;\n    border-radius: 5% / 50%;\n  }\n}\n\n@mixin chevron($height, $color) {\n  $width: $height * 1.3;\n  $skewAngle: 10deg;\n  $skewHeight: $width * $tan10deg / 2;\n  @include emptyShape();\n  position: relative;\n  margin: $skewHeight $width * 2 $height + $skewHeight 0;\n  transform-origin: $width 0;\n\n  &::before,\n  &::after {\n    content: '';\n    position: absolute;\n    width: $width;\n    height: $height;\n    top: $skewHeight;\n    background-color: $color;\n  }\n\n  &::before {\n    left: 0;\n    transform-origin: 100% 0;\n    transform: skewY($skewAngle);\n  }\n\n  &::after {\n    left: $width;\n    transform-origin: 0 0;\n    transform: skewY(-$skewAngle);\n  }\n}\n\n@mixin magnifyingGlass($diameter, $color) {\n  $thickness: $diameter / 5;\n  $innerDiameter: $diameter - 2 * $thickness;\n  $handleLength: $diameter / 2 + $thickness;\n  $margin: $diameter * 0.275;\n  @include emptyShape();\n  position: relative;\n  width: $innerDiameter;\n  height: $innerDiameter;\n  margin: 0 $margin $margin 0;\n  border: $thickness solid $color;\n  border-radius: 50%;\n\n  &::after {\n    @include rectangle($handleLength, $thickness, $color);\n    content: '';\n    position: absolute;\n    left: $diameter - 2 * $thickness;\n    top: ($diameter - 3 * $thickness) / 2;\n    transform-origin: -($diameter / 2 - $thickness) $thickness / 2;\n    transform: rotateZ(45deg);\n  }\n}\n\n@mixin moon($diameter, $color) {\n  $thickness: $diameter * 0.1875;\n  $innerDiameter: $diameter - $thickness;\n  @include emptyShape();\n  width: $innerDiameter;\n  height: $innerDiameter;\n  margin: $thickness * -1 $thickness $thickness $thickness * -1;\n  border-radius: 50%;\n  box-shadow: $thickness $thickness 0 0 $color;\n}\n\n@mixin flag($width, $color) {\n  $top: $width / 2;\n  $bottom: $width / 4;\n  @include emptyShape();\n  border-width: $top $width / 2 $bottom;\n  border-style: solid;\n  border-color: $color $color transparent;\n}\n\n@mixin cone($width, $height, $color) {\n  @include emptyShape();\n  border-width: $height $width / 2 0;\n  border-style: solid;\n  border-color: $color transparent transparent;\n  border-radius: 50%;\n}\n\n@mixin cross($length, $color) {\n  $thickness: $length / 5;\n  $side: ($length - $thickness) / 2;\n  @include rectangle($thickness, $length, $color);\n  position: relative;\n  margin: 0 $side;\n\n  &::after {\n    @include rectangle($length, $thickness, $color);\n    content: '';\n    position: absolute;\n    left: -$side;\n    top: $side;\n  }\n}\n\n@mixin base($width, $color) {\n  $height: $width * 0.5;\n  $top: $width * 0.3;\n  @include rectangle($width, $height, $color);\n  position: relative;\n  margin-top: $top;\n\n  &::before {\n    @include isoscelesTriangle($top, $width, bottom, $color);\n    content: '';\n    position: absolute;\n    top: -$top;\n    left: 0;\n  }\n}\n\n@mixin pointer($width, $height, $color) {\n  @include emptyShape();\n  position: relative;\n  width: $width;\n  border-top: $height solid $color;\n  border-bottom: $height solid $color;\n  border-left: $height solid transparent;\n\n  &::after {\n    @include isoscelesTriangle($height, $height * 2, left, $color);\n    content: '';\n    position: absolute;\n    top: -$height;\n    right: -$height;\n  }\n}\n\n@mixin lock($width, $color) {\n  $holeWidth: $width / 6;\n  $holeHeight: $width / 2.8;\n  $loopWidth: $width / 2.2;\n  $loopHeight: $width / 2.5;\n  $thickness: $width / 6;\n  @include emptyShape();\n  position: relative;\n  width: $holeWidth;\n  height: $holeHeight;\n  margin-top: $loopHeight + $thickness;\n  border-style: solid;\n  border-color: $color;\n  border-width: $thickness ($width - $holeWidth) / 2;\n  border-radius: 16%;\n\n  &::before,\n  &::after {\n    content: '';\n    position: absolute;\n  }\n\n  &::before {\n    @include emptyShape();\n    top: -($loopHeight + 2 * $thickness);\n    left: -(($loopWidth - $holeWidth) / 2 + $thickness);\n    width: $loopWidth;\n    height: $loopHeight;\n    border: $thickness solid $color;\n    border-radius: 50% 50% 0 0;\n  }\n\n  &::after {\n    top: -$thickness;\n    left: -$thickness;\n    width: $holeWidth;\n    height: $holeHeight;\n    border: $thickness solid $color;\n    border-radius: 50%/36%;\n  }\n}"),references:[{name:"[CSS-TRICKS] The Shapes of CSS",url:"https://css-tricks.com/the-shapes-of-css/"}]}];i.d(n,"Shapes1Component",(function(){return g}));var g=function(){return o.a.createElement(r.a,{title:"Shapes 1",questions:h},o.a.createElement(c,{name:"Rectangle",type:"rectangle"}),o.a.createElement(c,{name:"Square",type:"square"}),o.a.createElement(c,{name:"Oval",type:"oval"}),o.a.createElement(c,{name:"Circle",type:"circle"}),o.a.createElement(c,{name:"Triangle Up",type:"triangleUp"}),o.a.createElement(c,{name:"Triangle Down",type:"triangleDown"}),o.a.createElement(c,{name:"Triangle Left",type:"triangleLeft"}),o.a.createElement(c,{name:"Triangle Right",type:"triangleRight"}),o.a.createElement(c,{name:"Triangle Top Left",type:"triangleTopLeft"}),o.a.createElement(c,{name:"Triangle Top Right",type:"triangleTopRight"}),o.a.createElement(c,{name:"Triangle Bottom Left",type:"triangleBottomLeft"}),o.a.createElement(c,{name:"Triangle Bottom Right",type:"triangleBottomRight"}),o.a.createElement(c,{name:"Curved Tail Arrow",type:"curvedTailArrow"}),o.a.createElement(c,{name:"Trapezoid",type:"trapezoid"}),o.a.createElement(c,{name:"Parallelogram",type:"parallelogram"}),o.a.createElement(c,{name:"6-Points Star",type:"sixPointsStar"}),o.a.createElement(c,{name:"5-Points Star",type:"fivePointsStar"}),o.a.createElement(c,{name:"Pentagon",type:"pentagon"}),o.a.createElement(c,{name:"Hexagon",type:"hexagon"}),o.a.createElement(c,{name:"Octagon",type:"octagon"}),o.a.createElement(c,{name:"Heart",type:"heart"}),o.a.createElement(c,{name:"Infinity",type:"infinity"}),o.a.createElement(c,{name:"Diamond Square",type:"diamondSquare"}),o.a.createElement(c,{name:"Diamond Shield",type:"diamondShield"}),o.a.createElement(c,{name:"Diamond Narrow",type:"diamondNarrow"}),o.a.createElement(c,{name:"Cut Diamond",type:"cutDiamond"}),o.a.createElement(c,{name:"Egg",type:"egg"}),o.a.createElement(c,{name:"Pac-Man",type:"pacman"}),o.a.createElement(c,{name:"Talk Bubble",type:"talkBubble"}),o.a.createElement(c,{name:"12-Points Burst",type:"twelvePointsBurst"}),o.a.createElement(c,{name:"8-Points Burst",type:"eightPointsBurst"}),o.a.createElement(c,{name:"Yin Yang",type:"yinYang"}),o.a.createElement(c,{name:"Badge Ribbon",type:"badgeRibbon"}),o.a.createElement(c,{name:"Space Invader",type:"spaceInvader"}),o.a.createElement(c,{name:"TV Screen",type:"tvScreen"}),o.a.createElement(c,{name:"Chevron",type:"chevron"}),o.a.createElement(c,{name:"Magnifying Glass",type:"magnifyingGlass"}),o.a.createElement(c,{name:"Moon",type:"moon"}),o.a.createElement(c,{name:"Flag",type:"flag"}),o.a.createElement(c,{name:"Cone",type:"cone"}),o.a.createElement(c,{name:"Cross",type:"cross"}),o.a.createElement(c,{name:"Base",type:"base"}),o.a.createElement(c,{name:"Pointer",type:"pointer"}),o.a.createElement(c,{name:"Lock",type:"lock"}))},p=Object(t.memo)(g);p.displayName="Shapes1";n.default=p}}]);
//# sourceMappingURL=css__Shapes1.87a7dc08.chunk.js.map