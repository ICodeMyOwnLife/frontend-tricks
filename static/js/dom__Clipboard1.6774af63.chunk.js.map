{"version":3,"sources":["components/References/index.tsx","components/Todos/index.tsx","components/QuestionItem/styles.ts","components/QuestionItem/index.tsx","components/QuestionPage/styles.ts","components/QuestionPage/index.tsx","components/PageLayout/styles.ts","components/PageLayout/index.tsx","components/CodeViewer/styles.ts","components/CodeViewer/index.tsx","components/Section/styles.ts","components/Section/index.tsx","pages/dom/Clipboard1/1.png","pages/dom/Clipboard1/2.png","pages/dom/Clipboard1/3.png","pages/dom/Clipboard1/questions.tsx","pages/dom/Clipboard1/styles.ts","pages/dom/Clipboard1/ImageShow.tsx","pages/dom/Clipboard1/utils.ts","pages/dom/Clipboard1/ImageSection.tsx","pages/dom/Clipboard1/index.tsx"],"names":["References","memo","className","references","variant","map","name","url","key","href","target","rel","displayName","Todos","todos","Box","Typography","todo","useStyles","makeStyles","theme","Question","fontWeight","HiddenContent","marginBottom","spacing","Answer","marginTop","padding","fontSize","backgroundColor","grey","border","borderRadius","margin","maxWidth","BottomBox","paddingBottom","borderBottom","BottomBoxTitle","QuestionItem","index","question","answer","classes","useToggle","open","toggleOpen","hasReferences","length","hasTodos","showBottomBox","ListItem","button","onClick","ListItemText","primary","Collapse","in","timeout","createStyles","root","questions","fontFamily","color","classNamePrefix","QuestionPage","children","props","PageLayout","List","questionInfo","content","title","clsx","CodeViewer","style","okaidia","language","Section","Title","titleVariant","titleClassName","Paper","elevation","module","exports","pasteInput","textAlign","pasteButton","pastedImage","display","marginLeft","marginRight","imageShow","flexDirection","alignItems","showedImage","copyButton","ImageShow","alt","src","handleCopy","useCallback","a","async","fetch","res","blob","item","ClipboardItem","type","navigator","clipboard","write","alert","message","useHandleCopy","Button","imageSources","img1","img2","img3","ImageSection","useState","setUrl","handlePaste","read","items","types","startsWith","getType","URL","createObjectURL","useHandlePaste","Input","fullWidth","onPaste","readOnly","value","Clipboard1Component","Clipboard1"],"mappings":"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","file":"static/js/dom__Clipboard1.6774af63.chunk.js","sourcesContent":["import React, { FC, memo } from 'react';\nimport { Box, Typography } from '@material-ui/core';\n\nexport const ReferencesComponent: FC<ReferencesProps> = ({\n  className,\n  references,\n}) => (\n  <Box className={className}>\n    <Typography variant=\"h5\">References</Typography>\n    <ol>\n      {references!.map(({ name, url }) => (\n        <li key={url}>\n          <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">\n            {name}\n          </a>\n        </li>\n      ))}\n    </ol>\n  </Box>\n);\n\nconst References = memo(ReferencesComponent);\nReferences.displayName = 'References';\nexport default References;\n\nexport interface ReferencesProps {\n  className?: string;\n  references: ReferenceInfo[];\n}\n\nexport interface ReferenceInfo {\n  name: string;\n  url?: string;\n}\n","import React, { FC, memo } from 'react';\nimport { Box, Typography } from '@material-ui/core';\n\nexport const TodosComponent: FC<TodosProps> = ({ className, todos }) => (\n  <Box>\n    <Typography className={className} variant=\"h5\">\n      Todos\n    </Typography>\n    <ol>\n      {todos!.map(todo => (\n        <li key={todo}>{todo}</li>\n      ))}\n    </ol>\n  </Box>\n);\n\nconst Todos = memo(TodosComponent);\nTodos.displayName = 'Todos';\nexport default Todos;\n\nexport interface TodosProps {\n  className?: string;\n  todos: string[];\n}\n","import { makeStyles, Theme } from '@material-ui/core';\nimport { grey } from '@material-ui/core/colors';\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  Question: {\n    fontWeight: 500,\n  },\n  HiddenContent: {\n    marginBottom: theme.spacing(2),\n  },\n  Answer: {\n    marginTop: theme.spacing(1.5),\n    padding: 0,\n    fontSize: 14,\n    backgroundColor: grey[50],\n    border: `1px solid ${grey[400]}`,\n    borderRadius: 6,\n\n    '& p': {\n      padding: theme.spacing(0, 2.5),\n    },\n\n    '& ol,ul': {\n      margin: theme.spacing(1.5, 0),\n    },\n\n    '& img': {\n      maxWidth: '100%',\n    },\n  },\n  BottomBox: {\n    paddingBottom: theme.spacing(2),\n    borderBottom: `1px solid ${grey[400]}`,\n\n    '& ol,ul': {\n      marginTop: theme.spacing(1),\n    },\n\n    '& li': {\n      fontSize: 14,\n      fontWeight: 500,\n      marginBottom: theme.spacing(1),\n    },\n  },\n  BottomBoxTitle: {\n    margin: theme.spacing(3, 0, 0),\n  },\n}));\n\nexport default useStyles;\n","import React, { FC, memo } from 'react';\nimport { ListItem, ListItemText, Collapse, Box } from '@material-ui/core';\nimport { useToggle } from 'cb-hooks';\nimport References from 'components/References';\nimport Todos from 'components/Todos';\nimport { QuestionInfo } from 'types/app-common';\nimport useStyles from './styles';\n\nexport const QuestionItemComponent: FC<QuestionItemProps> = ({\n  index,\n  question,\n  answer,\n  references,\n  todos,\n}) => {\n  const classes = useStyles();\n  const [open, toggleOpen] = useToggle(false);\n  const hasReferences = !!(references && references.length);\n  const hasTodos = !!(todos && todos.length);\n  const showBottomBox = hasReferences || hasTodos;\n\n  return (\n    <>\n      <ListItem button onClick={toggleOpen}>\n        <ListItemText classes={{ primary: classes.Question }}>\n          {index}. {question}\n        </ListItemText>\n      </ListItem>\n      <Collapse in={open} timeout=\"auto\">\n        <Box className={classes.HiddenContent}>\n          <Box className={classes.Answer}>{answer}</Box>\n\n          {showBottomBox && (\n            <Box className={classes.BottomBox}>\n              {hasReferences && (\n                <References\n                  className={classes.BottomBoxTitle}\n                  references={references!}\n                />\n              )}\n\n              {hasTodos && (\n                <Todos className={classes.BottomBoxTitle} todos={todos!} />\n              )}\n            </Box>\n          )}\n        </Box>\n      </Collapse>\n    </>\n  );\n};\n\nconst QuestionItem = memo(QuestionItemComponent);\nQuestionItem.displayName = 'QuestionItem';\nexport default QuestionItem;\n\nexport interface QuestionItemProps extends QuestionInfo {\n  index: number;\n}\n","import { Theme, makeStyles, createStyles } from '@material-ui/core';\n\nconst styles = ({ spacing }: Theme) =>\n  createStyles({\n    root: {},\n    questions: {\n      marginTop: spacing(4),\n      '& code': {\n        fontFamily: `'Courier New', Courier, monospace`,\n        fontSize: 14,\n        fontWeight: 600,\n        color: `rgb(219, 104, 27)`,\n      },\n    },\n  });\n\nconst useStyles = makeStyles(styles, { classNamePrefix: 'QuestionPage' });\n\nexport default useStyles;\n","/* eslint-disable react/no-array-index-key */\nimport React, { FC, memo, ReactNode } from 'react';\nimport { Box, Typography, List } from '@material-ui/core';\nimport QuestionItem from 'components/QuestionItem';\nimport { QuestionInfo } from 'types/app-common';\nimport PageLayout from 'components/PageLayout';\nimport useStyles from './styles';\n\nexport const QuestionPageComponent: FC<QuestionPageProps> = ({\n  questions,\n  children,\n  ...props\n}) => {\n  const classes = useStyles();\n\n  return (\n    <PageLayout {...props}>\n      {children}\n      <Box className={classes.questions}>\n        <Typography variant=\"h4\">Questions</Typography>\n        <Box>\n          <List>\n            {questions.map((questionInfo, index) => (\n              <QuestionItem key={index} index={index + 1} {...questionInfo} />\n            ))}\n          </List>\n        </Box>\n      </Box>\n    </PageLayout>\n  );\n};\n\nconst QuestionPage = memo(QuestionPageComponent);\nQuestionPage.displayName = 'QuestionPage';\nexport default QuestionPage;\n\nexport interface QuestionPageProps {\n  className?: string;\n  title: string;\n  questions: QuestionInfo[];\n  children?: ReactNode;\n}\n","import { makeStyles, createStyles, Theme } from '@material-ui/core';\n\nconst styles = ({ spacing }: Theme) =>\n  createStyles({\n    root: {\n      marginTop: spacing(4),\n    },\n    content: {\n      marginTop: spacing(2.5),\n    },\n  });\n\nconst useStyles = makeStyles(styles, { classNamePrefix: 'PageLayout' });\n\nexport default useStyles;\n","import React, { FC, memo, ReactNode } from 'react';\nimport { Box, Typography } from '@material-ui/core';\nimport clsx from 'clsx';\nimport useStyles from './styles';\n\nexport const PageLayoutComponent: FC<PageLayoutProps> = ({\n  className,\n  title,\n  children,\n}) => {\n  const classes = useStyles();\n\n  return (\n    <Box className={clsx(classes.root, className)}>\n      <Typography variant=\"h3\">{title}</Typography>\n      <Box className={classes.content}>{children}</Box>\n    </Box>\n  );\n};\n\nconst PageLayout = memo(PageLayoutComponent);\nPageLayout.displayName = 'PageLayout';\nexport default PageLayout;\n\nexport interface PageLayoutProps {\n  className?: string;\n  title: string;\n  children: ReactNode;\n}\n","import { makeStyles, Theme } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  CodeViewer: {\n    '& pre': {\n      margin: '0 !important',\n      borderRadius: 6,\n    },\n\n    '&~$CodeViewer': {\n      marginTop: theme.spacing(2),\n    },\n  },\n}));\n\nexport default useStyles;\n","import React, { FC, memo } from 'react';\nimport clsx from 'clsx';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { okaidia } from 'react-syntax-highlighter/dist/esm/styles/prism';\nimport useStyles from './styles';\n\nexport const CodeViewerComponent: FC<CodeViewerProps> = ({\n  className,\n  children,\n  style = okaidia,\n  language,\n}) => {\n  const classes = useStyles();\n\n  return (\n    <div className={clsx(classes.CodeViewer, className)}>\n      <SyntaxHighlighter language={language} style={style}>\n        {children}\n      </SyntaxHighlighter>\n    </div>\n  );\n};\n\nconst CodeViewer = memo(CodeViewerComponent);\nCodeViewer.displayName = 'CodeViewer';\nexport default CodeViewer;\n\nexport interface CodeViewerProps {\n  className?: string;\n  style?: object;\n  children: string;\n  language: CodeViewerLanguage;\n}\n\nexport type CodeViewerLanguage =\n  | 'abap'\n  | 'actionscript'\n  | 'ada'\n  | 'apacheconf'\n  | 'apl'\n  | 'applescript'\n  | 'arduino'\n  | 'arff'\n  | 'asciidoc'\n  | 'asm6502'\n  | 'aspnet'\n  | 'autohotkey'\n  | 'autoit'\n  | 'bash'\n  | 'basic'\n  | 'batch'\n  | 'bison'\n  | 'brainfuck'\n  | 'bro'\n  | 'c'\n  | 'clike'\n  | 'clojure'\n  | 'coffeescript'\n  | 'cpp'\n  | 'crystal'\n  | 'csharp'\n  | 'csp'\n  | 'cssExtras'\n  | 'css-extras'\n  | 'css'\n  | 'd'\n  | 'dart'\n  | 'diff'\n  | 'django'\n  | 'docker'\n  | 'eiffel'\n  | 'elixir'\n  | 'elm'\n  | 'erb'\n  | 'erlang'\n  | 'flow'\n  | 'fortran'\n  | 'fsharp'\n  | 'gedcom'\n  | 'gherkin'\n  | 'git'\n  | 'glsl'\n  | 'go'\n  | 'graphql'\n  | 'groovy'\n  | 'haml'\n  | 'handlebars'\n  | 'haskell'\n  | 'haxe'\n  | 'hpkp'\n  | 'hsts'\n  | 'http'\n  | 'ichigojam'\n  | 'icon'\n  | 'inform7'\n  | 'ini'\n  | 'io'\n  | 'j'\n  | 'java'\n  | 'javascript'\n  | 'jolie'\n  | 'json'\n  | 'jsx'\n  | 'julia'\n  | 'keyman'\n  | 'kotlin'\n  | 'latex'\n  | 'less'\n  | 'liquid'\n  | 'lisp'\n  | 'livescript'\n  | 'lolcode'\n  | 'lua'\n  | 'makefile'\n  | 'markdown'\n  | 'markupTemplating'\n  | 'markup-templating'\n  | 'markup'\n  | 'matlab'\n  | 'mel'\n  | 'mizar'\n  | 'monkey'\n  | 'n4js'\n  | 'nasm'\n  | 'nginx'\n  | 'nim'\n  | 'nix'\n  | 'nsis'\n  | 'objectivec'\n  | 'ocaml'\n  | 'opencl'\n  | 'oz'\n  | 'parigp'\n  | 'parser'\n  | 'pascal'\n  | 'perl'\n  | 'phpExtras'\n  | 'php-extras'\n  | 'php'\n  | 'plsql'\n  | 'powershell'\n  | 'processing'\n  | 'prolog'\n  | 'properties'\n  | 'protobuf'\n  | 'pug'\n  | 'puppet'\n  | 'pure'\n  | 'python'\n  | 'q'\n  | 'qore'\n  | 'r'\n  | 'reason'\n  | 'renpy'\n  | 'rest'\n  | 'rip'\n  | 'roboconf'\n  | 'ruby'\n  | 'rust'\n  | 'sas'\n  | 'sass'\n  | 'scala'\n  | 'scheme'\n  | 'scss'\n  | 'smalltalk'\n  | 'smarty'\n  | 'soy'\n  | 'sql'\n  | 'stylus'\n  | 'swift'\n  | 'tap'\n  | 'tcl'\n  | 'textile'\n  | 'tsx'\n  | 'tt2'\n  | 'twig'\n  | 'typescript'\n  | 'vbnet'\n  | 'velocity'\n  | 'verilog'\n  | 'vhdl'\n  | 'vim'\n  | 'visualBasic'\n  | 'visual-basic'\n  | 'wasm'\n  | 'wiki'\n  | 'xeora'\n  | 'xojo'\n  | 'xquery'\n  | 'yaml';\n","import { Theme, makeStyles } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  Section: {\n    marginBottom: theme.spacing(4),\n    padding: theme.spacing(3),\n  },\n  Title: {\n    marginBottom: theme.spacing(2),\n  },\n}));\n\nexport default useStyles;\n","import React, { FC, memo, ReactNode } from 'react';\nimport clsx from 'clsx';\nimport { Paper, Typography } from '@material-ui/core';\nimport { TypographyProps } from '@material-ui/core/Typography';\nimport useStyles from './styles';\n\nexport const SectionComponent: FC<SectionProps> = ({\n  className,\n  title,\n  titleVariant = 'h6',\n  titleClassName,\n  children,\n}) => {\n  const classes = useStyles();\n\n  return (\n    <Paper className={clsx(classes.Section, className)} elevation={0}>\n      <Typography\n        className={clsx(classes.Title, titleClassName)}\n        variant={titleVariant}\n      >\n        {title}\n      </Typography>\n      {children}\n    </Paper>\n  );\n};\n\nconst Section = memo(SectionComponent);\nSection.displayName = 'Section';\nexport default Section;\n\nexport interface SectionProps {\n  className?: string;\n  title: string;\n  titleVariant?: TypographyProps['variant'];\n  titleClassName?: string;\n  children?: ReactNode;\n}\n","module.exports = __webpack_public_path__ + \"static/media/1.e6db6467.png\";","module.exports = __webpack_public_path__ + \"static/media/2.8e9d7859.png\";","module.exports = __webpack_public_path__ + \"static/media/3.79eb3c44.png\";","import React from 'react';\nimport CodeViewer from 'components/CodeViewer';\nimport { QuestionInfo } from 'types/app-common';\n\nconst questions: QuestionInfo[] = [\n  {\n    question: `How to copy image to clipboard?`,\n    answer: (\n      <div>\n        <p>\n          Use <code>navigator.clipboard.write()</code>\n        </p>\n        <CodeViewer language=\"tsx\">\n          {`export const useHandleCopy = ({ src }: { src: string }) =>\n  useCallback(async () => {\n    const res = await fetch(src);\n    const blob = await res.blob();\n    try {\n      const item = new ClipboardItem({ [blob.type]: blob });\n      await navigator.clipboard.write([item]);\n      alert('Copied to clipboard');\n    } catch (error) {\n      alert(error.message);\n    }\n  }, [src]);`}\n        </CodeViewer>\n      </div>\n    ),\n  },\n  {\n    question: `How to get image from clipboard?`,\n    answer: (\n      <div>\n        <p>\n          Use <code>navigator.clipboard.read</code>\n        </p>\n        <CodeViewer language=\"tsx\">\n          {`export const useHandlePaste = () => {\n  const [url, setUrl] = useState('');\n  const handlePaste = useCallback(async () => {\n    setUrl('');\n    try {\n      const items = await navigator.clipboard.read();\n      let blob: Blob | undefined;\n      for (const item of items) {\n        for (const type of item.types) {\n          if (type.startsWith('image')) {\n            blob = await item.getType(type);\n            break;\n          }\n        }\n      }\n      if (blob) {\n        setUrl(URL.createObjectURL(blob));\n      }\n    } catch (error) {\n      alert(error.message);\n    }\n  }, []);\n\n  return { handlePaste, url };\n};`}\n        </CodeViewer>\n      </div>\n    ),\n  },\n];\n\nexport default questions;\n","import { makeStyles, createStyles, Theme } from '@material-ui/core';\n\nconst styles = ({ spacing }: Theme) =>\n  createStyles({\n    pasteInput: {\n      marginTop: spacing(3),\n      textAlign: 'center',\n    },\n    pasteButton: {\n      marginTop: spacing(2),\n    },\n    pastedImage: {\n      display: 'block',\n      maxWidth: '100%',\n      marginTop: spacing(3),\n      marginLeft: 'auto',\n      marginRight: 'auto',\n    },\n    imageShow: {\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n      marginTop: spacing(3),\n    },\n    showedImage: {\n      maxWidth: '100%',\n    },\n    copyButton: {\n      marginTop: spacing(2),\n    },\n  });\n\nconst useStyles = makeStyles(styles, { classNamePrefix: 'Clipboard1' });\n\nexport default useStyles;\n","import React, { FC, memo, ImgHTMLAttributes } from 'react';\nimport { Box, Button } from '@material-ui/core';\nimport { useHandleCopy } from './utils';\nimport useStyles from './styles';\n\nexport const ImageShowComponent: FC<ImageShowProps> = ({\n  alt,\n  src,\n  ...props\n}) => {\n  const classes = useStyles();\n  const handleCopy = useHandleCopy({ src });\n\n  return (\n    <Box className={classes.imageShow}>\n      <img {...props} alt={alt} className={classes.showedImage} src={src} />\n      <Button\n        className={classes.copyButton}\n        color=\"secondary\"\n        onClick={handleCopy}\n        variant=\"contained\"\n      >\n        Copy Image\n      </Button>\n    </Box>\n  );\n};\n\nconst ImageShow = memo(ImageShowComponent);\nImageShow.displayName = 'ImageShow';\nexport default ImageShow;\n\nexport interface ImageShowProps extends ImgHTMLAttributes<HTMLImageElement> {\n  alt: string;\n  src: string;\n}\n","/* eslint-disable no-await-in-loop */\n/* eslint-disable no-restricted-syntax */\n/* eslint-disable no-alert */\nimport { useState, useCallback } from 'react';\n\nexport const useHandleCopy = ({ src }: { src: string }) =>\n  useCallback(async () => {\n    const res = await fetch(src);\n    const blob = await res.blob();\n    try {\n      const item = new ClipboardItem({ [blob.type]: blob });\n      await navigator.clipboard.write([item]);\n      alert('Copied to clipboard');\n    } catch (error) {\n      alert(error.message);\n    }\n  }, [src]);\n\nexport const useHandlePaste = () => {\n  const [url, setUrl] = useState('');\n  const handlePaste = useCallback(async () => {\n    setUrl('');\n    try {\n      const items = await navigator.clipboard.read();\n      let blob: Blob | undefined;\n      for (const item of items) {\n        for (const type of item.types) {\n          if (type.startsWith('image')) {\n            blob = await item.getType(type);\n            break;\n          }\n        }\n      }\n      if (blob) {\n        setUrl(URL.createObjectURL(blob));\n      }\n    } catch (error) {\n      alert(error.message);\n    }\n  }, []);\n\n  return { handlePaste, url };\n};\n","import React, { FC, memo } from 'react';\nimport { Input, Button } from '@material-ui/core';\nimport Section from 'components/Section';\nimport { useHandlePaste } from './utils';\nimport img1 from './1.png';\nimport img2 from './2.png';\nimport img3 from './3.png';\nimport useStyles from './styles';\nimport ImageShow from './ImageShow';\n\nconst imageSources = [\n  { name: 'Image 1', src: img1 },\n  { name: 'Image 2', src: img2 },\n  { name: 'Image 3', src: img3 },\n];\n\nexport const ImageSectionComponent: FC<ImageSectionProps> = () => {\n  const classes = useStyles();\n  const { handlePaste, url } = useHandlePaste();\n\n  return (\n    <Section title=\"Copy Image\">\n      {imageSources.map(({ name, src }) => (\n        <ImageShow alt={name} key={src} src={src} />\n      ))}\n      <Input\n        className={classes.pasteInput}\n        fullWidth\n        onPaste={handlePaste}\n        readOnly\n        value=\"(Paste Here)\"\n      />\n      <Button\n        className={classes.pasteButton}\n        color=\"primary\"\n        onClick={handlePaste}\n        variant=\"contained\"\n      >\n        Paste Image\n      </Button>\n      {url && <img alt=\"clipboard\" className={classes.pastedImage} src={url} />}\n    </Section>\n  );\n};\n\nconst ImageSection = memo(ImageSectionComponent);\nImageSection.displayName = 'ImageSection';\nexport default ImageSection;\n\nexport interface ImageSectionProps {}\n","import React, { FC, memo } from 'react';\nimport QuestionPage from 'components/QuestionPage';\nimport questions from './questions';\nimport ImageSection from './ImageSection';\n\nexport const Clipboard1Component: FC = () => (\n  <QuestionPage title=\"Clipboard 1\" questions={questions}>\n    <ImageSection />\n  </QuestionPage>\n);\n\nconst Clipboard1 = memo(Clipboard1Component);\nClipboard1.displayName = 'Clipboard1';\nexport default Clipboard1;\n"],"sourceRoot":""}