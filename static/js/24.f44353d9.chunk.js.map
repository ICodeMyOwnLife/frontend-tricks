{"version":3,"sources":["components/Question/index.tsx","questions/css/Newline1/questions.tsx","questions/css/Newline1/index.tsx","components/Question/styles.module.scss","../node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/@babel/runtime/helpers/esm/nonIterableRest.js"],"names":["Question","memo","title","questions","children","className","classes","Container","Title","Content","Questions","map","index","question","answer","references","key","Index","Answer","length","References","name","url","href","target","rel","displayName","text","whiteSpaceStyleValues","NewlineImpl","useState","whitespaceStyleValue","setWhitespaceStyleValue","value","onChange","e","style","whiteSpace","Newline","module","exports","_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","prototype","toString","call","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","err","TypeError"],"mappings":"0GAAA,qCA4CMA,EAAWC,gBAzC8B,SAAC,GAAD,IAC7CC,EAD6C,EAC7CA,MACAC,EAF6C,EAE7CA,UACAC,EAH6C,EAG7CA,SAH6C,OAK7C,yBAAKC,UAAWC,IAAQC,WACtB,wBAAIF,UAAWC,IAAQE,OAAQN,GAC/B,yBAAKG,UAAWC,IAAQG,SAAUL,GAClC,yBAAKC,UAAWC,IAAQI,WACtB,yCACA,6BACGP,EAAUQ,KAAI,WAAmCC,GAAnC,IAAGC,EAAH,EAAGA,SAAUC,EAAb,EAAaA,OAAQC,EAArB,EAAqBA,WAArB,OAEb,6BAASC,IAAKJ,GACZ,6BAASP,UAAWC,IAAQN,UAC1B,0BAAMK,UAAWC,IAAQW,OAAQL,EAAQ,EAAzC,KADF,IACuDC,GAGvD,yBAAKR,UAAWC,IAAQY,QAASJ,GAEhCC,GAAcA,EAAWI,QACxB,yBAAKd,UAAWC,IAAQc,YACtB,0CACA,4BACGL,EAAWJ,KAAI,gBAAGU,EAAH,EAAGA,KAAMC,EAAT,EAASA,IAAT,OACd,wBAAIN,IAAKM,GACP,uBAAGC,KAAMD,EAAKE,OAAO,SAASC,IAAI,uBAC/BJ,mBAezBrB,EAAS0B,YAAc,WACR1B,O,4ECXAG,EAhCmB,CAChC,CACEU,SACE,gEACiC,qCADjC,gBAIFC,OACE,4BACE,qCACQ,kDADR,OAC0C,IACxC,uDAFF,OAEyC,IACvC,uDAHF,KAKA,uCACU,qCADV,cAKJC,WAAY,CACV,CACEM,KAAM,2BACNC,IAAK,2DAEP,CACED,KAAM,oBACNC,IAAK,mE,4CCzBb,IAAMK,EAAI,gFAEJC,EAAgD,CACpD,UACA,UACA,SACA,SACA,MACA,WACA,WACA,UAGWC,EAAkB,WAAO,IAAD,EACqBC,mBACtDF,EAAsB,IAFW,mBAC5BG,EAD4B,KACNC,EADM,KAKnC,OACE,kBAAChC,EAAA,EAAD,CAAUE,MAAM,YAAYC,UAAWA,GACrC,6BACE,6BACE,4BACE8B,MAAOF,EACPG,SAAU,SAAAC,GAAC,OACTH,EAAwBG,EAAEX,OAAOS,SAGlCL,EAAsBjB,KAAI,SAAAsB,GAAK,OAC9B,4BAAQjB,IAAKiB,EAAOA,MAAOA,GACxBA,QAKT,uBAAGG,MAAO,CAAEC,WAAYN,IAAyBJ,GACjD,6BAAMA,MAMRW,EAAUrC,eAAK4B,GACrBS,EAAQZ,YAAc,UACPY,a,mBC/CfC,EAAOC,QAAU,CAAC,UAAY,0BAA0B,MAAQ,sBAAsB,QAAU,wBAAwB,UAAY,0BAA0B,SAAW,yBAAyB,MAAQ,sBAAsB,OAAS,uBAAuB,WAAa,6B,gCCE9P,SAASC,EAAeC,EAAKC,GAC1C,OCJa,SAAyBD,GACtC,GAAIE,MAAMC,QAAQH,GAAM,OAAOA,EDGxB,CAAeA,IEJT,SAA+BA,EAAKC,GACjD,GAAMG,OAAOC,YAAYC,OAAON,IAAgD,uBAAxCM,OAAOC,UAAUC,SAASC,KAAKT,GAAvE,CAIA,IAAIU,EAAO,GACPC,GAAK,EACLC,GAAK,EACLC,OAAKC,EAET,IACE,IAAK,IAAiCC,EAA7BC,EAAKhB,EAAII,OAAOC,cAAmBM,GAAMI,EAAKC,EAAGC,QAAQC,QAChER,EAAKS,KAAKJ,EAAGxB,QAETU,GAAKS,EAAKjC,SAAWwB,GAH8CU,GAAK,IAK9E,MAAOS,GACPR,GAAK,EACLC,EAAKO,EACL,QACA,IACOT,GAAsB,MAAhBK,EAAW,QAAWA,EAAW,SAC5C,QACA,GAAIJ,EAAI,MAAMC,GAIlB,OAAOH,GFvBuB,CAAqBV,EAAKC,IGJ3C,WACb,MAAM,IAAIoB,UAAU,wDHG0C,GAJhE","file":"static/js/24.f44353d9.chunk.js","sourcesContent":["import React, { FC, memo, ReactNode } from 'react';\nimport classes from './styles.module.scss';\n\nexport const QuestionImpl: FC<QuestionProps> = ({\n  title,\n  questions,\n  children,\n}) => (\n  <div className={classes.Container}>\n    <h2 className={classes.Title}>{title}</h2>\n    <div className={classes.Content}>{children}</div>\n    <div className={classes.Questions}>\n      <h3>Questions</h3>\n      <div>\n        {questions.map(({ question, answer, references }, index) => (\n          // eslint-disable-next-line react/no-array-index-key\n          <details key={index}>\n            <summary className={classes.Question}>\n              <span className={classes.Index}>{index + 1}.</span> {question}\n            </summary>\n\n            <div className={classes.Answer}>{answer}</div>\n\n            {references && references.length && (\n              <div className={classes.References}>\n                <h4>References</h4>\n                <ol>\n                  {references.map(({ name, url }) => (\n                    <li key={url}>\n                      <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">\n                        {name}\n                      </a>\n                    </li>\n                  ))}\n                </ol>\n              </div>\n            )}\n          </details>\n        ))}\n      </div>\n    </div>\n  </div>\n);\n\nconst Question = memo(QuestionImpl);\nQuestion.displayName = 'Question';\nexport default Question;\n\nexport interface QuestionProps {\n  title: string;\n  questions: QuestionInfo[];\n  children?: ReactNode;\n}\n\nexport interface QuestionInfo {\n  question: ReactNode;\n  answer: ReactNode;\n  references?: ReferenceInfo[];\n}\n\nexport interface ReferenceInfo {\n  name: string;\n  url?: string;\n}\n","import React from 'react';\nimport { QuestionInfo } from 'components/Question';\n\nconst questions: QuestionInfo[] = [\n  {\n    question: (\n      <span>\n        How to wrap text at a newline (<code>\\n</code>) character?\n      </span>\n    ),\n    answer: (\n      <ol>\n        <li>\n          Using <code>white-space: pre</code>, or{' '}\n          <code>white-space: pre-line</code>, or{' '}\n          <code>white-space: pre-wrap</code>.\n        </li>\n        <li>\n          Using a <code>pre</code> element.\n        </li>\n      </ol>\n    ),\n    references: [\n      {\n        name: '[CSS-TRICKS] white-space',\n        url: 'https://css-tricks.com/almanac/properties/w/whitespace/',\n      },\n      {\n        name: '[MDN] white-space',\n        url: 'https://developer.mozilla.org/en-US/docs/Web/CSS/white-space',\n      },\n    ],\n  },\n];\n\nexport default questions;\n","import React, { FC, memo, useState, CSSProperties } from 'react';\nimport Question from 'components/Question';\nimport questions from './questions';\n\nconst text = `This is first paragraph.\\nThis is second paragraph.\\nThis is third paragraph.`;\n\nconst whiteSpaceStyleValues: WhiteSpaceStyleValue[] = [\n  'inherit',\n  'initial',\n  'normal',\n  'nowrap',\n  'pre',\n  'pre-line',\n  'pre-wrap',\n  'revert',\n];\n\nexport const NewlineImpl: FC = () => {\n  const [whitespaceStyleValue, setWhitespaceStyleValue] = useState(\n    whiteSpaceStyleValues[0],\n  );\n\n  return (\n    <Question title=\"Newline 1\" questions={questions}>\n      <div>\n        <div>\n          <select\n            value={whitespaceStyleValue}\n            onChange={e =>\n              setWhitespaceStyleValue(e.target.value as WhiteSpaceStyleValue)\n            }\n          >\n            {whiteSpaceStyleValues.map(value => (\n              <option key={value} value={value}>\n                {value}\n              </option>\n            ))}\n          </select>\n        </div>\n        <p style={{ whiteSpace: whitespaceStyleValue }}>{text}</p>\n        <pre>{text}</pre>\n      </div>\n    </Question>\n  );\n};\n\nconst Newline = memo(NewlineImpl);\nNewline.displayName = 'Newline';\nexport default Newline;\n\ntype WhiteSpaceStyleValue = CSSProperties['whiteSpace'];\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"styles_Container__12Mbc\",\"Title\":\"styles_Title__2qxOI\",\"Content\":\"styles_Content__2wB8J\",\"Questions\":\"styles_Questions__1t11e\",\"Question\":\"styles_Question__3wRhS\",\"Index\":\"styles_Index__1JqtT\",\"Answer\":\"styles_Answer__2snZe\",\"References\":\"styles_References__2N6Wn\"};","import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) {\n    return;\n  }\n\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}"],"sourceRoot":""}