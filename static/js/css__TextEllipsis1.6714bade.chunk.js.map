{"version":3,"sources":["components/QuestionItem/styles.ts","components/QuestionItem/index.tsx","components/QuestionPage/styles.ts","components/QuestionPage/index.tsx","components/Code/index.tsx","components/Code/styles.module.scss","questions/css/TextEllipsis1/styles.module.scss","questions/css/TextEllipsis1/questions.tsx","questions/css/TextEllipsis1/index.tsx"],"names":["useStyles","makeStyles","theme","Question","fontWeight","Answer","marginTop","spacing","padding","fontSize","backgroundColor","grey","border","borderRadius","margin","maxWidth","References","marginBottom","QuestionItem","memo","index","question","answer","references","classes","useToggle","open","toggleOpen","ListItem","button","onClick","ListItemText","primary","Collapse","in","timeout","Box","className","length","Typography","variant","map","name","url","key","href","target","rel","displayName","Container","Content","Questions","fontFamily","color","QuestionPage","title","questions","children","List","questionInfo","Code","style","okaidia","language","classnames","module","exports","TextEllipsis1Impl","Table","Table1","Col1","Col2","Col3","Col4","n","Td1","Td4","Table2","TextEllipsis1"],"mappings":"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","file":"static/js/css__TextEllipsis1.6714bade.chunk.js","sourcesContent":["import { makeStyles, Theme } from '@material-ui/core';\nimport { grey } from '@material-ui/core/colors';\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  Question: {\n    fontWeight: 500,\n  },\n  Answer: {\n    marginTop: theme.spacing(1.5),\n    padding: 0,\n    fontSize: 14,\n    backgroundColor: grey[50],\n    border: `1px solid ${grey[400]}`,\n    borderRadius: 6,\n\n    '& p': {\n      padding: theme.spacing(0, 2.5),\n    },\n\n    '& ol,ul': {\n      margin: theme.spacing(1.5, 0),\n    },\n\n    '& img': {\n      maxWidth: '100%',\n    },\n  },\n  References: {\n    margin: theme.spacing(3, 0, 0),\n\n    '& ol': {\n      marginTop: theme.spacing(1),\n    },\n\n    '& li': {\n      fontSize: 14,\n      fontWeight: 500,\n      marginBottom: theme.spacing(1),\n    },\n  },\n}));\n\nexport default useStyles;\n","import React, { FC, memo } from 'react';\nimport { QuestionInfo } from 'types/app-common';\nimport {\n  ListItem,\n  ListItemText,\n  Collapse,\n  Box,\n  Typography,\n} from '@material-ui/core';\nimport useToggle from 'hooks/useToggle';\nimport useStyles from './styles';\n\nexport const QuestionItemComponent: FC<QuestionItemProps> = ({\n  index,\n  question,\n  answer,\n  references,\n}) => {\n  const classes = useStyles();\n  const [open, toggleOpen] = useToggle(false);\n\n  return (\n    <>\n      <ListItem button onClick={toggleOpen}>\n        <ListItemText classes={{ primary: classes.Question }}>\n          {index}. {question}\n        </ListItemText>\n      </ListItem>\n      <Collapse in={open} timeout=\"auto\">\n        <Box className={classes.Answer}>{answer}</Box>\n        {!!references && references.length && (\n          <Box className={classes.References}>\n            <Typography variant=\"h4\">References</Typography>\n            <ol>\n              {references.map(({ name, url }) => (\n                <li key={url}>\n                  <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">\n                    {name}\n                  </a>\n                </li>\n              ))}\n            </ol>\n          </Box>\n        )}\n      </Collapse>\n    </>\n  );\n};\n\nconst QuestionItem = memo(QuestionItemComponent);\nQuestionItem.displayName = 'QuestionItem';\nexport default QuestionItem;\n\nexport interface QuestionItemProps extends QuestionInfo {\n  index: number;\n}\n","import { Theme, makeStyles } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  Container: {\n    marginTop: theme.spacing(4),\n  },\n  Content: {\n    marginTop: theme.spacing(2.5),\n  },\n  Questions: {\n    marginTop: theme.spacing(4),\n\n    '& code': {\n      fontFamily: `'Courier New', Courier, monospace`,\n      fontSize: 14,\n      fontWeight: 600,\n      color: `rgb(219, 104, 27)`,\n    },\n  },\n}));\n\nexport default useStyles;\n","/* eslint-disable react/no-array-index-key */\n/* eslint-disable react/jsx-props-no-spreading */\nimport React, { FC, memo, ReactNode } from 'react';\nimport { Box, Typography, List } from '@material-ui/core';\nimport QuestionItem from 'components/QuestionItem';\nimport { QuestionInfo } from 'types/app-common';\nimport useStyles from './styles';\n\nexport const QuestionPageImpl: FC<QuestionPageProps> = ({\n  title,\n  questions,\n  children,\n}) => {\n  const classes = useStyles();\n\n  return (\n    <Box className={classes.Container}>\n      <Typography variant=\"h2\">{title}</Typography>\n      <Box className={classes.Content}>{children}</Box>\n      <Box className={classes.Questions}>\n        <Typography variant=\"h3\">Questions</Typography>\n        <Box>\n          <List>\n            {questions.map((questionInfo, index) => (\n              <QuestionItem key={index} index={index + 1} {...questionInfo} />\n            ))}\n          </List>\n        </Box>\n      </Box>\n    </Box>\n  );\n};\n\nconst QuestionPage = memo(QuestionPageImpl);\nQuestionPage.displayName = 'QuestionPage';\nexport default QuestionPage;\n\nexport interface QuestionPageProps {\n  title: string;\n  questions: QuestionInfo[];\n  children?: ReactNode;\n}\n","import React, { FC, memo } from 'react';\nimport classnames from 'classnames';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { okaidia } from 'react-syntax-highlighter/dist/esm/styles/prism';\nimport classes from './styles.module.scss';\n\nexport const CodeImpl: FC<CodeProps> = ({\n  className,\n  children,\n  style = okaidia,\n  language,\n}) => (\n  <div className={classnames(classes.Code, className)}>\n    <SyntaxHighlighter language={language} style={style}>\n      {children}\n    </SyntaxHighlighter>\n  </div>\n);\n\nconst Code = memo(CodeImpl);\nCode.displayName = 'Code';\nexport default Code;\n\nexport interface CodeProps {\n  className?: string;\n  style?: object;\n  children: string;\n  language: Language;\n}\n\nexport type Language =\n  | 'abap'\n  | 'actionscript'\n  | 'ada'\n  | 'apacheconf'\n  | 'apl'\n  | 'applescript'\n  | 'arduino'\n  | 'arff'\n  | 'asciidoc'\n  | 'asm6502'\n  | 'aspnet'\n  | 'autohotkey'\n  | 'autoit'\n  | 'bash'\n  | 'basic'\n  | 'batch'\n  | 'bison'\n  | 'brainfuck'\n  | 'bro'\n  | 'c'\n  | 'clike'\n  | 'clojure'\n  | 'coffeescript'\n  | 'cpp'\n  | 'crystal'\n  | 'csharp'\n  | 'csp'\n  | 'cssExtras'\n  | 'css-extras'\n  | 'css'\n  | 'd'\n  | 'dart'\n  | 'diff'\n  | 'django'\n  | 'docker'\n  | 'eiffel'\n  | 'elixir'\n  | 'elm'\n  | 'erb'\n  | 'erlang'\n  | 'flow'\n  | 'fortran'\n  | 'fsharp'\n  | 'gedcom'\n  | 'gherkin'\n  | 'git'\n  | 'glsl'\n  | 'go'\n  | 'graphql'\n  | 'groovy'\n  | 'haml'\n  | 'handlebars'\n  | 'haskell'\n  | 'haxe'\n  | 'hpkp'\n  | 'hsts'\n  | 'http'\n  | 'ichigojam'\n  | 'icon'\n  | 'inform7'\n  | 'ini'\n  | 'io'\n  | 'j'\n  | 'java'\n  | 'javascript'\n  | 'jolie'\n  | 'json'\n  | 'jsx'\n  | 'julia'\n  | 'keyman'\n  | 'kotlin'\n  | 'latex'\n  | 'less'\n  | 'liquid'\n  | 'lisp'\n  | 'livescript'\n  | 'lolcode'\n  | 'lua'\n  | 'makefile'\n  | 'markdown'\n  | 'markupTemplating'\n  | 'markup-templating'\n  | 'markup'\n  | 'matlab'\n  | 'mel'\n  | 'mizar'\n  | 'monkey'\n  | 'n4js'\n  | 'nasm'\n  | 'nginx'\n  | 'nim'\n  | 'nix'\n  | 'nsis'\n  | 'objectivec'\n  | 'ocaml'\n  | 'opencl'\n  | 'oz'\n  | 'parigp'\n  | 'parser'\n  | 'pascal'\n  | 'perl'\n  | 'phpExtras'\n  | 'php-extras'\n  | 'php'\n  | 'plsql'\n  | 'powershell'\n  | 'processing'\n  | 'prolog'\n  | 'properties'\n  | 'protobuf'\n  | 'pug'\n  | 'puppet'\n  | 'pure'\n  | 'python'\n  | 'q'\n  | 'qore'\n  | 'r'\n  | 'reason'\n  | 'renpy'\n  | 'rest'\n  | 'rip'\n  | 'roboconf'\n  | 'ruby'\n  | 'rust'\n  | 'sas'\n  | 'sass'\n  | 'scala'\n  | 'scheme'\n  | 'scss'\n  | 'smalltalk'\n  | 'smarty'\n  | 'soy'\n  | 'sql'\n  | 'stylus'\n  | 'swift'\n  | 'tap'\n  | 'tcl'\n  | 'textile'\n  | 'tsx'\n  | 'tt2'\n  | 'twig'\n  | 'typescript'\n  | 'vbnet'\n  | 'velocity'\n  | 'verilog'\n  | 'vhdl'\n  | 'vim'\n  | 'visualBasic'\n  | 'visual-basic'\n  | 'wasm'\n  | 'wiki'\n  | 'xeora'\n  | 'xojo'\n  | 'xquery'\n  | 'yaml';\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Code\":\"styles_Code__2Axvp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Table\":\"styles_Table__2tf1x\",\"Table1\":\"styles_Table1__2Liu2\",\"Col2\":\"styles_Col2__1vFtl\",\"Col3\":\"styles_Col3__3VxyS\",\"Col4\":\"styles_Col4__27qnj\",\"Td1\":\"styles_Td1__AfMRn\",\"Td4\":\"styles_Td4__23_G7\",\"Table2\":\"styles_Table2__p9Ysn\"};","import React from 'react';\nimport { QuestionInfo } from 'types/app-common';\nimport Code from 'components/Code';\n\nconst questions: QuestionInfo[] = [\n  {\n    question: `Truncate long text in table column and replace with ellipsis?`,\n    answer: (\n      <div>\n        <p>Case 1: Other columns are fixed-width</p>\n        <Code language=\"scss\">\n          {`td {\n    white-space: nowrap;\n\n  &.Td1 {\n    max-width: 0; // this column will take the remaining width\n    overflow: hidden;\n    text-overflow: ellipsis;\n  }\n\n  &.Td4 {\n    max-width: 100px; // this column will take 100px\n    overflow: hidden;\n    text-overflow: ellipsis;\n  }\n}`}\n        </Code>\n\n        <p>Case 2: Other columns are flexible-width</p>\n        <Code language=\"scss\">\n          {`td {\n    white-space: nowrap;\n\n  &.Td1 {\n    width: 100%;\n    max-width: 0;\n    overflow: hidden;\n    text-overflow: ellipsis;\n  }\n}`}\n        </Code>\n      </div>\n    ),\n    references: [\n      {\n        name: `[CSS-TRICKS] Truncate String with Ellipsis`,\n        url: `https://css-tricks.com/snippets/css/truncate-string-with-ellipsis/`,\n      },\n      {\n        name: `[CSS-TRICKS] text-overflow`,\n        url: `https://css-tricks.com/almanac/properties/t/text-overflow/`,\n      },\n      {\n        name: `[MDN] text-overflow`,\n        url: `https://developer.mozilla.org/en-US/docs/Web/CSS/text-overflow`,\n      },\n    ],\n  },\n];\n\nexport default questions;\n","import React, { FC, memo } from 'react';\nimport classnames from 'classnames';\nimport QuestionPage from 'components/QuestionPage';\nimport questions from './questions';\nimport classes from './styles.module.scss';\n\nexport const TextEllipsis1Impl: FC = () => (\n  <QuestionPage title=\"Text Ellipsis 1\" questions={questions}>\n    <table className={classnames(classes.Table, classes.Table1)}>\n      <colgroup>\n        <col className={classes.Col1} />\n        <col className={classes.Col2} />\n        <col className={classes.Col3} />\n        <col className={classes.Col4} />\n      </colgroup>\n      <thead>\n        <tr>\n          <th>Col 1</th>\n          <th>Col 2</th>\n          <th>Col 3</th>\n          <th>Col 4</th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {[1, 2, 3, 4, 5].map(n => (\n          <tr key={n}>\n            <td className={classes.Td1}>\n              This a very long text and a part of it should be truncated and\n              replaced with ellipsis or else the layout is broken.\n            </td>\n            <td>This is a small text.</td>\n            <td>This is a small text.</td>\n            <td className={classes.Td4}>This is another quite long text.</td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n\n    <table className={classnames(classes.Table, classes.Table2)}>\n      <thead>\n        <tr>\n          <th>Column 1</th>\n          <th>Col 2</th>\n          <th>Column Header 3</th>\n          <th>4</th>\n          <th>C5</th>\n          <th>#6</th>\n          <th>No. 7</th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {[1, 2, 3, 4, 5].map(n => (\n          <tr key={n}>\n            <td className={classes.Td1}>\n              This a very long text and a part of it should be truncated and\n              replaced with ellipsis or else the layout is broken.\n            </td>\n            <td />\n            <td />\n            <td />\n            <td />\n            <td />\n            <td />\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  </QuestionPage>\n);\n\nconst TextEllipsis1 = memo(TextEllipsis1Impl);\nTextEllipsis1.displayName = 'TextEllipsis1';\nexport default TextEllipsis1;\n"],"sourceRoot":""}