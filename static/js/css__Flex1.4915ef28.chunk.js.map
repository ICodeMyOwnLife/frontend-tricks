{"version":3,"sources":["components/Masonry/styles.ts","components/Masonry/index.tsx","pages/css/Flex1/styles.ts","pages/css/Flex1/PropsFlex.tsx","pages/css/Flex1/questions.tsx","pages/css/Flex1/index.tsx"],"names":["useStyles","makeStyles","spacing","createStyles","root","itemPanel","padding","item","width","minHeight","backgroundColor","red","classNamePrefix","itemHeights","Masonry","memo","className","itemClassName","itemPanelClassName","classes","Box","clsx","map","height","index","key","style","displayName","inputGrid","display","gridTemplateColumns","gridGap","marginBottom","flexGroup","propsFlex","flexWrap","margin","masonry","flexDirection","justifyContent","alignItems","alignContent","maxHeight","justifyContentOptions","alignItemsOptions","alignContentOptions","alignSelfOptions","PropsFlex","useMuiSelect","handleChangeJustifyContent","handleChangeAlignItems","handleChangeAlignContent","alignSelf","handleChangeAlignSelf","SelectFormControl","label","onChange","options","value","questions","question","answer","references","name","url","CodeViewer","language","Flex1Component","QuestionPage","title","Section","Flex1"],"mappings":"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","file":"static/js/css__Flex1.4915ef28.chunk.js","sourcesContent":["import { makeStyles, createStyles, Theme } from '@material-ui/core';\nimport { red } from '@material-ui/core/colors';\n\nconst styles = ({ spacing }: Theme) =>\n  createStyles({\n    root: {},\n    itemPanel: {\n      padding: spacing(1.5),\n    },\n    item: {\n      width: 180,\n      minHeight: 20,\n      backgroundColor: red[400],\n    },\n  });\n\nconst useStyles = makeStyles(styles, { classNamePrefix: 'Masonry' });\n\nexport default useStyles;\n","import React, { FC, memo } from 'react';\nimport { Box } from '@material-ui/core';\nimport clsx from 'clsx';\nimport useStyles from './styles';\n\nconst itemHeights = [\n  128,\n  160,\n  192,\n  64,\n  48,\n  180,\n  120,\n  84,\n  184,\n  144,\n  100,\n  200,\n  80,\n  60,\n  72,\n  188,\n  88,\n  92,\n  152,\n  132,\n  88,\n  92,\n  152,\n  132,\n];\n\nexport const MasonryComponent: FC<MasonryProps> = ({\n  className,\n  itemClassName,\n  itemPanelClassName,\n}) => {\n  const classes = useStyles();\n\n  return (\n    <Box className={clsx(className, classes.root)}>\n      {itemHeights.map((height, index) => (\n        <div\n          className={clsx(itemPanelClassName, classes.itemPanel)}\n          // eslint-disable-next-line react/no-array-index-key\n          key={index}\n        >\n          <div\n            className={clsx(itemClassName, classes.item)}\n            style={{ height: `${height}px` }}\n          />\n        </div>\n      ))}\n    </Box>\n  );\n};\n\nconst Masonry = memo(MasonryComponent);\nMasonry.displayName = 'Masonry';\nexport default Masonry;\n\nexport interface MasonryProps {\n  className?: string;\n  itemClassName?: string;\n  itemPanelClassName?: string;\n}\n","import { makeStyles, createStyles, Theme } from '@material-ui/core';\nimport { red } from '@material-ui/core/colors';\n\nconst styles = ({ spacing }: Theme) =>\n  createStyles({\n    root: {},\n    inputGrid: {\n      display: 'grid',\n      gridTemplateColumns: 'repeat(2, 1fr)',\n      gridGap: spacing(2, 4),\n      marginBottom: spacing(3),\n    },\n    flexGroup: {\n      display: 'grid',\n      gridGap: `${spacing(3)}px 0`,\n    },\n    propsFlex: {\n      display: 'flex',\n      flexWrap: 'wrap',\n      padding: spacing(1.5),\n      backgroundColor: red[100],\n    },\n    item: {\n      width: 180,\n      minHeight: 20,\n      margin: spacing(1.5),\n      backgroundColor: red[400],\n    },\n    masonry: {\n      display: 'flex',\n      flexDirection: 'column',\n      flexWrap: 'wrap',\n      justifyContent: 'flex-start',\n      alignItems: 'center',\n      alignContent: 'space-evenly',\n      maxHeight: 720,\n    },\n  });\n\nconst useStyles = makeStyles(styles, { classNamePrefix: 'Flex1' });\n\nexport default useStyles;\n","import React, { FC, memo } from 'react';\nimport { Box } from '@material-ui/core';\nimport useMuiSelect from 'hooks/useMuiSelect';\nimport SelectFormControl from 'components/SelectFormControl';\nimport useStyles from './styles';\n\nconst justifyContentOptions = [\n  'flex-start',\n  'flex-end',\n  'center',\n  'space-between',\n  'space-around',\n  'space-evenly',\n  'start',\n  'end',\n  'left',\n  'right',\n];\n\nconst alignItemsOptions = [\n  'stretch',\n  'flex-start',\n  'flex-end',\n  'center',\n  'baseline',\n  'first baseline',\n  'last baseline',\n  'start',\n  'end',\n  'self-start',\n  'self-end',\n];\n\nconst alignContentOptions = [\n  'flex-start',\n  'flex-end',\n  'center',\n  'space-between',\n  'space-around',\n  'space-evenly',\n  'stretch',\n  'start',\n  'end',\n  'baseline',\n  'first baseline',\n  'last baseline',\n];\n\nconst alignSelfOptions = [\n  'auto',\n  'flex-start',\n  'flex-end',\n  'center',\n  'baseline',\n  'stretch',\n];\n\nexport const PropsFlexComponent: FC = () => {\n  const classes = useStyles();\n  const [justifyContent, , handleChangeJustifyContent] = useMuiSelect();\n  const [alignItems, , handleChangeAlignItems] = useMuiSelect();\n  const [alignContent, , handleChangeAlignContent] = useMuiSelect();\n  const [alignSelf, , handleChangeAlignSelf] = useMuiSelect();\n\n  return (\n    <Box>\n      <Box className={classes.inputGrid}>\n        <SelectFormControl\n          label=\"justify-content\"\n          onChange={handleChangeJustifyContent}\n          options={justifyContentOptions}\n          value={justifyContent}\n        />\n        <SelectFormControl\n          label=\"align-items\"\n          onChange={handleChangeAlignItems}\n          options={alignItemsOptions}\n          value={alignItems}\n        />\n        <SelectFormControl\n          label=\"align-content\"\n          onChange={handleChangeAlignContent}\n          options={alignContentOptions}\n          value={alignContent}\n        />\n        <SelectFormControl\n          label=\"align-self\"\n          onChange={handleChangeAlignSelf}\n          options={alignSelfOptions}\n          value={alignSelf}\n        />\n      </Box>\n\n      <Box className={classes.flexGroup}>\n        <Box\n          className={classes.propsFlex}\n          style={{\n            justifyContent,\n            alignItems,\n            alignContent,\n            minHeight: '200px',\n          }}\n        >\n          <div className={classes.item} style={{ height: '64px' }} />\n          <div className={classes.item} style={{ height: '40px', alignSelf }} />\n          <div className={classes.item} style={{ height: '96px' }} />\n          <div className={classes.item} style={{ height: '48px' }} />\n          <div className={classes.item} style={{ height: '120px' }} />\n        </Box>\n\n        <Box\n          className={classes.propsFlex}\n          style={{\n            justifyContent,\n            alignItems,\n            alignContent,\n            minHeight: '420px',\n          }}\n        >\n          <div className={classes.item} style={{ height: '64px' }} />\n          <div className={classes.item} style={{ height: '40px', alignSelf }} />\n          <div className={classes.item} style={{ height: '96px' }} />\n          <div className={classes.item} style={{ height: '48px' }} />\n          <div className={classes.item} style={{ height: '120px' }} />\n          <div className={classes.item} style={{ height: '56px' }} />\n          <div className={classes.item} style={{ height: '80px' }} />\n          <div className={classes.item} style={{ height: '60px' }} />\n          <div className={classes.item} style={{ height: '88px' }} />\n          <div className={classes.item} style={{ height: '100px' }} />\n        </Box>\n      </Box>\n    </Box>\n  );\n};\n\nconst PropsFlex = memo(PropsFlexComponent);\nPropsFlex.displayName = 'PropsFlex';\nexport default PropsFlex;\n","/* eslint-disable react/no-unescaped-entities */\nimport React from 'react';\nimport { QuestionInfo } from 'types/app-common';\nimport CodeViewer from 'components/CodeViewer';\n\nconst questions: QuestionInfo[] = [\n  {\n    question: (\n      <span>\n        What does <code>justify-content</code> does?\n      </span>\n    ),\n    answer: (\n      <div>\n        <p>\n          The CSS <code>justify-content</code> property defines how the browser\n          distributes space between and around content items along the main-axis\n          of a flex container, and the inline axis of a grid container.\n        </p>\n      </div>\n    ),\n    references: [\n      {\n        name: `[MDN] justify-content`,\n        url: `https://developer.mozilla.org/en-US/docs/Web/CSS/justify-content`,\n      },\n    ],\n  },\n  {\n    question: (\n      <span>\n        What is the difference between <code>align-items</code>,{' '}\n        <code>align-content</code> and <code>align-self</code>?\n      </span>\n    ),\n    answer: (\n      <div>\n        <p>\n          <code>align-items</code>: The CSS <code>align-items</code> property\n          sets the <code>align-self</code> value on all direct children as a\n          group. In Flexbox, it controls the alignment of items on the Cross\n          Axis. In Grid Layout, it controls the alignment of items on the Block\n          Axis within their grid area.\n        </p>\n        <p>\n          <code>align-content</code>: The CSS <code>align-content</code>{' '}\n          property sets the distribution of space between and around content\n          items along a flexbox's cross-axis or a grid's block axis.\n        </p>\n        <p>\n          <code>align-self</code>: The <code>align-self</code> CSS property\n          overrides a grid or flex item's <code>align-items</code> value. In\n          Grid, it aligns the item inside the grid area. In Flexbox, it aligns\n          the item on the cross axis.\n        </p>\n      </div>\n    ),\n    references: [\n      {\n        name: `[MDN] align-items`,\n        url: `https://developer.mozilla.org/en-US/docs/Web/CSS/align-items`,\n      },\n      {\n        name: `[MDN] align-content`,\n        url: `https://developer.mozilla.org/en-US/docs/Web/CSS/align-content`,\n      },\n      {\n        name: `[MDN] align-self`,\n        url: `https://developer.mozilla.org/en-US/docs/Web/CSS/align-self`,\n      },\n      {\n        name: `[CSS-TRICKS] A Complete Guide to Flexbox`,\n        url: `https://css-tricks.com/snippets/css/a-guide-to-flexbox/`,\n      },\n    ],\n  },\n  {\n    question: `How to create static Masonry layout with Flexbox?`,\n    answer: (\n      <div>\n        <p>\n          Use a vertical flexbox with wrapping and fixed heigh or fixed max\n          height\n        </p>\n        <CodeViewer language=\"css\">\n          {`.Flex1-masonryFlex-178 {\n  display: flex;\n  flex-wrap: wrap;\n  max-height: 720px;\n  align-items: center;\n  align-content: space-evenly;\n  flex-direction: column;\n  justify-content: flex-start;\n}`}\n        </CodeViewer>\n      </div>\n    ),\n    references: [\n      {\n        name: `[CSS-TRICKS] Approaches for a CSS Masonry Layout`,\n        url: `https://css-tricks.com/piecing-together-approaches-for-a-css-masonry-layout/#article-header-id-1`,\n      },\n      {\n        name: `HOW TO: Pure CSS masonry layouts`,\n        url: `https://codeburst.io/how-to-pure-css-masonry-layouts-a8ede07ba31a`,\n      },\n    ],\n  },\n];\n\nexport default questions;\n","import React, { FC, memo } from 'react';\nimport QuestionPage from 'components/QuestionPage';\nimport Section from 'components/Section';\nimport Masonry from 'components/Masonry';\nimport PropsFlex from './PropsFlex';\nimport questions from './questions';\nimport useStyles from './styles';\n\nexport const Flex1Component: FC = () => {\n  const classes = useStyles();\n\n  return (\n    <QuestionPage className={classes.root} questions={questions} title=\"Flex 1\">\n      <Section title=\"align-items vs align-content vs align-self\">\n        <PropsFlex />\n      </Section>\n\n      <Section title=\"Static Masonry Layout\">\n        <Masonry className={classes.masonry} />\n      </Section>\n    </QuestionPage>\n  );\n};\n\nconst Flex1 = memo(Flex1Component);\nFlex1.displayName = 'Flex1';\nexport default Flex1;\n"],"sourceRoot":""}