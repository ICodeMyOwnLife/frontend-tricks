$shapeColor: rgb(235, 65, 43);
$dimension: 80px;
$cos18deg: 0.9510565162951535;
$cos30deg: 0.8660254037844386;
$cos36deg: 0.8090169943749475;
$cos45deg: 0.7071067811865476;
$cos54deg: 0.5877852522924731;
$sin18deg: 0.3090169943749474;
$sin36deg: 0.5877852522924731;
$tan20deg: 0.36397023426620234;
$tan36deg: 0.7265425280053608;

.ShapeContainer {
  padding: 20px;
  margin-bottom: 20px;
  border: 1px solid lightgray;
}

.Title {
  margin: 0 0 16px;
  font-size: 24px;
  font-weight: bold;
}

@keyframes rotateClockwise {
  0% {
    transform: rotate(0);
  }

  100% {
    transform: rotate(360deg);
  }
}

@mixin rotateAnimation {
  animation: rotateClockwise 5s linear infinite;
  &:hover {
    opacity: 1;
  }
}

@mixin shape($color) {
  display: inline-block;
  background-color: $color;
  @include rotateAnimation();
}

@mixin rectangle($width, $height, $color) {
  width: $width;
  height: $height;
  background-color: $color;
}

@mixin square($sideDimension, $color) {
  @include rectangle($sideDimension, $sideDimension, $color);
}

@mixin triangle {
  width: 0;
  height: 0;
  background-color: transparent;
}

@mixin isoscelesTriangle($height, $width, $apex, $color) {
  $adjacentSides: (
    top: left right,
    bottom: left right,
    left: top bottom,
    right: top bottom,
  );
  @include triangle();
  border-#{$apex}: $height solid $color;
  @each $side in map-get($map: $adjacentSides, $key: $apex) {
    border-#{$side}: $width/2 solid transparent;
  }
}

@mixin equilateralTriangle($height, $apex, $color) {
  $width: $height / $cos30deg;
  @include isoscelesTriangle($height, $width, $apex, $color);
}

@mixin rightAngledTriangle($height, $shownSide, $hiddenSide, $color) {
  @include triangle();
  border-#{$shownSide}: $height solid $color;
  border-#{$hiddenSide}: $height solid transparent;
}

@mixin trapezoid($upperWidth, $lowerWidth, $height, $color) {
  $borderWidth: abs(
      $number: $upperWidth - $lowerWidth,
    ) / 2;
  @if $upperWidth < $lowerWidth {
    width: $upperWidth;
    border-bottom: $height solid $color;
  } @else {
    width: $lowerWidth;
    border-top: $height solid $color;
  }
  background-color: transparent;
  border-left: $borderWidth solid transparent;
  border-right: $borderWidth solid transparent;
}

@mixin parallelogram($width, $height, $color) {
  $skewWidth: ($height * $tan20deg) / 2;
  position: relative;
  margin: 0 $width + $skewWidth $height $skewWidth;
  transform-origin: $width / 2 $height / 2;

  &::after {
    content: '';
    position: absolute;
    left: 0;
    top: 0;
    width: $width;
    height: $height;
    background-color: $color;
    transform: skew(-20deg);
  }
}

@mixin sixPointsStar($sideDimension, $color) {
  $height: $sideDimension * $cos30deg;
  $radius: $sideDimension / $cos30deg / 2;
  position: relative;
  margin-bottom: $height / 3;
  @include equilateralTriangle($height, bottom, $color);
  transform-origin: 50% $radius;

  &::after {
    content: '';
    position: absolute;
    top: $height / 3;
    left: -$sideDimension / 2;
    @include equilateralTriangle($height, top, $color);
  }
}

@mixin fivePointsStar($sideDimension, $color) {
  $upperThird: $sideDimension * $tan36deg / 2;
  $middleThird: $upperThird;
  $lowerThird: $sideDimension * $cos18deg - $middleThird - $upperThird;
  $radius: $sideDimension / $sin36deg / 2;
  position: relative;
  margin: $upperThird 0 $lowerThird;
  @include isoscelesTriangle($middleThird, $sideDimension, top, $color);
  transform-origin: 50% $radius - ($upperThird + $middleThird);

  &::before,
  &::after {
    top: -$middleThird - $upperThird;
    content: '';
    position: absolute;
  }

  &::before {
    left: 0;
    @include isoscelesTriangle($middleThird, $sideDimension, left, $color);
    transform: rotate(18deg);
    transform-origin: 0 0;
  }

  &::after {
    left: -$middleThird;
    @include isoscelesTriangle($middleThird, $sideDimension, right, $color);
    transform: rotate(-18deg);
    transform-origin: 100% 0;
  }
}

@mixin pentagon($sideDimension, $color) {
  $width: $sideDimension + 2 * $sideDimension * $sin18deg;
  $height: $sideDimension * $cos18deg;
  $top: $sideDimension * $sin36deg;
  $radius: $sideDimension / 2 / $sin36deg;
  position: relative;
  margin-bottom: $height;
  @include isoscelesTriangle($top, $width, bottom, $color);
  transform-origin: 50% $radius;

  &::after {
    content: '';
    position: absolute;
    top: $top;
    left: -$width / 2;
    @include trapezoid($width, $sideDimension, $height, $color);
  }
}

@mixin hexagon($sideDimension, $color) {
  $width: $sideDimension * $cos30deg * 2;
  position: relative;
  margin: $sideDimension / 2 0;
  @include rectangle($width, $sideDimension, $color);

  &::before,
  &::after {
    content: '';
    position: absolute;
  }

  &::before {
    top: -$sideDimension/2;
    @include isoscelesTriangle($sideDimension / 2, $width, bottom, $color);
  }

  &::after {
    top: $sideDimension;
    @include isoscelesTriangle($sideDimension / 2, $width, top, $color);
  }
}

@mixin octagon($sideDimension, $color) {
  $sideBorder: $sideDimension * $cos45deg;
  $width: $sideDimension + 2 * $sideBorder;
  position: relative;
  margin: $sideBorder 0;
  @include rectangle($width, $sideDimension, $color);

  &::before,
  &::after {
    content: '';
    position: absolute;
  }

  &::before {
    top: -$sideBorder;
    @include trapezoid($sideDimension, $width, $sideBorder, $color);
  }

  &::after {
    top: $sideDimension;
    @include trapezoid($width, $sideDimension, $sideBorder, $color);
  }
}

@mixin diamondSquare($sideDimension, $color) {
  $width: $sideDimension / $cos45deg;
  position: relative;
  margin: ($width - $sideDimension) / 2 ($width + $sideDimension) / 2 ($width + $sideDimension) / 2 ($width - $sideDimension) / 2;
  transform-origin: $sideDimension / 2 $sideDimension / 2;

  &::after {
    content: '';
    position: absolute;
    @include square($sideDimension, $color);
    transform: rotate(45deg);
  }
}

.Shape {
  display: inline-block;
  background-color: $shapeColor;
}

.rectangle {
  @include shape($shapeColor);
  @include rectangle($dimension * 1.4, $dimension, $shapeColor);
}

.square {
  @include shape($shapeColor);
  @include square($dimension, $shapeColor);
}

.circle {
  width: $dimension;
  height: $dimension;
  border-radius: 50%;
}

.oval {
  width: $dimension * 2;
  height: $dimension;
  border-radius: 50%;
}

.triangle {
  width: 0;
  height: 0;
  background-color: transparent;
}

.triangleUp {
  @include equilateralTriangle($dimension, bottom, $shapeColor);
}

.triangleDown {
  @include equilateralTriangle($dimension, top, $shapeColor);
}

.triangleLeft {
  @include equilateralTriangle($dimension, right, $shapeColor);
}

.triangleRight {
  @include equilateralTriangle($dimension, left, $shapeColor);
}

.triangleTopLeft {
  @include rightAngledTriangle($dimension, top, right, $shapeColor);
}

.triangleTopRight {
  @include rightAngledTriangle($dimension, top, left, $shapeColor);
}

.triangleBottomLeft {
  @include rightAngledTriangle($dimension, bottom, right, $shapeColor);
}

.triangleBottomRight {
  @include rightAngledTriangle($dimension, bottom, left, $shapeColor);
}

.curvedTailArrow {
  @extend .triangle;
  margin-left: $dimension;
  border-right: $dimension solid $shapeColor;
  border-top: $dimension solid transparent;
  transform: rotate(12deg);

  &::after {
    content: '';
    position: absolute;
    width: $dimension;
    height: $dimension;
    left: -$dimension * 0.7;
    top: -$dimension * 1.2;
    background: transparent;
    border: 0 solid transparent;
    border-top: $dimension * 0.4 solid $shapeColor;
    border-radius: 100% 0 0 0;
    transform: rotate(45deg);
  }
}

.trapezoid {
  @include shape($shapeColor);
  @include trapezoid($dimension, $dimension * 1.4, $dimension, $shapeColor);
}

.parallelogram {
  @include shape($shapeColor);
  @include parallelogram($dimension, $dimension, $shapeColor);
}

.sixPointsStar {
  @include shape($shapeColor);
  @include sixPointsStar($dimension, $shapeColor);
}

.fivePointsStar {
  @include shape($shapeColor);
  @include fivePointsStar($dimension, $shapeColor);
}

.pentagon {
  @include shape($shapeColor);
  @include pentagon($dimension, $shapeColor);
}

.hexagon {
  @include shape($shapeColor);
  @include hexagon($dimension, $shapeColor);
}

.octagon {
  @include shape($shapeColor);
  @include octagon($dimension, $shapeColor);
}

.heart {
  position: relative;
  margin: $dimension * 0.0375 $dimension * 1.25 $dimension * 1.0375 0;

  &::before,
  &::after {
    content: '';
    position: absolute;
    width: $dimension * 5/8;
    height: $dimension;
    top: 0;
    background-color: $shapeColor;
    border-radius: $dimension * 5/8 $dimension * 5/8 0 0;
  }

  &::before {
    left: $dimension * 5/8;
    transform-origin: 0 100%;
    transform: rotate(-45deg);
  }

  &::after {
    left: 0;
    transform-origin: 100% 100%;
    transform: rotate(45deg);
  }
}

.infinity {
  position: relative;
  margin: 0 $dimension * 3.6 $dimension * 5/3 0;
  background-color: transparent;

  &::before,
  &::after {
    content: '';
    position: absolute;
    width: $dimension;
    height: $dimension;
    border: $dimension/3 solid $shapeColor;
    transform: rotate(-45deg);
  }

  &::before {
    left: 0;
    border-radius: 100% 100% 0;
  }

  &::after {
    left: $dimension * 1.9;
    border-radius: 0 100% 100%;
  }
}

.diamondSquare {
  @include shape($shapeColor);
  @include diamondSquare($dimension, $shapeColor);
}

@mixin diamondShield($height, $color) {
  $width: $height * 4/5 / $cos30deg;
  position: relative;
  margin-bottom: $height * 4/5;
  @include isoscelesTriangle($height/5, $width, bottom, $color);

  &::after {
    content: '';
    position: absolute;
    left: -$width / 2;
    top: $height/5;
    @include isoscelesTriangle($height * 4/5, $width, top, $color);
  }
}

.diamondShield {
  @include diamondShield($dimension, $shapeColor);
}
